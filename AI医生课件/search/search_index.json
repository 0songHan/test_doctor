{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"AI\u533b\u751f \u00b6 \u5185\u5bb9\u8bf4\u660e \u00b6 \u672c\u8bfe\u7a0b\u4f7f\u7528\u524d\u6cbfNLP\u6280\u672f\uff0c\u642d\u5efa\u4e00\u5957\u5b8c\u6574\u7684\u667a\u80fd\u533b\u751f\u7cfb\u7edf\uff0c\u6700\u7ec8\u901a\u8fc7\u5fae\u4fe1\u516c\u4f17\u53f7\u4e3a\u7528\u6237\u63d0\u4f9b\u670d\u52a1\u3002","title":"AI\u533b\u751f"},{"location":"index.html#ai","text":"","title":"AI\u533b\u751f"},{"location":"index.html#_1","text":"\u672c\u8bfe\u7a0b\u4f7f\u7528\u524d\u6cbfNLP\u6280\u672f\uff0c\u642d\u5efa\u4e00\u5957\u5b8c\u6574\u7684\u667a\u80fd\u533b\u751f\u7cfb\u7edf\uff0c\u6700\u7ec8\u901a\u8fc7\u5fae\u4fe1\u516c\u4f17\u53f7\u4e3a\u7528\u6237\u63d0\u4f9b\u670d\u52a1\u3002","title":"\u5185\u5bb9\u8bf4\u660e"},{"location":"1.html","text":"1.1 \u80cc\u666f\u4ecb\u7ecd \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a * \u4e86\u89e3\u667a\u80fd\u5bf9\u8bdd\u7cfb\u7edf\u7684\u76f8\u5173\u80cc\u666f\u77e5\u8bc6\u3002 * \u638c\u63e1\u4f7f\u7528Unit\u5bf9\u8bddAPI\u3002 1 \u4ec0\u4e48\u662f\u667a\u80fd\u5bf9\u8bdd\u7cfb\u7edf\uff1f \u00b6 \u968f\u7740\u4eba\u5de5\u667a\u80fd\u6280\u672f\u7684\u53d1\u5c55\uff0c\u804a\u5929\u673a\u5668\u4eba\uff0c\u8bed\u97f3\u52a9\u624b\u7b49\u5e94\u7528\u5728\u751f\u6d3b\u4e2d\u968f\u5904\u53ef\u89c1\uff0c\u6bd4\u5982\u767e\u5ea6\u7684\u5c0f\u5ea6\uff0c\u963f\u91cc\u7684\u5c0f\u871c\uff0c\u5fae\u8f6f\u7684\u5c0f\u51b0\u7b49\u7b49\u3002 \u5176\u76ee\u7684\u5728\u4e8e\u901a\u8fc7\u4eba\u5de5\u667a\u80fd\u6280\u672f\u8ba9\u673a\u5668\u50cf\u4eba\u7c7b\u4e00\u6837\u80fd\u591f\u8fdb\u884c\u667a\u80fd\u56de\u590d\uff0c\u89e3\u51b3\u73b0\u5b9e\u4e2d\u7684\u5404\u79cd\u95ee\u9898\u3002 \u4ece\u5904\u7406\u95ee\u9898\u7684\u89d2\u5ea6\u6765\u533a\u5206\uff0c\u667a\u80fd\u5bf9\u8bdd\u7cfb\u7edf\u53ef\u5206\u4e3a\uff1a \u4efb\u52a1\u5bfc\u5411\u578b\uff1a\u5b8c\u6210\u5177\u6709\u660e\u786e\u6307\u5411\u6027\u7684\u4efb\u52a1\uff0c\u6bd4\u5982\u9884\u5b9a\u9152\u5e97\u54a8\u8be2\uff0c \u5728\u7ebf\u95ee\u8bca\u7b49\u7b49\u3002 \u975e\u4efb\u52a1\u5bfc\u5411\u578b\uff1a\u6ca1\u6709\u660e\u786e\u76ee\u7684\uff0c\u6bd4\u5982\u7b97\u7b97\u672f\uff0c\u64ad\u653e\u97f3\u4e50\uff0c\u56de\u7b54\u95ee\u9898\u3002 \u6211\u4eec\u7684\u5728\u7ebf\u533b\u751f\u9879\u76ee\u5c31\u662f\u4efb\u52a1\u5bfc\u5411\u578b\u7684\u667a\u80fd\u5bf9\u8bdd\u7cfb\u7edf\u3002 1.2 \u5728\u7ebf\u533b\u751f\u7684\u603b\u4f53\u67b6\u6784 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u5728\u7ebf\u533b\u751f\u9879\u76ee\u7684\u603b\u4f53\u67b6\u6784 \u9879\u76ee\u6574\u4f53\u67b6\u6784\u56fe\uff1a \u67b6\u6784\u56fe\u5206\u6790\uff0c\u6574\u4e2a\u9879\u76ee\u5206\u4e3a\uff1a\u5728\u7ebf\u90e8\u5206\u548c\u79bb\u7ebf\u90e8\u5206 \u5728\u7ebf\u90e8\u5206\u5305\u62ec\uff1awerobot\u670d\u52a1\u6a21\u5757\uff0c\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u6a21\u5757\uff0c\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u6a21\u5757\uff0c\u4f1a\u8bdd\u7ba1\u7406\u6a21\u5757(redis), \u56fe\u6570\u636e\u5e93\u6a21\u5757\u4ee5\u53ca\u89c4\u5219\u5bf9\u8bdd/Unit\u6a21\u5757\u3002 \u79bb\u7ebf\u90e8\u5206\u5305\u62ec\uff1a\u7ed3\u6784\u4e0e\u975e\u7ed3\u6784\u5316\u6570\u636e\u91c7\u96c6\u6a21\u5757\uff0cNER\u6a21\u578b\u4f7f\u7528\u6a21\u5757\uff0c\u4ee5\u53ca\u5b9e\u4f53\u5ba1\u6838\u6a21\u578b\u4f7f\u7528\u6a21\u5757\u3002 \u5728\u7ebf\u90e8\u5206\u6570\u636e\u6d41\uff1a\u4ece\u7528\u6237\u8bf7\u6c42\u5f00\u59cb\uff0c\u901a\u8fc7werobot\u670d\u52a1\uff0c\u5728werobot\u670d\u52a1\u5185\u90e8\u8bf7\u6c42\u4e3b\u670d\u52a1\uff0c\u5728\u4e3b\u670d\u52a1\u4e2d\u5c06\u8c03\u7528\u4f1a\u8bdd\u7ba1\u7406\u6570\u636e\u5e93redis, \u8c03\u7528\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\uff0c\u4ee5\u53ca\u8c03\u7528\u56fe\u6570\u636e\u5e93\uff0c\u6700\u540e\u5c06\u67e5\u8be2\u7ed3\u679c\u8f93\u9001\u7ed9\u5bf9\u8bdd\u89c4\u5219\u6a21\u7248\u6216\u8005\u4f7f\u7528Unit\u5bf9\u8bddAPI\u56de\u590d\u3002 \u79bb\u7ebf\u90e8\u5206\u6570\u636e\u6d41\uff1a\u4ece\u6570\u636e\u91c7\u96c6\u5f00\u59cb\uff0c\u5c06\u83b7\u5f97\u7ed3\u6784\u5316\u548c\u975e\u7ed3\u6784\u5316\u7684\u6570\u636e\uff0c\u5bf9\u4e8e\u7ed3\u6784\u5316\u6570\u636e\u5c06\u76f4\u63a5\u4f7f\u7528\u5b9e\u4f53\u5ba1\u6838\u6a21\u578b\u8fdb\u884c\u5ba1\u6838\uff0c\u7136\u540e\u5199\u5165\u56fe\u6570\u636e\u5e93; \u5bf9\u4e8e\u975e\u7ed3\u6784\u5316\u6570\u636e\uff0c\u5c06\u4f7f\u7528NER\u6a21\u578b\u8fdb\u884c\u5b9e\u4f53\u62bd\u53d6\uff0c\u7136\u540e\u901a\u8fc7\u5b9e\u4f53\u5ba1\u6838\u540e\u518d\u5199\u5165\u56fe\u6570\u636e\u5e93\u3002 1.3 \u5c0f\u7ed3 \u00b6 \u5b66\u4e60\u4e86\u667a\u80fd\u5bf9\u8bdd\u7cfb\u7edf\u7684\u76f8\u5173\u80cc\u666f\u77e5\u8bc6\uff1a \u4ec0\u4e48\u662f\u667a\u80fd\u5bf9\u8bdd\u7cfb\u7edf \u4ece\u5904\u7406\u95ee\u9898\u7684\u76ee\u7684\u6765\u533a\u5206\uff0c\u667a\u80fd\u5bf9\u8bdd\u7cfb\u7edf\u7684\u5206\u7c7b \u6211\u4eec\u7684\u5728\u7ebf\u533b\u751f\u9879\u76ee\u5c31\u662f\u4efb\u52a1\u5bfc\u5411\u578b\u7684\u667a\u80fd\u5bf9\u8bdd\u7cfb\u7edf\u3002 \u5b66\u4e60\u4e86\u67b6\u6784\u56fe\u5206\u6790\uff1a \u6574\u4e2a\u9879\u76ee\u5206\u4e3a\uff1a\u5728\u7ebf\u90e8\u5206\u548c\u79bb\u7ebf\u90e8\u5206 \u5728\u7ebf\u90e8\u5206\u5305\u62ec\uff1awerobot\u670d\u52a1\u6a21\u5757\uff0c\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u6a21\u5757\uff0c\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u6a21\u5757\uff0c\u4f1a\u8bdd\u7ba1\u7406\u6a21\u5757(redis), \u56fe\u6570\u636e\u5e93\u6a21\u5757\u4ee5\u53ca\u89c4\u5219\u5bf9\u8bdd/Unit\u6a21\u5757\u3002 \u79bb\u7ebf\u90e8\u5206\u5305\u62ec\uff1a\u7ed3\u6784\u4e0e\u975e\u7ed3\u6784\u5316\u6570\u636e\u91c7\u96c6\u6a21\u5757\uff0cNER\u6a21\u578b\u4f7f\u7528\u6a21\u5757\uff0c\u4ee5\u53ca\u5b9e\u4f53\u5ba1\u6838\u6a21\u578b\u4f7f\u7528\u6a21\u5757\u3002","title":"\u7b2c\u4e00\u7ae0:\u80cc\u666f\u4ecb\u7ecd\u53caAI\u533b\u751f\u67b6\u6784"},{"location":"1.html#11","text":"\u5b66\u4e60\u76ee\u6807\uff1a * \u4e86\u89e3\u667a\u80fd\u5bf9\u8bdd\u7cfb\u7edf\u7684\u76f8\u5173\u80cc\u666f\u77e5\u8bc6\u3002 * \u638c\u63e1\u4f7f\u7528Unit\u5bf9\u8bddAPI\u3002","title":"1.1 \u80cc\u666f\u4ecb\u7ecd"},{"location":"1.html#1","text":"\u968f\u7740\u4eba\u5de5\u667a\u80fd\u6280\u672f\u7684\u53d1\u5c55\uff0c\u804a\u5929\u673a\u5668\u4eba\uff0c\u8bed\u97f3\u52a9\u624b\u7b49\u5e94\u7528\u5728\u751f\u6d3b\u4e2d\u968f\u5904\u53ef\u89c1\uff0c\u6bd4\u5982\u767e\u5ea6\u7684\u5c0f\u5ea6\uff0c\u963f\u91cc\u7684\u5c0f\u871c\uff0c\u5fae\u8f6f\u7684\u5c0f\u51b0\u7b49\u7b49\u3002 \u5176\u76ee\u7684\u5728\u4e8e\u901a\u8fc7\u4eba\u5de5\u667a\u80fd\u6280\u672f\u8ba9\u673a\u5668\u50cf\u4eba\u7c7b\u4e00\u6837\u80fd\u591f\u8fdb\u884c\u667a\u80fd\u56de\u590d\uff0c\u89e3\u51b3\u73b0\u5b9e\u4e2d\u7684\u5404\u79cd\u95ee\u9898\u3002 \u4ece\u5904\u7406\u95ee\u9898\u7684\u89d2\u5ea6\u6765\u533a\u5206\uff0c\u667a\u80fd\u5bf9\u8bdd\u7cfb\u7edf\u53ef\u5206\u4e3a\uff1a \u4efb\u52a1\u5bfc\u5411\u578b\uff1a\u5b8c\u6210\u5177\u6709\u660e\u786e\u6307\u5411\u6027\u7684\u4efb\u52a1\uff0c\u6bd4\u5982\u9884\u5b9a\u9152\u5e97\u54a8\u8be2\uff0c \u5728\u7ebf\u95ee\u8bca\u7b49\u7b49\u3002 \u975e\u4efb\u52a1\u5bfc\u5411\u578b\uff1a\u6ca1\u6709\u660e\u786e\u76ee\u7684\uff0c\u6bd4\u5982\u7b97\u7b97\u672f\uff0c\u64ad\u653e\u97f3\u4e50\uff0c\u56de\u7b54\u95ee\u9898\u3002 \u6211\u4eec\u7684\u5728\u7ebf\u533b\u751f\u9879\u76ee\u5c31\u662f\u4efb\u52a1\u5bfc\u5411\u578b\u7684\u667a\u80fd\u5bf9\u8bdd\u7cfb\u7edf\u3002","title":"1 \u4ec0\u4e48\u662f\u667a\u80fd\u5bf9\u8bdd\u7cfb\u7edf\uff1f"},{"location":"1.html#12","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u5728\u7ebf\u533b\u751f\u9879\u76ee\u7684\u603b\u4f53\u67b6\u6784 \u9879\u76ee\u6574\u4f53\u67b6\u6784\u56fe\uff1a \u67b6\u6784\u56fe\u5206\u6790\uff0c\u6574\u4e2a\u9879\u76ee\u5206\u4e3a\uff1a\u5728\u7ebf\u90e8\u5206\u548c\u79bb\u7ebf\u90e8\u5206 \u5728\u7ebf\u90e8\u5206\u5305\u62ec\uff1awerobot\u670d\u52a1\u6a21\u5757\uff0c\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u6a21\u5757\uff0c\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u6a21\u5757\uff0c\u4f1a\u8bdd\u7ba1\u7406\u6a21\u5757(redis), \u56fe\u6570\u636e\u5e93\u6a21\u5757\u4ee5\u53ca\u89c4\u5219\u5bf9\u8bdd/Unit\u6a21\u5757\u3002 \u79bb\u7ebf\u90e8\u5206\u5305\u62ec\uff1a\u7ed3\u6784\u4e0e\u975e\u7ed3\u6784\u5316\u6570\u636e\u91c7\u96c6\u6a21\u5757\uff0cNER\u6a21\u578b\u4f7f\u7528\u6a21\u5757\uff0c\u4ee5\u53ca\u5b9e\u4f53\u5ba1\u6838\u6a21\u578b\u4f7f\u7528\u6a21\u5757\u3002 \u5728\u7ebf\u90e8\u5206\u6570\u636e\u6d41\uff1a\u4ece\u7528\u6237\u8bf7\u6c42\u5f00\u59cb\uff0c\u901a\u8fc7werobot\u670d\u52a1\uff0c\u5728werobot\u670d\u52a1\u5185\u90e8\u8bf7\u6c42\u4e3b\u670d\u52a1\uff0c\u5728\u4e3b\u670d\u52a1\u4e2d\u5c06\u8c03\u7528\u4f1a\u8bdd\u7ba1\u7406\u6570\u636e\u5e93redis, \u8c03\u7528\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\uff0c\u4ee5\u53ca\u8c03\u7528\u56fe\u6570\u636e\u5e93\uff0c\u6700\u540e\u5c06\u67e5\u8be2\u7ed3\u679c\u8f93\u9001\u7ed9\u5bf9\u8bdd\u89c4\u5219\u6a21\u7248\u6216\u8005\u4f7f\u7528Unit\u5bf9\u8bddAPI\u56de\u590d\u3002 \u79bb\u7ebf\u90e8\u5206\u6570\u636e\u6d41\uff1a\u4ece\u6570\u636e\u91c7\u96c6\u5f00\u59cb\uff0c\u5c06\u83b7\u5f97\u7ed3\u6784\u5316\u548c\u975e\u7ed3\u6784\u5316\u7684\u6570\u636e\uff0c\u5bf9\u4e8e\u7ed3\u6784\u5316\u6570\u636e\u5c06\u76f4\u63a5\u4f7f\u7528\u5b9e\u4f53\u5ba1\u6838\u6a21\u578b\u8fdb\u884c\u5ba1\u6838\uff0c\u7136\u540e\u5199\u5165\u56fe\u6570\u636e\u5e93; \u5bf9\u4e8e\u975e\u7ed3\u6784\u5316\u6570\u636e\uff0c\u5c06\u4f7f\u7528NER\u6a21\u578b\u8fdb\u884c\u5b9e\u4f53\u62bd\u53d6\uff0c\u7136\u540e\u901a\u8fc7\u5b9e\u4f53\u5ba1\u6838\u540e\u518d\u5199\u5165\u56fe\u6570\u636e\u5e93\u3002","title":"1.2 \u5728\u7ebf\u533b\u751f\u7684\u603b\u4f53\u67b6\u6784"},{"location":"1.html#13","text":"\u5b66\u4e60\u4e86\u667a\u80fd\u5bf9\u8bdd\u7cfb\u7edf\u7684\u76f8\u5173\u80cc\u666f\u77e5\u8bc6\uff1a \u4ec0\u4e48\u662f\u667a\u80fd\u5bf9\u8bdd\u7cfb\u7edf \u4ece\u5904\u7406\u95ee\u9898\u7684\u76ee\u7684\u6765\u533a\u5206\uff0c\u667a\u80fd\u5bf9\u8bdd\u7cfb\u7edf\u7684\u5206\u7c7b \u6211\u4eec\u7684\u5728\u7ebf\u533b\u751f\u9879\u76ee\u5c31\u662f\u4efb\u52a1\u5bfc\u5411\u578b\u7684\u667a\u80fd\u5bf9\u8bdd\u7cfb\u7edf\u3002 \u5b66\u4e60\u4e86\u67b6\u6784\u56fe\u5206\u6790\uff1a \u6574\u4e2a\u9879\u76ee\u5206\u4e3a\uff1a\u5728\u7ebf\u90e8\u5206\u548c\u79bb\u7ebf\u90e8\u5206 \u5728\u7ebf\u90e8\u5206\u5305\u62ec\uff1awerobot\u670d\u52a1\u6a21\u5757\uff0c\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u6a21\u5757\uff0c\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u6a21\u5757\uff0c\u4f1a\u8bdd\u7ba1\u7406\u6a21\u5757(redis), \u56fe\u6570\u636e\u5e93\u6a21\u5757\u4ee5\u53ca\u89c4\u5219\u5bf9\u8bdd/Unit\u6a21\u5757\u3002 \u79bb\u7ebf\u90e8\u5206\u5305\u62ec\uff1a\u7ed3\u6784\u4e0e\u975e\u7ed3\u6784\u5316\u6570\u636e\u91c7\u96c6\u6a21\u5757\uff0cNER\u6a21\u578b\u4f7f\u7528\u6a21\u5757\uff0c\u4ee5\u53ca\u5b9e\u4f53\u5ba1\u6838\u6a21\u578b\u4f7f\u7528\u6a21\u5757\u3002","title":"1.3 \u5c0f\u7ed3"},{"location":"10.html","text":"AI\u533b\u751f\u5b89\u88c5\u90e8\u7f72\u624b\u518c \u00b6 \u6ce8\u610f\u4e8b\u9879: \u8fd9\u4e2a\u5b89\u88c5\u624b\u518c\u53ea\u9002\u7528\u4e8e\u64cd\u4f5c\u7cfb\u7edf: centos 7 \u5b89\u88c5\u90e8\u7f72\u6b65\u9aa4 \u00b6 1 \u62f7\u8d1d\u5fc5\u5907\u6587\u4ef6 2 \u5b89\u88c5Anaconda\u79d1\u5b66\u8ba1\u7b97\u73af\u5883, \u5305\u62ecpython, pip, pandas, numpy, matplotplib\u7b49\u79d1\u5b66\u8ba1\u7b97\u5305 3 \u5b89\u88c5\u9879\u76ee\u9700\u8981\u7684\u82e5\u5e72\u72ec\u7acb\u5de5\u5177. # \u5b89\u88c5Redis\u6570\u636e\u5e93 yum install redis -y # \u5b89\u88c5supervisor yum install supervisor -y # \u5b89\u88c5lsof yum install lsof -y # \u6fc0\u6d3b\u865a\u62df\u73af\u5883 conda activate ai_doctor # \u5b89\u88c5Flask pip install flask # \u5b89\u88c5python\u4e2d\u7684redis\u9a71\u52a8 pip install redis # \u5b89\u88c5gunicorn pip install gunicorn 4 \u5b89\u88c5\u9879\u76ee\u9700\u8981\u7684\u91cd\u8981\u5de5\u5177pytorch # \u5b89\u88c5pytorch pip install torch 5 \u5b89\u88c5\u56fe\u6570\u636e\u5e93neo4j # \u7b2c\u4e00\u6b65: \u5c06neo4j\u5b89\u88c5\u4fe1\u606f\u8f7d\u5165\u5230yum\u68c0\u7d22\u5217\u8868 rpm --import http://debian.neo4j.org/neotechnology.gpg.key vim /etc/yum.repos.d/neo4j.repo # \u5199\u5165\u4e0b\u9762\u5185\u5bb9 [ neo4j ] name = Neo4j RPM Repository baseurl = http://yum.neo4j.org/stable enabled = 1 gpgcheck = 1 # \u7b2c\u4e8c\u6b65: \u4f7f\u7528yum install\u547d\u4ee4\u5b89\u88c5 yum install neo4j # \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528pip install\u547d\u4ee4\u5b89\u88c5neo4j\u9a71\u52a8 pip install neo4j neo4j-driver # \u7b2c\u56db\u6b65: \u4f7f\u7528\u81ea\u5df1\u7684\u914d\u7f6e\u6587\u4ef6 cp /data/neo4j.conf /etc/neo4j/neo4j.conf 6 \u914d\u7f6esupervisord\u7ba1\u7406neo4j\u56fe\u6570\u636e\u5e93 # \u5728/etc/supervisord.conf\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e # \u6ce8\u610f\u914d\u7f6eneo4j\u9700\u8981\u4fee\u6539/var/log/neo4j/\u548c/var/lib/neo4j\u76ee\u5f55\u5c5e\u7ec4\uff0c\u5426\u5219\u65e0\u6cd5\u542f\u52a8 # chown -R neo4j:neo4j /var/log/neo4j # chown -R neo4j:neo4j /var/lib/neo4j [ program:neo4j ] command = neo4j console user = neo4j autostart = true autorestart = unexpected startsecs = 30 startretries = 999 priorities = 90 exitcodes = 0 ,1,2 stopsignal = SIGTERM stopasgroup = true killasgroup = true redirect_stderr = true stdout_logfile = /var/log/neo4j/neo4j_supervisor.out stdout_logfile_backups = 10 stderr_capture_maxbytes = 20MB \u5728supervisord\u4e2d\u542f\u52a8neo4j supervisorctl # \u8fdb\u5165supervisord\u547d\u4ee4\u884c start neo4j # \u542f\u52a8neo4j\u670d\u52a1 7 \u4f7f\u7528\u811a\u672c\u751f\u6210\u56fe\u8c31 # \u6267\u884c\u5df2\u7ecf\u5199\u597d\u7684\u811a\u672c\u4ee3\u7801, \u5c06\u6570\u636e\u5199\u5165\u5230neo4j\u6570\u636e\u5e93\u4e2d python /data/doctor_offline/neo4j_write.py 8 \u4f7f\u7528\u811a\u672c\u8bad\u7ec3\u6a21\u578b # \u5728\u7ebf\u90e8\u5206\u53ea\u6709\u4e00\u4e2a\u6a21\u578bbert-chinese cd /data/doctor_online/bert_server/ python train.py 9 \u914d\u7f6ewerobot\u670d\u52a1 # \u5728/etc/supervisord.conf\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff0c\u5176\u4e2d/root/xxx/\u4e3a\u9879\u76ee\u5b9e\u9645\u6839\u76ee\u5f55 # /path/to/gunicorn\u662f\u5728\u865a\u62df\u73af\u5883\u4e0b\u901a\u8fc7 which gunicorn \u547d\u4ee4\u67e5\u627e\u5230\u7684gunicorn\u771f\u5b9e\u8def\u5f84 # \u4f8b\u5982/root/anaconda3/envs/ai_doctor/bin/gunicorn [ program:werobot ] command = /path/to/gunicorn -w 1 wr:robot.wsgi directory = /root/xxx/ stopsignal = QUIT stopasgroup = false killasgroup = false stdout_logfile = /var/log/werobot_out stdout_logfile_maxbytes = 1MB stderr_logfile = /var/log/werobot_error stderr_logfile_maxbytes = 1MB 10 \u914d\u7f6e\u4e3b\u8981\u903b\u8f91\u670d\u52a1 # \u5728/etc/supervisord.conf\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff0c\u5176\u4e2d/root/xxx/\u4e3a\u9879\u76ee\u5b9e\u9645\u6839\u76ee\u5f55 # /path/to/gunicorn\u662f\u5728\u865a\u62df\u73af\u5883\u4e0b\u901a\u8fc7 which gunicorn \u547d\u4ee4\u67e5\u627e\u5230\u7684gunicorn\u771f\u5b9e\u8def\u5f84 # \u4f8b\u5982/root/anaconda3/envs/ai_doctor/bin/gunicorn [ program:main_serve ] command = /path/to/gunicorn -w 1 -b 0 .0.0.0:5000 app:app directory = /root/xxx/doctor_online/main_serve stopsignal = QUIT stopasgroup = false killasgroup = false stdout_logfile = /var/log/main_serve_out stdout_logfile_maxbytes = 1MB stderr_logfile = /var/log/main_serve_error stderr_logfile_maxbytes = 1MB 11 \u914d\u7f6e\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1 # \u5728/etc/supervisord.conf\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff0c\u5176\u4e2d/root/xxx/\u4e3a\u9879\u76ee\u5b9e\u9645\u6839\u76ee\u5f55 # /path/to/gunicorn\u662f\u5728\u865a\u62df\u73af\u5883\u4e0b\u901a\u8fc7 which gunicorn \u547d\u4ee4\u67e5\u627e\u5230\u7684gunicorn\u771f\u5b9e\u8def\u5f84 [ program:bert_serve ] command = /path/to/gunicorn -w 1 -b 0 .0.0.0:5001 app:app directory = /root/xxx/doctor_online/bert_serve stopsignal = QUIT stopasgroup = false killasgroup = false stdout_logfile = /var/log/bert_serve_out stdout_logfile_maxbytes = 1MB stderr_logfile = /var/log/bert_serve_error stderr_logfile_maxbytes = 1MB 12 \u914d\u7f6eredis\u670d\u52a1 [ program:redis ] command = redis-server 13 \u91cd\u542fsupervisord\u7ba1\u7406\u7684\u670d\u52a1 supervisorctl restart all 14 \u8fdb\u884c\u6d4b\u8bd5 \u6d4b\u8bd51: \u5173\u6ce8\u516c\u4f17\u53f7 ( \u65b0\u7528\u6237 ) , \u53d1\u9001 \"\u6211\u6700\u8fd1\u6709\u4e9b\u8179\u75db\" . \u6d4b\u8bd52: ( \u8001\u7528\u6237 ) \u53d1\u9001 \"\u6211\u6700\u8fd1\u6709\u4e9b\u8179\u75db\" \u540e, \u7ee7\u7eed\u53d1\u9001 \"\u5e76\u4e14\u5de6\u8179\u90e8\u6709\u4e00\u4e9b\u7ea2\u70b9\" .","title":"\u9644\u5f55:\u73af\u5883\u5b89\u88c5\u90e8\u7f72\u624b\u518c"},{"location":"10.html#ai","text":"\u6ce8\u610f\u4e8b\u9879: \u8fd9\u4e2a\u5b89\u88c5\u624b\u518c\u53ea\u9002\u7528\u4e8e\u64cd\u4f5c\u7cfb\u7edf: centos 7","title":"AI\u533b\u751f\u5b89\u88c5\u90e8\u7f72\u624b\u518c"},{"location":"10.html#_1","text":"1 \u62f7\u8d1d\u5fc5\u5907\u6587\u4ef6 2 \u5b89\u88c5Anaconda\u79d1\u5b66\u8ba1\u7b97\u73af\u5883, \u5305\u62ecpython, pip, pandas, numpy, matplotplib\u7b49\u79d1\u5b66\u8ba1\u7b97\u5305 3 \u5b89\u88c5\u9879\u76ee\u9700\u8981\u7684\u82e5\u5e72\u72ec\u7acb\u5de5\u5177. # \u5b89\u88c5Redis\u6570\u636e\u5e93 yum install redis -y # \u5b89\u88c5supervisor yum install supervisor -y # \u5b89\u88c5lsof yum install lsof -y # \u6fc0\u6d3b\u865a\u62df\u73af\u5883 conda activate ai_doctor # \u5b89\u88c5Flask pip install flask # \u5b89\u88c5python\u4e2d\u7684redis\u9a71\u52a8 pip install redis # \u5b89\u88c5gunicorn pip install gunicorn 4 \u5b89\u88c5\u9879\u76ee\u9700\u8981\u7684\u91cd\u8981\u5de5\u5177pytorch # \u5b89\u88c5pytorch pip install torch 5 \u5b89\u88c5\u56fe\u6570\u636e\u5e93neo4j # \u7b2c\u4e00\u6b65: \u5c06neo4j\u5b89\u88c5\u4fe1\u606f\u8f7d\u5165\u5230yum\u68c0\u7d22\u5217\u8868 rpm --import http://debian.neo4j.org/neotechnology.gpg.key vim /etc/yum.repos.d/neo4j.repo # \u5199\u5165\u4e0b\u9762\u5185\u5bb9 [ neo4j ] name = Neo4j RPM Repository baseurl = http://yum.neo4j.org/stable enabled = 1 gpgcheck = 1 # \u7b2c\u4e8c\u6b65: \u4f7f\u7528yum install\u547d\u4ee4\u5b89\u88c5 yum install neo4j # \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528pip install\u547d\u4ee4\u5b89\u88c5neo4j\u9a71\u52a8 pip install neo4j neo4j-driver # \u7b2c\u56db\u6b65: \u4f7f\u7528\u81ea\u5df1\u7684\u914d\u7f6e\u6587\u4ef6 cp /data/neo4j.conf /etc/neo4j/neo4j.conf 6 \u914d\u7f6esupervisord\u7ba1\u7406neo4j\u56fe\u6570\u636e\u5e93 # \u5728/etc/supervisord.conf\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e # \u6ce8\u610f\u914d\u7f6eneo4j\u9700\u8981\u4fee\u6539/var/log/neo4j/\u548c/var/lib/neo4j\u76ee\u5f55\u5c5e\u7ec4\uff0c\u5426\u5219\u65e0\u6cd5\u542f\u52a8 # chown -R neo4j:neo4j /var/log/neo4j # chown -R neo4j:neo4j /var/lib/neo4j [ program:neo4j ] command = neo4j console user = neo4j autostart = true autorestart = unexpected startsecs = 30 startretries = 999 priorities = 90 exitcodes = 0 ,1,2 stopsignal = SIGTERM stopasgroup = true killasgroup = true redirect_stderr = true stdout_logfile = /var/log/neo4j/neo4j_supervisor.out stdout_logfile_backups = 10 stderr_capture_maxbytes = 20MB \u5728supervisord\u4e2d\u542f\u52a8neo4j supervisorctl # \u8fdb\u5165supervisord\u547d\u4ee4\u884c start neo4j # \u542f\u52a8neo4j\u670d\u52a1 7 \u4f7f\u7528\u811a\u672c\u751f\u6210\u56fe\u8c31 # \u6267\u884c\u5df2\u7ecf\u5199\u597d\u7684\u811a\u672c\u4ee3\u7801, \u5c06\u6570\u636e\u5199\u5165\u5230neo4j\u6570\u636e\u5e93\u4e2d python /data/doctor_offline/neo4j_write.py 8 \u4f7f\u7528\u811a\u672c\u8bad\u7ec3\u6a21\u578b # \u5728\u7ebf\u90e8\u5206\u53ea\u6709\u4e00\u4e2a\u6a21\u578bbert-chinese cd /data/doctor_online/bert_server/ python train.py 9 \u914d\u7f6ewerobot\u670d\u52a1 # \u5728/etc/supervisord.conf\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff0c\u5176\u4e2d/root/xxx/\u4e3a\u9879\u76ee\u5b9e\u9645\u6839\u76ee\u5f55 # /path/to/gunicorn\u662f\u5728\u865a\u62df\u73af\u5883\u4e0b\u901a\u8fc7 which gunicorn \u547d\u4ee4\u67e5\u627e\u5230\u7684gunicorn\u771f\u5b9e\u8def\u5f84 # \u4f8b\u5982/root/anaconda3/envs/ai_doctor/bin/gunicorn [ program:werobot ] command = /path/to/gunicorn -w 1 wr:robot.wsgi directory = /root/xxx/ stopsignal = QUIT stopasgroup = false killasgroup = false stdout_logfile = /var/log/werobot_out stdout_logfile_maxbytes = 1MB stderr_logfile = /var/log/werobot_error stderr_logfile_maxbytes = 1MB 10 \u914d\u7f6e\u4e3b\u8981\u903b\u8f91\u670d\u52a1 # \u5728/etc/supervisord.conf\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff0c\u5176\u4e2d/root/xxx/\u4e3a\u9879\u76ee\u5b9e\u9645\u6839\u76ee\u5f55 # /path/to/gunicorn\u662f\u5728\u865a\u62df\u73af\u5883\u4e0b\u901a\u8fc7 which gunicorn \u547d\u4ee4\u67e5\u627e\u5230\u7684gunicorn\u771f\u5b9e\u8def\u5f84 # \u4f8b\u5982/root/anaconda3/envs/ai_doctor/bin/gunicorn [ program:main_serve ] command = /path/to/gunicorn -w 1 -b 0 .0.0.0:5000 app:app directory = /root/xxx/doctor_online/main_serve stopsignal = QUIT stopasgroup = false killasgroup = false stdout_logfile = /var/log/main_serve_out stdout_logfile_maxbytes = 1MB stderr_logfile = /var/log/main_serve_error stderr_logfile_maxbytes = 1MB 11 \u914d\u7f6e\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1 # \u5728/etc/supervisord.conf\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff0c\u5176\u4e2d/root/xxx/\u4e3a\u9879\u76ee\u5b9e\u9645\u6839\u76ee\u5f55 # /path/to/gunicorn\u662f\u5728\u865a\u62df\u73af\u5883\u4e0b\u901a\u8fc7 which gunicorn \u547d\u4ee4\u67e5\u627e\u5230\u7684gunicorn\u771f\u5b9e\u8def\u5f84 [ program:bert_serve ] command = /path/to/gunicorn -w 1 -b 0 .0.0.0:5001 app:app directory = /root/xxx/doctor_online/bert_serve stopsignal = QUIT stopasgroup = false killasgroup = false stdout_logfile = /var/log/bert_serve_out stdout_logfile_maxbytes = 1MB stderr_logfile = /var/log/bert_serve_error stderr_logfile_maxbytes = 1MB 12 \u914d\u7f6eredis\u670d\u52a1 [ program:redis ] command = redis-server 13 \u91cd\u542fsupervisord\u7ba1\u7406\u7684\u670d\u52a1 supervisorctl restart all 14 \u8fdb\u884c\u6d4b\u8bd5 \u6d4b\u8bd51: \u5173\u6ce8\u516c\u4f17\u53f7 ( \u65b0\u7528\u6237 ) , \u53d1\u9001 \"\u6211\u6700\u8fd1\u6709\u4e9b\u8179\u75db\" . \u6d4b\u8bd52: ( \u8001\u7528\u6237 ) \u53d1\u9001 \"\u6211\u6700\u8fd1\u6709\u4e9b\u8179\u75db\" \u540e, \u7ee7\u7eed\u53d1\u9001 \"\u5e76\u4e14\u5de6\u8179\u90e8\u6709\u4e00\u4e9b\u7ea2\u70b9\" .","title":"\u5b89\u88c5\u90e8\u7f72\u6b65\u9aa4"},{"location":"2.html","text":"2 \u603b\u4f53\u67b6\u6784\u4e2d\u7684\u5de5\u5177\u4ecb\u7ecd \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u603b\u4f53\u67b6\u6784\u4e2d\u4f7f\u7528\u4e86\u54ea\u4e9b\u5de5\u5177\u3002 \u638c\u63e1\u603b\u4f53\u67b6\u6784\u4e2d\u5404\u4e2a\u5de5\u5177\u7684\u7b80\u4ecb\uff0c\u4f5c\u7528\uff0c\u5b89\u88c5\u548c\u57fa\u672c\u4f7f\u7528\u65b9\u6cd5\u3002 \u603b\u4f53\u67b6\u6784\u4e2d\u4f7f\u7528\u7684\u5de5\u5177\uff1a Unit\u5bf9\u8bddAPI\u4f7f\u7528 Flask web\u670d\u52a1\u6846\u67b6 Redis\u6570\u636e\u5e93 Gunicorn\u670d\u52a1\u7ec4\u4ef6 Supervisor\u670d\u52a1\u76d1\u63a7\u5668 Neo4j\u56fe\u6570\u636e\u5e93 1 Unit\u5bf9\u8bddAPI\u4f7f\u7528 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3Unit\u5e73\u53f0\u7684\u76f8\u5173\u77e5\u8bc6\u3002 \u638c\u63e1\u8c03\u7528Unit API\u7684\u5b9e\u73b0\u8fc7\u7a0b\u3002 1 Unit\u5e73\u53f0\u7684\u76f8\u5173\u77e5\u8bc6 \u00b6 Unit\u5e73\u53f0\u662f\u767e\u5ea6\u5927\u8111\u5f00\u653e\u7684\u667a\u80fd\u5bf9\u8bdd\u5b9a\u5236\u4e0e\u670d\u52a1\u5e73\u53f0\uff0c\u4e5f\u662f\u5f53\u524d\u6700\u5927\u7684\u4e2d\u6587\u9886\u57df\u5bf9\u8bdd\u5f00\u653e\u5e73\u53f0\u4e4b\u4e00\u3002 Unit\u5bf9\u6ce8\u518c\u7528\u6237\u63d0\u4f9b\u514d\u8d39\u7684\u5bf9\u8bdd\u63a5\u53e3\u670d\u52a1\uff0c\u6bd4\u5982\u4e2d\u6587\u95f2\u804aAPI, \u767e\u79d1\u95ee\u7b54API, \u8bd7\u53e5\u751f\u6210API\u7b49\uff0c\u901a\u8fc7\u8fd9\u4e9bAPI\u6211\u4eec\u53ef\u4ee5\u611f\u53d7\u4e00\u4e0b\u667a\u80fd\u5bf9\u8bdd\u7684\u9b45\u529b\uff0c\u540c\u65f6\u5b83\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4efb\u52a1\u5bfc\u5411\u578b\u5bf9\u8bdd\u7cfb\u7edf\u65e0\u6cd5\u5339\u914d\u7528\u6237\u8f93\u5165\u65f6\u7684\u6700\u7ec8\u9009\u62e9\u3002 2 Unit\u95f2\u804aAPI\u6f14\u793a \u00b6 \u7528\u6237\u8f93\u5165 >>> \"\u4f60\u597d\" Unit\u56de\u590d >>> \"\u4f60\u597d\uff0c\u60f3\u804a\u4ec0\u4e48\u5462~\" \u7528\u6237\u8f93\u5165 >>> \"\u6211\u60f3\u6709\u4e00\u4e2a\u5973\u670b\u53cb!\" Unit\u56de\u590d >>> \"\u6211\u4e5f\u662f\u60f3\u8981\u4e00\u4e2a\u5973\u670b\u53cb~\" \u7528\u6237\u8f93\u5165 >>> \"\u665a\u5403\u5565\u5462\u60f3\u60f3\" Unit\u56de\u590d >>> \"\u60f3\u5403\u706b\u9505\" 3 \u8c03\u7528Unit API\u7684\u5b9e\u73b0\u8fc7\u7a0b \u00b6 \u7b2c\u4e00\u6b65\uff1a\u6ce8\u518c\u767b\u5f55\u767e\u5ea6\u8d26\u6237\uff0c\u8fdb\u5165Unit\u63a7\u5236\u53f0\u521b\u5efa\u81ea\u5df1\u7684\u673a\u5668\u4eba\u3002 \u7b2c\u4e8c\u6b65\uff1a\u8fdb\u884c\u76f8\u5173\u914d\u7f6e\uff0c\u83b7\u5f97\u8bf7\u6c42API\u63a5\u53e3\u9700\u8981\u7684API Key\u4e0eSecret Key\u3002 \u7b2c\u4e09\u6b65\uff1a\u5728\u670d\u52a1\u5668\u4e0a\u7f16\u5199API\u8c03\u7528\u811a\u672c\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002 \u7b2c\u4e00\u6b65\uff1a\u6ce8\u518c\u767b\u5f55\u767e\u5ea6\u8d26\u6237\uff0c\u8fdb\u5165Unit\u63a7\u5236\u53f0\u521b\u5efa\u81ea\u5df1\u7684\u673a\u5668\u4eba\uff0c\u6dfb\u52a0\u95f2\u804a\u529f\u80fd \u521b\u5efa\u673a\u5668\u4eba \u6dfb\u52a0\u95f2\u804a\u529f\u80fd \u7b2c\u4e8c\u6b65\uff1a\u8fdb\u884c\u76f8\u5173\u914d\u7f6e\uff0c\u83b7\u5f97\u8bf7\u6c42API\u63a5\u53e3\u9700\u8981\u7684API Key\u4e0eSecret Key. \u70b9\u51fb\u83b7\u53d6API Key\u8fdb\u5165\u767e\u5ea6\u4e91\u5e94\u7528\u7ba1\u7406\u9875\u9762\u3002 \u70b9\u51fb\u521b\u5efa\u5e94\u7528\uff0c\u8fdb\u5165\u5e94\u7528\u4fe1\u606f\u8868\u5355\u586b\u5199\u9875\u9762\u3002 \u586b\u5199\u5b8c\u6bd5\u540e\uff0c\u70b9\u51fb\u7acb\u5373\u521b\u5efa\uff0c\u6210\u529f\u540e\u4f1a\u63d0\u793a\u521b\u5efa\u5b8c\u6bd5\u3002 \u70b9\u51fb\u8fd4\u56de\u5e94\u7528\u5217\u8868 \u53ef\u4ee5\u770b\u5230\u521b\u5efa\u7684API Key\u548cSecret Key, \u81f3\u6b64\u521b\u5efa\u6d41\u7a0b\u7ed3\u675f\u3002 \u7b2c\u4e09\u6b65\uff1a\u5728\u670d\u52a1\u5668\u4e0a\u7f16\u5199API\u8c03\u7528\u811a\u672c\u5e76\u8fdb\u884c\u6d4b\u8bd5 import json import random import requests # client_id \u4e3a\u5b98\u7f51\u83b7\u53d6\u7684AK\uff0c client_secret \u4e3a\u5b98\u7f51\u83b7\u53d6\u7684SK client_id = \"74b8zns7KLC9T4Fv9UA0Fwra\" client_secret = \"9kEGPhgTdlliXXEbZYkoDUbDjyBiBMIZ\" # service_id\u662f\u673a\u5668\u4ebaid service_id = \"S70282\" def unit_chat ( chat_input , terminal_id = \"88888\" ): \"\"\" description:\u8c03\u7528\u767e\u5ea6UNIT\u63a5\u53e3\uff0c\u56de\u590d\u804a\u5929\u5185\u5bb9 Parameters ---------- chat_input : str \u7528\u6237\u53d1\u9001\u5929\u5185\u5bb9 terminal_id : str \u53d1\u8d77\u804a\u5929\u7528\u6237ID\uff0c\u53ef\u4efb\u610f\u5b9a\u4e49 Return ---------- \u8fd4\u56deunit\u56de\u590d\u5185\u5bb9 \"\"\" # \u8bbe\u7f6e\u9ed8\u8ba4\u56de\u590d\u5185\u5bb9\uff0c \u4e00\u65e6\u63a5\u53e3\u51fa\u73b0\u5f02\u5e38\uff0c\u56de\u590d\u8be5\u5185\u5bb9 chat_reply = \"\u4e0d\u597d\u610f\u601d\uff0c\u4ffa\u4eec\u6b63\u5728\u5b66\u4e60\u4e2d\uff0c\u968f\u540e\u56de\u590d\u4f60\u3002\" # \u6839\u636e client_id \u4e0e client_secret \u83b7\u53d6access_token url = \"https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&client_id= %s &client_secret= %s \" % ( client_id , client_secret ) res = requests . get ( url ) # print(res) access_token = eval ( res . text )[ \"access_token\" ] # print('access_token', access_token) # \u6839\u636e access_token \u83b7\u53d6\u804a\u5929\u673a\u5668\u4eba\u63a5\u53e3\u6570\u636e unit_chatbot_url = \"https://aip.baidubce.com/rpc/2.0/unit/service/v3/chat?access_token=\" + access_token # \u62fc\u88c5\u804a\u5929\u63a5\u53e3\u5bf9\u5e94\u8bf7\u6c42\u53d1\u9001\u6570\u636e\uff0c\u4e3b\u8981\u662f\u586b\u5145 query \u503c post_data = { \"log_id\" : str ( random . random ()), \"request\" : { \"query\" : chat_input , \"terminal_id\" : terminal_id }, \"session_id\" : \"\" , \"service_id\" : service_id , \"version\" : \"3.0\" } # \u5c06\u5c01\u88c5\u597d\u7684\u6570\u636e\u4f5c\u4e3a\u8bf7\u6c42\u5185\u5bb9\uff0c\u53d1\u9001\u7ed9Unit\u804a\u5929\u673a\u5668\u4eba\u63a5\u53e3\uff0c\u5e76\u5f97\u5230\u8fd4\u56de\u7ed3\u679c res = requests . post ( url = unit_chatbot_url , json = post_data ) # \u83b7\u53d6\u804a\u5929\u63a5\u53e3\u8fd4\u56de\u6570\u636e unit_chat_obj = json . loads ( res . content ) # \u6253\u5370\u8fd4\u56de\u7684\u7ed3\u679c # print(unit_chat_obj) # \u5224\u65ad\u804a\u5929\u63a5\u53e3\u8fd4\u56de\u6570\u636e\u662f\u5426\u51fa\u9519 error_code == 0 \u5219\u8868\u793a\u8bf7\u6c42\u6b63\u786e if unit_chat_obj [ \"error_code\" ] != 0 : return chat_reply # \u89e3\u6790\u804a\u5929\u63a5\u53e3\u8fd4\u56de\u6570\u636e\uff0c\u627e\u5230\u8fd4\u56de\u6587\u672c\u5185\u5bb9 result -> responses -> schema -> intent_confidence(>0) -> actions -> say unit_chat_obj_result = unit_chat_obj [ \"result\" ] unit_chat_response_list = unit_chat_obj_result [ \"responses\" ] # \u968f\u673a\u9009\u53d6\u4e00\u4e2a\"\u610f\u56fe\u7f6e\u4fe1\u5ea6\"[+responses[].schema.intent_confidence]\u4e0d\u4e3a0\u7684\u4f5c\u4e3a\u56de\u7b54 unit_chat_response_obj = random . choice ( [ unit_chat_response for unit_chat_response in unit_chat_response_list if unit_chat_response [ \"schema\" ][ \"intents\" ][ 0 ][ \"intent_confidence\" ] > 0.0 ]) # \u83b7\u53d6\u6240\u6709\u7b54\u590d\uff0c\u5e76\u968f\u673a\u9009\u62e9\u4e00\u4e2a unit_chat_response_action_list = unit_chat_response_obj [ \"actions\" ] unit_chat_response_action_obj = random . choice ( unit_chat_response_action_list ) unit_chat_response_say = unit_chat_response_action_obj [ \"say\" ] return unit_chat_response_say if __name__ == '__main__' : while True : chat_input = input ( \"\u8bf7\u8f93\u5165\uff1a\" ) if chat_input == 'Q' or chat_input == 'q' or chat_input == 'bye' : break print ( chat_input ) chat_reply = unit_chat ( chat_input ) print ( \"\u7528\u6237\u8f93\u5165 >>>\" , chat_input ) print ( \"Unit\u56de\u590d >>>\" , chat_reply ) \u6267\u884c python unit.py \u8f93\u51fa\u6548\u679c \u8bf7\u8f93\u5165\uff1a\u4f60\u597d\u554a \u4f60\u597d\u554a \u7528\u6237\u8f93\u5165 >>> \u4f60\u597d\u554a Unit\u56de\u590d >>> \u4f60\u4e5f\u597d\u554a~ \u8bf7\u8f93\u5165\uff1a\u4eca\u5929\u5929\u6c14\u68d2\u68d2\u54d2 \u4eca\u5929\u5929\u6c14\u68d2\u68d2\u54d2 \u7528\u6237\u8f93\u5165 >>> \u4eca\u5929\u5929\u6c14\u68d2\u68d2\u54d2 Unit\u56de\u590d >>> \u5fc5\u987b\u7684 \u8bf7\u8f93\u5165\uff1a\u665a\u996d\u5403\u70b9\u4ec0\u4e48? \u665a\u996d\u5403\u70b9\u4ec0\u4e48? \u7528\u6237\u8f93\u5165 >>> \u665a\u996d\u5403\u70b9\u4ec0\u4e48? Unit\u56de\u590d >>> \u665a\u996d\u6ca1\u5403\uff0c\u51cf\u80a5 \u8bf7\u8f93\u5165\uff1a 2 Flask web\u670d\u52a1\u6846\u67b6 \u00b6 \u7b80\u4ecb\uff1a Flask\u6846\u67b6\u662f\u5f53\u4e0b\u6700\u53d7\u6b22\u8fce\u7684python\u8f7b\u91cf\u7ea7\u6846\u67b6\uff0c\u4e5f\u662fpytorch\u5b98\u7f51\u6307\u5b9a\u7684\u90e8\u7f72\u6846\u67b6\u3002 Flask\u7684\u57fa\u672c\u6a21\u5f0f\u4e3a\u5728\u7a0b\u5e8f\u91cc\u5c06\u4e00\u4e2a\u89c6\u56fe\u51fd\u6570\u5206\u914d\u7ed9\u4e00\u4e2aURL\uff0c\u6bcf\u5f53\u7528\u6237\u8bbf\u95ee\u8fd9\u4e2aURL\u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u6267\u884c\u7ed9\u8be5URL\u5206\u914d\u597d\u7684\u89c6\u56fe\u51fd\u6570\uff0c\u83b7\u53d6\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u5176\u5de5\u4f5c\u8fc7\u7a0b\u89c1\u56fe\u3002 \u4f5c\u7528\uff1a \u5728\u9879\u76ee\u4e2d\uff0cFlask\u6846\u67b6\u662f\u4e3b\u903b\u8f91\u670d\u52a1\u548c\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u4f7f\u7528\u7684\u670d\u52a1\u6846\u67b6\u3002 \u5b89\u88c5\uff1a # \u4f7f\u7528pip\u5b89\u88c5Flask pip install flask \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5\uff1a # \u5bfc\u5165Flask\u7c7b from flask import Flask # \u521b\u5efa\u4e00\u4e2a\u8be5\u7c7b\u7684\u5b9e\u4f8bapp, \u53c2\u6570\u4e3a__name__, \u8fd9\u4e2a\u53c2\u6570\u662f\u5fc5\u9700\u7684\uff0c # \u8fd9\u6837Flask\u624d\u80fd\u77e5\u9053\u5728\u54ea\u91cc\u53ef\u627e\u5230\u6a21\u677f\u548c\u9759\u6001\u6587\u4ef6\u7b49\u4e1c\u897f\u3002 app = Flask ( __name__ ) # \u4f7f\u7528route()\u88c5\u9970\u5668\u6765\u544a\u8bc9Flask\u89e6\u53d1\u51fd\u6570\u7684URL @app . route ( '/' ) def hello_world (): \"\"\"\u8bf7\u6c42\u6307\u5b9a\u7684url\u540e\uff0c\u6267\u884c\u7684\u4e3b\u8981\u903b\u8f91\u51fd\u6570\"\"\" # \u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u4fe1\u606f\uff1a'Hello, World!' return 'Hello, World!' if __name__ == '__main__' : app . run ( host = \"0.0.0.0\" , port = 5000 ) \u542f\u52a8\u670d\u52a1\uff1a python flask_test.py \u542f\u52a8\u6548\u679c\uff1a \u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00\u5730\u5740http://0.0.0.0:5000\u53ef\u770b\u89c1\u6253\u5370\u4e86'Hello, World'. 3 Gunicorn\u670d\u52a1\u7ec4\u4ef6 \u00b6 \u7b80\u4ecb\uff1a Gunicorn\u662f\u4e00\u4e2a\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u9ad8\u6027\u80fd\u7684Python WSGI UNIX HTTP\u670d\u52a1\u7ec4\u4ef6(WSGI: Web Server Gateway Interface)\uff0c\u79fb\u690d\u81eaRuby\u7684\u72ec\u89d2\u517d\uff08Unicorn \uff09\u9879\u76ee\uff0c\u5177\u6709\u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c\u8f7b\u91cf\u7ea7\u7684\u8d44\u6e90\u6d88\u8017\uff0c\u4ee5\u53ca\u9ad8\u6027\u80fd\u7b49\u7279\u70b9\u3002 \u4f5c\u7528\uff1a \u5728\u9879\u76ee\u4e2d\uff0cGunicorn\u548cFlask\u6846\u67b6\u4e00\u540c\u4f7f\u7528\uff0c\u80fd\u591f\u5f00\u542f\u670d\u52a1\uff0c\u5904\u7406\u8bf7\u6c42\uff0c\u56e0\u5176\u9ad8\u6027\u80fd\u7684\u7279\u70b9\u80fd\u591f\u6709\u6548\u51cf\u5c11\u670d\u52a1\u4e22\u5305\u7387\u3002 \u5b89\u88c5\uff1a # \u4f7f\u7528pip\u5b89\u88c5gunicorn pip install gunicorn \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5\uff1a # \u4f7f\u7528\u5176\u542f\u52a8Flask\u670d\u52a1\uff1a gunicorn -w 1 -b 0 .0.0.0:5000 flask_test:app # -w \u4ee3\u8868\u5f00\u542f\u7684\u8fdb\u7a0b\u6570\uff0c\u6211\u4eec\u53ea\u5f00\u542f\u4e00\u4e2a\u8fdb\u7a0b # -b \u670d\u52a1\u7684IP\u5730\u5740\u548c\u7aef\u53e3 # flask_test:app \u662f\u6307\u6267\u884c\u7684\u4e3b\u8981\u5bf9\u8c61\u4f4d\u7f6e\uff0c\u5728flask_test.py\u4e2d\u7684app\u5bf9\u8c61 # \u5982\u679c\u4f7f\u5176\u5728\u540e\u53f0\u8fd0\u884c\u53ef\u4f7f\u7528\uff1a # nohup gunicorn -w 1 -b 0.0.0.0:5000 flask_test:app 2>&1 & 4 Redis\u6570\u636e\u5e93 \u00b6 \u7b80\u4ecb\uff1a Redis\uff08\u5168\u79f0\uff1aRemote Dictionary Server \u8fdc\u7a0b\u5b57\u5178\u670d\u52a1\uff09\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u4f7f\u7528ANSI C\u8bed\u8a00\u7f16\u5199\u3001\u652f\u6301\u7f51\u7edc\u3001\u53ef\u57fa\u4e8e\u5185\u5b58\u4ea6\u53ef\u6301\u4e45\u5316\u7684\u65e5\u5fd7\u578b\u3001Key-Value\u6570\u636e\u5e93\uff0c\u5e76\u63d0\u4f9b\u591a\u79cd\u8bed\u8a00\u7684API. \u4f5c\u7528\uff1a \u5728\u9879\u76ee\u4e2d\uff0cRedis\u7528\u4e8e\u4f1a\u8bdd\u7ba1\u7406\u6570\u636e\u5e93\uff0c\u4fdd\u5b58\u7528\u6237\u804a\u5929\u5386\u53f2\u3002 \u5b89\u88c5\uff1a # \u4f7f\u7528yum\u5b89\u88c5redis yum install epel-release yum install redis -y \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5\uff1a Redis\u652f\u6301\u56db\u79cd\u6570\u636e\u7ed3\u6784\u7684\u5b58\u50a8\uff1aString(\u5b57\u7b26\u4e32), Hash(\u6563\u5217), List(\u5217\u8868), Set(\u96c6\u5408), Sorted Set(\u6709\u5e8f\u96c6\u5408). \u5728\u8fd9\u91cc\u6211\u4eec\u5c06\u7740\u91cd\u4ecb\u7ecd\u5982\u4f55\u5728python\u4e2d\u4f7f\u7528Hash(\u6563\u5217)\u8fdb\u884c\u8bfb\u5199\u3002 \u5b89\u88c5python\u4e2d\u7684redis\u9a71\u52a8\uff1a # \u4f7f\u7528pip\u8fdb\u884c\u5b89\u88c5 pip install redis \u542f\u52a8redis\u670d\u52a1\uff1a # \u542f\u52a8redis-server, \u8fd9\u91cc\u4f7f\u7528\u4e86\u9ed8\u8ba4\u914d\u7f6e\uff0c\u7aef\u53e3\u662f6379. redis-server \u5728python\u4e2d\u4f7f\u7528Hash(\u6563\u5217)\u8fdb\u884c\u8bfb\u5199\uff1a # coding=utf-8 # redis\u914d\u7f6e REDIS_CONFIG = { \"host\" : \"0.0.0.0\" , \"port\" : 6379 } # \u5bfc\u5165redis\u9a71\u52a8 import redis # \u521b\u5efa\u4e00\u4e2aredis\u8fde\u63a5\u6c60 pool = redis . ConnectionPool ( ** REDIS_CONFIG ) # \u4ece\u8fde\u63a5\u6c60\u4e2d\u521d\u59cb\u5316\u4e00\u4e2a\u6d3b\u8dc3\u7684\u8fde\u63a5\u5bf9\u8c61 r = redis . StrictRedis ( connection_pool = pool ) # hset\u8868\u793a\u4f7f\u7528hash\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u6570\u636e\u5199\u5165 # uid\u4ee3\u8868\u67d0\u4e2a\u7528\u6237\u7684\u552f\u4e00\u6807\u8bc6 uid = \"8888\" # key\u662f\u9700\u8981\u8bb0\u5f55\u7684\u6570\u636e\u63cf\u8ff0 key = \"\u8be5\u7528\u6237\u6700\u540e\u4e00\u6b21\u8bf4\u7684\u8bdd\uff1a\" . encode ( 'utf-8' ) # value\u662f\u9700\u8981\u8bb0\u5f55\u7684\u6570\u636e\u5177\u4f53\u5185\u5bb9 value = \"\u518d\u89c1\uff0c\u8463\u5c0f\u59d0\" . encode ( 'utf-8' ) r . hset ( uid , key , value ) # hget\u8868\u793a\u4f7f\u7528hash\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u6570\u636e\u8bfb\u53d6 result = r . hget ( uid , key ) print ( result . decode ( 'utf-8' )) \u8f93\u51fa\u6548\u679c\uff1a \u518d\u89c1\uff0c\u8463\u5c0f\u59d0 5 Supervisor\u670d\u52a1\u76d1\u63a7 \u00b6 \u7b80\u4ecb\uff1a Supervisor\u662f\u7528Python\u5f00\u53d1\u7684\u4e00\u4e2aclient/server\u670d\u52a1\uff0c\u662fLinux/Unix\u7cfb\u7edf\u4e0b\u7684\u4e00\u4e2a\u8fdb\u7a0b\u7ba1\u7406\u5de5\u5177\u3002\u5b83\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u76d1\u542c\u3001\u542f\u52a8\u3001\u505c\u6b62\u3001\u91cd\u542f\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u5b88\u62a4\u8fd9\u4e9b\u8fdb\u7a0b\u3002 \u4f5c\u7528\uff1a \u5728\u9879\u76ee\u4e2d\uff0cSupervisor\u7528\u4e8e\u76d1\u63a7\u548c\u5b88\u62a4\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u548credis\u6570\u636e\u5e93\u670d\u52a1\u3002 \u5b89\u88c5\uff1a # \u4f7f\u7528yum\u5b89\u88c5supervisor yum install supervisor -y systemctl enable supervisord # \u5f00\u673a\u542f\u52a8 systemctl start supervisord # \u542f\u52a8\u670d\u52a1 \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5\uff1a # \u7f16\u8f91\u914d\u7f6e\u6587\u4ef6\uff0c\u6307\u660e\u76d1\u63a7\u548c\u5b88\u62a4\u7684\u8fdb\u7a0b\u5f00\u542f\u547d\u4ee4\uff0c # \u8bf7\u67e5\u770b/etc/supervisord.conf\u6587\u4ef6 # \u67e5\u770b\u76d1\u63a7\u7684\u8fdb\u7a0b\u72b6\u6001\uff1a supervisorctl status # main_server RUNNING pid 31609, uptime 0:32:20 # redis RUNNING pid 31613, uptime 0:32:18 # \u5173\u95edsupervisor supervisorctl shutdown \u8fd8\u53ef\u4ee5\u901a\u8fc7\u6d4f\u89c8\u5668\u67e5\u770b\u53ef\u89c6\u5316\u76d1\u63a7\u9875\u9762\uff1a http://0.0.0.0:9001 6 Neo4j\u56fe\u6570\u636e\u5e93 \u00b6 \u56e0\u4e3a\u5728\u9879\u76ee\u4e2d\uff0cNeo4j\u56fe\u6570\u636e\u5e93\u4f5c\u4e3a\u6838\u5fc3\u7684\u5b58\u50a8\u548c\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u56e0\u6b64\u4f1a\u5728 \u7b2c\u4e09\u7ae0\uff1aNeo4j\u56fe\u6570\u636e\u5e93 \u4e2d\u5bf9\u5176\u8fdb\u884c\u8be6\u7ec6\u7684\u4ecb\u7ecd\u3002 7 \u5c0f\u7ed3 \u00b6 \u5b66\u4e60\u4e86\u603b\u4f53\u67b6\u6784\u4e2d\u4f7f\u7528\u7684\u5de5\u5177\uff1a Unit\u5bf9\u8bddAPI\u4f7f\u7528 \u5b66\u4e60\u4e86Unit\u5e73\u53f0\u7684\u76f8\u5173\u77e5\u8bc6\uff0cUnit\u5e73\u53f0\u662f\u767e\u5ea6\u5927\u8111\u5f00\u653e\u7684\u667a\u80fd\u5bf9\u8bdd\u5b9a\u5236\u4e0e\u670d\u52a1\u5e73\u53f0\uff0c\u4e5f\u662f\u5f53\u524d\u6700\u5927\u7684\u4e2d\u6587\u9886\u57df\u5bf9\u8bdd\u5f00\u653e\u5e73\u53f0\u4e4b\u4e00\u3002 \u5b66\u4e60\u4e86\u8c03\u7528Unit API\u7684\u5b9e\u73b0\u8fc7\u7a0b\uff1a \u7b2c\u4e00\u6b65\uff1a\u6ce8\u518c\u767b\u5f55\u767e\u5ea6\u8d26\u6237\uff0c\u8fdb\u5165Unit\u63a7\u5236\u53f0\u521b\u5efa\u81ea\u5df1\u7684\u673a\u5668\u4eba\u3002 \u7b2c\u4e8c\u6b65\uff1a\u8fdb\u884c\u76f8\u5173\u914d\u7f6e\uff0c\u83b7\u5f97\u8bf7\u6c42API\u63a5\u53e3\u9700\u8981\u7684API Key\u4e0eSecret Key. \u7b2c\u4e09\u6b65\uff1a\u5728\u670d\u52a1\u5668\u4e0a\u7f16\u5199API\u8c03\u7528\u811a\u672c\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002 Flask web\u670d\u52a1\u6846\u67b6 \u4f5c\u7528\uff1a\u5728\u9879\u76ee\u4e2d\uff0cFlask\u6846\u67b6\u662f\u4e3b\u903b\u8f91\u670d\u52a1\u548c\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u4f7f\u7528\u7684\u670d\u52a1\u6846\u67b6\u3002 Redis\u6570\u636e\u5e93 \u4f5c\u7528\uff1a\u5728\u9879\u76ee\u4e2d\uff0cRedis\u7528\u4e8e\u4f1a\u8bdd\u7ba1\u7406\u6570\u636e\u5e93\uff0c\u4fdd\u5b58\u7528\u6237\u804a\u5929\u5386\u53f2\u3002 Gunicorn\u670d\u52a1\u7ec4\u4ef6 \u4f5c\u7528\uff1a\u5728\u9879\u76ee\u4e2d\uff0cGunicorn\u548cFlask\u6846\u67b6\u4e00\u540c\u4f7f\u7528\uff0c\u80fd\u591f\u5f00\u542f\u670d\u52a1\uff0c\u5904\u7406\u8bf7\u6c42\uff0c\u56e0\u5176\u9ad8\u6027\u80fd\u7684\u7279\u70b9\u80fd\u591f\u6709\u6548\u51cf\u5c11\u670d\u52a1\u4e22\u5305\u7387\u3002 Supervisor\u670d\u52a1\u76d1\u63a7\u5668 \u4f5c\u7528\uff1a\u5728\u9879\u76ee\u4e2d\uff0cSupervisor\u7528\u4e8e\u76d1\u63a7\u548c\u5b88\u62a4\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u548credis\u6570\u636e\u5e93\u670d\u52a1\u3002 Neo4j\u56fe\u6570\u636e\u5e93","title":"\u7b2c\u4e8c\u7ae0:\u9879\u76ee\u5de5\u5177\u4ecb\u7ecd"},{"location":"2.html#2","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u603b\u4f53\u67b6\u6784\u4e2d\u4f7f\u7528\u4e86\u54ea\u4e9b\u5de5\u5177\u3002 \u638c\u63e1\u603b\u4f53\u67b6\u6784\u4e2d\u5404\u4e2a\u5de5\u5177\u7684\u7b80\u4ecb\uff0c\u4f5c\u7528\uff0c\u5b89\u88c5\u548c\u57fa\u672c\u4f7f\u7528\u65b9\u6cd5\u3002 \u603b\u4f53\u67b6\u6784\u4e2d\u4f7f\u7528\u7684\u5de5\u5177\uff1a Unit\u5bf9\u8bddAPI\u4f7f\u7528 Flask web\u670d\u52a1\u6846\u67b6 Redis\u6570\u636e\u5e93 Gunicorn\u670d\u52a1\u7ec4\u4ef6 Supervisor\u670d\u52a1\u76d1\u63a7\u5668 Neo4j\u56fe\u6570\u636e\u5e93","title":"2 \u603b\u4f53\u67b6\u6784\u4e2d\u7684\u5de5\u5177\u4ecb\u7ecd"},{"location":"2.html#1-unitapi","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3Unit\u5e73\u53f0\u7684\u76f8\u5173\u77e5\u8bc6\u3002 \u638c\u63e1\u8c03\u7528Unit API\u7684\u5b9e\u73b0\u8fc7\u7a0b\u3002","title":"1 Unit\u5bf9\u8bddAPI\u4f7f\u7528"},{"location":"2.html#1-unit","text":"Unit\u5e73\u53f0\u662f\u767e\u5ea6\u5927\u8111\u5f00\u653e\u7684\u667a\u80fd\u5bf9\u8bdd\u5b9a\u5236\u4e0e\u670d\u52a1\u5e73\u53f0\uff0c\u4e5f\u662f\u5f53\u524d\u6700\u5927\u7684\u4e2d\u6587\u9886\u57df\u5bf9\u8bdd\u5f00\u653e\u5e73\u53f0\u4e4b\u4e00\u3002 Unit\u5bf9\u6ce8\u518c\u7528\u6237\u63d0\u4f9b\u514d\u8d39\u7684\u5bf9\u8bdd\u63a5\u53e3\u670d\u52a1\uff0c\u6bd4\u5982\u4e2d\u6587\u95f2\u804aAPI, \u767e\u79d1\u95ee\u7b54API, \u8bd7\u53e5\u751f\u6210API\u7b49\uff0c\u901a\u8fc7\u8fd9\u4e9bAPI\u6211\u4eec\u53ef\u4ee5\u611f\u53d7\u4e00\u4e0b\u667a\u80fd\u5bf9\u8bdd\u7684\u9b45\u529b\uff0c\u540c\u65f6\u5b83\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4efb\u52a1\u5bfc\u5411\u578b\u5bf9\u8bdd\u7cfb\u7edf\u65e0\u6cd5\u5339\u914d\u7528\u6237\u8f93\u5165\u65f6\u7684\u6700\u7ec8\u9009\u62e9\u3002","title":"1 Unit\u5e73\u53f0\u7684\u76f8\u5173\u77e5\u8bc6"},{"location":"2.html#2-unitapi","text":"\u7528\u6237\u8f93\u5165 >>> \"\u4f60\u597d\" Unit\u56de\u590d >>> \"\u4f60\u597d\uff0c\u60f3\u804a\u4ec0\u4e48\u5462~\" \u7528\u6237\u8f93\u5165 >>> \"\u6211\u60f3\u6709\u4e00\u4e2a\u5973\u670b\u53cb!\" Unit\u56de\u590d >>> \"\u6211\u4e5f\u662f\u60f3\u8981\u4e00\u4e2a\u5973\u670b\u53cb~\" \u7528\u6237\u8f93\u5165 >>> \"\u665a\u5403\u5565\u5462\u60f3\u60f3\" Unit\u56de\u590d >>> \"\u60f3\u5403\u706b\u9505\"","title":"2 Unit\u95f2\u804aAPI\u6f14\u793a"},{"location":"2.html#3-unit-api","text":"\u7b2c\u4e00\u6b65\uff1a\u6ce8\u518c\u767b\u5f55\u767e\u5ea6\u8d26\u6237\uff0c\u8fdb\u5165Unit\u63a7\u5236\u53f0\u521b\u5efa\u81ea\u5df1\u7684\u673a\u5668\u4eba\u3002 \u7b2c\u4e8c\u6b65\uff1a\u8fdb\u884c\u76f8\u5173\u914d\u7f6e\uff0c\u83b7\u5f97\u8bf7\u6c42API\u63a5\u53e3\u9700\u8981\u7684API Key\u4e0eSecret Key\u3002 \u7b2c\u4e09\u6b65\uff1a\u5728\u670d\u52a1\u5668\u4e0a\u7f16\u5199API\u8c03\u7528\u811a\u672c\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002 \u7b2c\u4e00\u6b65\uff1a\u6ce8\u518c\u767b\u5f55\u767e\u5ea6\u8d26\u6237\uff0c\u8fdb\u5165Unit\u63a7\u5236\u53f0\u521b\u5efa\u81ea\u5df1\u7684\u673a\u5668\u4eba\uff0c\u6dfb\u52a0\u95f2\u804a\u529f\u80fd \u521b\u5efa\u673a\u5668\u4eba \u6dfb\u52a0\u95f2\u804a\u529f\u80fd \u7b2c\u4e8c\u6b65\uff1a\u8fdb\u884c\u76f8\u5173\u914d\u7f6e\uff0c\u83b7\u5f97\u8bf7\u6c42API\u63a5\u53e3\u9700\u8981\u7684API Key\u4e0eSecret Key. \u70b9\u51fb\u83b7\u53d6API Key\u8fdb\u5165\u767e\u5ea6\u4e91\u5e94\u7528\u7ba1\u7406\u9875\u9762\u3002 \u70b9\u51fb\u521b\u5efa\u5e94\u7528\uff0c\u8fdb\u5165\u5e94\u7528\u4fe1\u606f\u8868\u5355\u586b\u5199\u9875\u9762\u3002 \u586b\u5199\u5b8c\u6bd5\u540e\uff0c\u70b9\u51fb\u7acb\u5373\u521b\u5efa\uff0c\u6210\u529f\u540e\u4f1a\u63d0\u793a\u521b\u5efa\u5b8c\u6bd5\u3002 \u70b9\u51fb\u8fd4\u56de\u5e94\u7528\u5217\u8868 \u53ef\u4ee5\u770b\u5230\u521b\u5efa\u7684API Key\u548cSecret Key, \u81f3\u6b64\u521b\u5efa\u6d41\u7a0b\u7ed3\u675f\u3002 \u7b2c\u4e09\u6b65\uff1a\u5728\u670d\u52a1\u5668\u4e0a\u7f16\u5199API\u8c03\u7528\u811a\u672c\u5e76\u8fdb\u884c\u6d4b\u8bd5 import json import random import requests # client_id \u4e3a\u5b98\u7f51\u83b7\u53d6\u7684AK\uff0c client_secret \u4e3a\u5b98\u7f51\u83b7\u53d6\u7684SK client_id = \"74b8zns7KLC9T4Fv9UA0Fwra\" client_secret = \"9kEGPhgTdlliXXEbZYkoDUbDjyBiBMIZ\" # service_id\u662f\u673a\u5668\u4ebaid service_id = \"S70282\" def unit_chat ( chat_input , terminal_id = \"88888\" ): \"\"\" description:\u8c03\u7528\u767e\u5ea6UNIT\u63a5\u53e3\uff0c\u56de\u590d\u804a\u5929\u5185\u5bb9 Parameters ---------- chat_input : str \u7528\u6237\u53d1\u9001\u5929\u5185\u5bb9 terminal_id : str \u53d1\u8d77\u804a\u5929\u7528\u6237ID\uff0c\u53ef\u4efb\u610f\u5b9a\u4e49 Return ---------- \u8fd4\u56deunit\u56de\u590d\u5185\u5bb9 \"\"\" # \u8bbe\u7f6e\u9ed8\u8ba4\u56de\u590d\u5185\u5bb9\uff0c \u4e00\u65e6\u63a5\u53e3\u51fa\u73b0\u5f02\u5e38\uff0c\u56de\u590d\u8be5\u5185\u5bb9 chat_reply = \"\u4e0d\u597d\u610f\u601d\uff0c\u4ffa\u4eec\u6b63\u5728\u5b66\u4e60\u4e2d\uff0c\u968f\u540e\u56de\u590d\u4f60\u3002\" # \u6839\u636e client_id \u4e0e client_secret \u83b7\u53d6access_token url = \"https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&client_id= %s &client_secret= %s \" % ( client_id , client_secret ) res = requests . get ( url ) # print(res) access_token = eval ( res . text )[ \"access_token\" ] # print('access_token', access_token) # \u6839\u636e access_token \u83b7\u53d6\u804a\u5929\u673a\u5668\u4eba\u63a5\u53e3\u6570\u636e unit_chatbot_url = \"https://aip.baidubce.com/rpc/2.0/unit/service/v3/chat?access_token=\" + access_token # \u62fc\u88c5\u804a\u5929\u63a5\u53e3\u5bf9\u5e94\u8bf7\u6c42\u53d1\u9001\u6570\u636e\uff0c\u4e3b\u8981\u662f\u586b\u5145 query \u503c post_data = { \"log_id\" : str ( random . random ()), \"request\" : { \"query\" : chat_input , \"terminal_id\" : terminal_id }, \"session_id\" : \"\" , \"service_id\" : service_id , \"version\" : \"3.0\" } # \u5c06\u5c01\u88c5\u597d\u7684\u6570\u636e\u4f5c\u4e3a\u8bf7\u6c42\u5185\u5bb9\uff0c\u53d1\u9001\u7ed9Unit\u804a\u5929\u673a\u5668\u4eba\u63a5\u53e3\uff0c\u5e76\u5f97\u5230\u8fd4\u56de\u7ed3\u679c res = requests . post ( url = unit_chatbot_url , json = post_data ) # \u83b7\u53d6\u804a\u5929\u63a5\u53e3\u8fd4\u56de\u6570\u636e unit_chat_obj = json . loads ( res . content ) # \u6253\u5370\u8fd4\u56de\u7684\u7ed3\u679c # print(unit_chat_obj) # \u5224\u65ad\u804a\u5929\u63a5\u53e3\u8fd4\u56de\u6570\u636e\u662f\u5426\u51fa\u9519 error_code == 0 \u5219\u8868\u793a\u8bf7\u6c42\u6b63\u786e if unit_chat_obj [ \"error_code\" ] != 0 : return chat_reply # \u89e3\u6790\u804a\u5929\u63a5\u53e3\u8fd4\u56de\u6570\u636e\uff0c\u627e\u5230\u8fd4\u56de\u6587\u672c\u5185\u5bb9 result -> responses -> schema -> intent_confidence(>0) -> actions -> say unit_chat_obj_result = unit_chat_obj [ \"result\" ] unit_chat_response_list = unit_chat_obj_result [ \"responses\" ] # \u968f\u673a\u9009\u53d6\u4e00\u4e2a\"\u610f\u56fe\u7f6e\u4fe1\u5ea6\"[+responses[].schema.intent_confidence]\u4e0d\u4e3a0\u7684\u4f5c\u4e3a\u56de\u7b54 unit_chat_response_obj = random . choice ( [ unit_chat_response for unit_chat_response in unit_chat_response_list if unit_chat_response [ \"schema\" ][ \"intents\" ][ 0 ][ \"intent_confidence\" ] > 0.0 ]) # \u83b7\u53d6\u6240\u6709\u7b54\u590d\uff0c\u5e76\u968f\u673a\u9009\u62e9\u4e00\u4e2a unit_chat_response_action_list = unit_chat_response_obj [ \"actions\" ] unit_chat_response_action_obj = random . choice ( unit_chat_response_action_list ) unit_chat_response_say = unit_chat_response_action_obj [ \"say\" ] return unit_chat_response_say if __name__ == '__main__' : while True : chat_input = input ( \"\u8bf7\u8f93\u5165\uff1a\" ) if chat_input == 'Q' or chat_input == 'q' or chat_input == 'bye' : break print ( chat_input ) chat_reply = unit_chat ( chat_input ) print ( \"\u7528\u6237\u8f93\u5165 >>>\" , chat_input ) print ( \"Unit\u56de\u590d >>>\" , chat_reply ) \u6267\u884c python unit.py \u8f93\u51fa\u6548\u679c \u8bf7\u8f93\u5165\uff1a\u4f60\u597d\u554a \u4f60\u597d\u554a \u7528\u6237\u8f93\u5165 >>> \u4f60\u597d\u554a Unit\u56de\u590d >>> \u4f60\u4e5f\u597d\u554a~ \u8bf7\u8f93\u5165\uff1a\u4eca\u5929\u5929\u6c14\u68d2\u68d2\u54d2 \u4eca\u5929\u5929\u6c14\u68d2\u68d2\u54d2 \u7528\u6237\u8f93\u5165 >>> \u4eca\u5929\u5929\u6c14\u68d2\u68d2\u54d2 Unit\u56de\u590d >>> \u5fc5\u987b\u7684 \u8bf7\u8f93\u5165\uff1a\u665a\u996d\u5403\u70b9\u4ec0\u4e48? \u665a\u996d\u5403\u70b9\u4ec0\u4e48? \u7528\u6237\u8f93\u5165 >>> \u665a\u996d\u5403\u70b9\u4ec0\u4e48? Unit\u56de\u590d >>> \u665a\u996d\u6ca1\u5403\uff0c\u51cf\u80a5 \u8bf7\u8f93\u5165\uff1a","title":"3 \u8c03\u7528Unit API\u7684\u5b9e\u73b0\u8fc7\u7a0b"},{"location":"2.html#2-flask-web","text":"\u7b80\u4ecb\uff1a Flask\u6846\u67b6\u662f\u5f53\u4e0b\u6700\u53d7\u6b22\u8fce\u7684python\u8f7b\u91cf\u7ea7\u6846\u67b6\uff0c\u4e5f\u662fpytorch\u5b98\u7f51\u6307\u5b9a\u7684\u90e8\u7f72\u6846\u67b6\u3002 Flask\u7684\u57fa\u672c\u6a21\u5f0f\u4e3a\u5728\u7a0b\u5e8f\u91cc\u5c06\u4e00\u4e2a\u89c6\u56fe\u51fd\u6570\u5206\u914d\u7ed9\u4e00\u4e2aURL\uff0c\u6bcf\u5f53\u7528\u6237\u8bbf\u95ee\u8fd9\u4e2aURL\u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u6267\u884c\u7ed9\u8be5URL\u5206\u914d\u597d\u7684\u89c6\u56fe\u51fd\u6570\uff0c\u83b7\u53d6\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u5176\u5de5\u4f5c\u8fc7\u7a0b\u89c1\u56fe\u3002 \u4f5c\u7528\uff1a \u5728\u9879\u76ee\u4e2d\uff0cFlask\u6846\u67b6\u662f\u4e3b\u903b\u8f91\u670d\u52a1\u548c\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u4f7f\u7528\u7684\u670d\u52a1\u6846\u67b6\u3002 \u5b89\u88c5\uff1a # \u4f7f\u7528pip\u5b89\u88c5Flask pip install flask \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5\uff1a # \u5bfc\u5165Flask\u7c7b from flask import Flask # \u521b\u5efa\u4e00\u4e2a\u8be5\u7c7b\u7684\u5b9e\u4f8bapp, \u53c2\u6570\u4e3a__name__, \u8fd9\u4e2a\u53c2\u6570\u662f\u5fc5\u9700\u7684\uff0c # \u8fd9\u6837Flask\u624d\u80fd\u77e5\u9053\u5728\u54ea\u91cc\u53ef\u627e\u5230\u6a21\u677f\u548c\u9759\u6001\u6587\u4ef6\u7b49\u4e1c\u897f\u3002 app = Flask ( __name__ ) # \u4f7f\u7528route()\u88c5\u9970\u5668\u6765\u544a\u8bc9Flask\u89e6\u53d1\u51fd\u6570\u7684URL @app . route ( '/' ) def hello_world (): \"\"\"\u8bf7\u6c42\u6307\u5b9a\u7684url\u540e\uff0c\u6267\u884c\u7684\u4e3b\u8981\u903b\u8f91\u51fd\u6570\"\"\" # \u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u4fe1\u606f\uff1a'Hello, World!' return 'Hello, World!' if __name__ == '__main__' : app . run ( host = \"0.0.0.0\" , port = 5000 ) \u542f\u52a8\u670d\u52a1\uff1a python flask_test.py \u542f\u52a8\u6548\u679c\uff1a \u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00\u5730\u5740http://0.0.0.0:5000\u53ef\u770b\u89c1\u6253\u5370\u4e86'Hello, World'.","title":"2 Flask web\u670d\u52a1\u6846\u67b6"},{"location":"2.html#3-gunicorn","text":"\u7b80\u4ecb\uff1a Gunicorn\u662f\u4e00\u4e2a\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u9ad8\u6027\u80fd\u7684Python WSGI UNIX HTTP\u670d\u52a1\u7ec4\u4ef6(WSGI: Web Server Gateway Interface)\uff0c\u79fb\u690d\u81eaRuby\u7684\u72ec\u89d2\u517d\uff08Unicorn \uff09\u9879\u76ee\uff0c\u5177\u6709\u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c\u8f7b\u91cf\u7ea7\u7684\u8d44\u6e90\u6d88\u8017\uff0c\u4ee5\u53ca\u9ad8\u6027\u80fd\u7b49\u7279\u70b9\u3002 \u4f5c\u7528\uff1a \u5728\u9879\u76ee\u4e2d\uff0cGunicorn\u548cFlask\u6846\u67b6\u4e00\u540c\u4f7f\u7528\uff0c\u80fd\u591f\u5f00\u542f\u670d\u52a1\uff0c\u5904\u7406\u8bf7\u6c42\uff0c\u56e0\u5176\u9ad8\u6027\u80fd\u7684\u7279\u70b9\u80fd\u591f\u6709\u6548\u51cf\u5c11\u670d\u52a1\u4e22\u5305\u7387\u3002 \u5b89\u88c5\uff1a # \u4f7f\u7528pip\u5b89\u88c5gunicorn pip install gunicorn \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5\uff1a # \u4f7f\u7528\u5176\u542f\u52a8Flask\u670d\u52a1\uff1a gunicorn -w 1 -b 0 .0.0.0:5000 flask_test:app # -w \u4ee3\u8868\u5f00\u542f\u7684\u8fdb\u7a0b\u6570\uff0c\u6211\u4eec\u53ea\u5f00\u542f\u4e00\u4e2a\u8fdb\u7a0b # -b \u670d\u52a1\u7684IP\u5730\u5740\u548c\u7aef\u53e3 # flask_test:app \u662f\u6307\u6267\u884c\u7684\u4e3b\u8981\u5bf9\u8c61\u4f4d\u7f6e\uff0c\u5728flask_test.py\u4e2d\u7684app\u5bf9\u8c61 # \u5982\u679c\u4f7f\u5176\u5728\u540e\u53f0\u8fd0\u884c\u53ef\u4f7f\u7528\uff1a # nohup gunicorn -w 1 -b 0.0.0.0:5000 flask_test:app 2>&1 &","title":"3 Gunicorn\u670d\u52a1\u7ec4\u4ef6"},{"location":"2.html#4-redis","text":"\u7b80\u4ecb\uff1a Redis\uff08\u5168\u79f0\uff1aRemote Dictionary Server \u8fdc\u7a0b\u5b57\u5178\u670d\u52a1\uff09\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u4f7f\u7528ANSI C\u8bed\u8a00\u7f16\u5199\u3001\u652f\u6301\u7f51\u7edc\u3001\u53ef\u57fa\u4e8e\u5185\u5b58\u4ea6\u53ef\u6301\u4e45\u5316\u7684\u65e5\u5fd7\u578b\u3001Key-Value\u6570\u636e\u5e93\uff0c\u5e76\u63d0\u4f9b\u591a\u79cd\u8bed\u8a00\u7684API. \u4f5c\u7528\uff1a \u5728\u9879\u76ee\u4e2d\uff0cRedis\u7528\u4e8e\u4f1a\u8bdd\u7ba1\u7406\u6570\u636e\u5e93\uff0c\u4fdd\u5b58\u7528\u6237\u804a\u5929\u5386\u53f2\u3002 \u5b89\u88c5\uff1a # \u4f7f\u7528yum\u5b89\u88c5redis yum install epel-release yum install redis -y \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5\uff1a Redis\u652f\u6301\u56db\u79cd\u6570\u636e\u7ed3\u6784\u7684\u5b58\u50a8\uff1aString(\u5b57\u7b26\u4e32), Hash(\u6563\u5217), List(\u5217\u8868), Set(\u96c6\u5408), Sorted Set(\u6709\u5e8f\u96c6\u5408). \u5728\u8fd9\u91cc\u6211\u4eec\u5c06\u7740\u91cd\u4ecb\u7ecd\u5982\u4f55\u5728python\u4e2d\u4f7f\u7528Hash(\u6563\u5217)\u8fdb\u884c\u8bfb\u5199\u3002 \u5b89\u88c5python\u4e2d\u7684redis\u9a71\u52a8\uff1a # \u4f7f\u7528pip\u8fdb\u884c\u5b89\u88c5 pip install redis \u542f\u52a8redis\u670d\u52a1\uff1a # \u542f\u52a8redis-server, \u8fd9\u91cc\u4f7f\u7528\u4e86\u9ed8\u8ba4\u914d\u7f6e\uff0c\u7aef\u53e3\u662f6379. redis-server \u5728python\u4e2d\u4f7f\u7528Hash(\u6563\u5217)\u8fdb\u884c\u8bfb\u5199\uff1a # coding=utf-8 # redis\u914d\u7f6e REDIS_CONFIG = { \"host\" : \"0.0.0.0\" , \"port\" : 6379 } # \u5bfc\u5165redis\u9a71\u52a8 import redis # \u521b\u5efa\u4e00\u4e2aredis\u8fde\u63a5\u6c60 pool = redis . ConnectionPool ( ** REDIS_CONFIG ) # \u4ece\u8fde\u63a5\u6c60\u4e2d\u521d\u59cb\u5316\u4e00\u4e2a\u6d3b\u8dc3\u7684\u8fde\u63a5\u5bf9\u8c61 r = redis . StrictRedis ( connection_pool = pool ) # hset\u8868\u793a\u4f7f\u7528hash\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u6570\u636e\u5199\u5165 # uid\u4ee3\u8868\u67d0\u4e2a\u7528\u6237\u7684\u552f\u4e00\u6807\u8bc6 uid = \"8888\" # key\u662f\u9700\u8981\u8bb0\u5f55\u7684\u6570\u636e\u63cf\u8ff0 key = \"\u8be5\u7528\u6237\u6700\u540e\u4e00\u6b21\u8bf4\u7684\u8bdd\uff1a\" . encode ( 'utf-8' ) # value\u662f\u9700\u8981\u8bb0\u5f55\u7684\u6570\u636e\u5177\u4f53\u5185\u5bb9 value = \"\u518d\u89c1\uff0c\u8463\u5c0f\u59d0\" . encode ( 'utf-8' ) r . hset ( uid , key , value ) # hget\u8868\u793a\u4f7f\u7528hash\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u6570\u636e\u8bfb\u53d6 result = r . hget ( uid , key ) print ( result . decode ( 'utf-8' )) \u8f93\u51fa\u6548\u679c\uff1a \u518d\u89c1\uff0c\u8463\u5c0f\u59d0","title":"4 Redis\u6570\u636e\u5e93"},{"location":"2.html#5-supervisor","text":"\u7b80\u4ecb\uff1a Supervisor\u662f\u7528Python\u5f00\u53d1\u7684\u4e00\u4e2aclient/server\u670d\u52a1\uff0c\u662fLinux/Unix\u7cfb\u7edf\u4e0b\u7684\u4e00\u4e2a\u8fdb\u7a0b\u7ba1\u7406\u5de5\u5177\u3002\u5b83\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u76d1\u542c\u3001\u542f\u52a8\u3001\u505c\u6b62\u3001\u91cd\u542f\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u5b88\u62a4\u8fd9\u4e9b\u8fdb\u7a0b\u3002 \u4f5c\u7528\uff1a \u5728\u9879\u76ee\u4e2d\uff0cSupervisor\u7528\u4e8e\u76d1\u63a7\u548c\u5b88\u62a4\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u548credis\u6570\u636e\u5e93\u670d\u52a1\u3002 \u5b89\u88c5\uff1a # \u4f7f\u7528yum\u5b89\u88c5supervisor yum install supervisor -y systemctl enable supervisord # \u5f00\u673a\u542f\u52a8 systemctl start supervisord # \u542f\u52a8\u670d\u52a1 \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5\uff1a # \u7f16\u8f91\u914d\u7f6e\u6587\u4ef6\uff0c\u6307\u660e\u76d1\u63a7\u548c\u5b88\u62a4\u7684\u8fdb\u7a0b\u5f00\u542f\u547d\u4ee4\uff0c # \u8bf7\u67e5\u770b/etc/supervisord.conf\u6587\u4ef6 # \u67e5\u770b\u76d1\u63a7\u7684\u8fdb\u7a0b\u72b6\u6001\uff1a supervisorctl status # main_server RUNNING pid 31609, uptime 0:32:20 # redis RUNNING pid 31613, uptime 0:32:18 # \u5173\u95edsupervisor supervisorctl shutdown \u8fd8\u53ef\u4ee5\u901a\u8fc7\u6d4f\u89c8\u5668\u67e5\u770b\u53ef\u89c6\u5316\u76d1\u63a7\u9875\u9762\uff1a http://0.0.0.0:9001","title":"5 Supervisor\u670d\u52a1\u76d1\u63a7"},{"location":"2.html#6-neo4j","text":"\u56e0\u4e3a\u5728\u9879\u76ee\u4e2d\uff0cNeo4j\u56fe\u6570\u636e\u5e93\u4f5c\u4e3a\u6838\u5fc3\u7684\u5b58\u50a8\u548c\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u56e0\u6b64\u4f1a\u5728 \u7b2c\u4e09\u7ae0\uff1aNeo4j\u56fe\u6570\u636e\u5e93 \u4e2d\u5bf9\u5176\u8fdb\u884c\u8be6\u7ec6\u7684\u4ecb\u7ecd\u3002","title":"6 Neo4j\u56fe\u6570\u636e\u5e93"},{"location":"2.html#7","text":"\u5b66\u4e60\u4e86\u603b\u4f53\u67b6\u6784\u4e2d\u4f7f\u7528\u7684\u5de5\u5177\uff1a Unit\u5bf9\u8bddAPI\u4f7f\u7528 \u5b66\u4e60\u4e86Unit\u5e73\u53f0\u7684\u76f8\u5173\u77e5\u8bc6\uff0cUnit\u5e73\u53f0\u662f\u767e\u5ea6\u5927\u8111\u5f00\u653e\u7684\u667a\u80fd\u5bf9\u8bdd\u5b9a\u5236\u4e0e\u670d\u52a1\u5e73\u53f0\uff0c\u4e5f\u662f\u5f53\u524d\u6700\u5927\u7684\u4e2d\u6587\u9886\u57df\u5bf9\u8bdd\u5f00\u653e\u5e73\u53f0\u4e4b\u4e00\u3002 \u5b66\u4e60\u4e86\u8c03\u7528Unit API\u7684\u5b9e\u73b0\u8fc7\u7a0b\uff1a \u7b2c\u4e00\u6b65\uff1a\u6ce8\u518c\u767b\u5f55\u767e\u5ea6\u8d26\u6237\uff0c\u8fdb\u5165Unit\u63a7\u5236\u53f0\u521b\u5efa\u81ea\u5df1\u7684\u673a\u5668\u4eba\u3002 \u7b2c\u4e8c\u6b65\uff1a\u8fdb\u884c\u76f8\u5173\u914d\u7f6e\uff0c\u83b7\u5f97\u8bf7\u6c42API\u63a5\u53e3\u9700\u8981\u7684API Key\u4e0eSecret Key. \u7b2c\u4e09\u6b65\uff1a\u5728\u670d\u52a1\u5668\u4e0a\u7f16\u5199API\u8c03\u7528\u811a\u672c\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002 Flask web\u670d\u52a1\u6846\u67b6 \u4f5c\u7528\uff1a\u5728\u9879\u76ee\u4e2d\uff0cFlask\u6846\u67b6\u662f\u4e3b\u903b\u8f91\u670d\u52a1\u548c\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u4f7f\u7528\u7684\u670d\u52a1\u6846\u67b6\u3002 Redis\u6570\u636e\u5e93 \u4f5c\u7528\uff1a\u5728\u9879\u76ee\u4e2d\uff0cRedis\u7528\u4e8e\u4f1a\u8bdd\u7ba1\u7406\u6570\u636e\u5e93\uff0c\u4fdd\u5b58\u7528\u6237\u804a\u5929\u5386\u53f2\u3002 Gunicorn\u670d\u52a1\u7ec4\u4ef6 \u4f5c\u7528\uff1a\u5728\u9879\u76ee\u4e2d\uff0cGunicorn\u548cFlask\u6846\u67b6\u4e00\u540c\u4f7f\u7528\uff0c\u80fd\u591f\u5f00\u542f\u670d\u52a1\uff0c\u5904\u7406\u8bf7\u6c42\uff0c\u56e0\u5176\u9ad8\u6027\u80fd\u7684\u7279\u70b9\u80fd\u591f\u6709\u6548\u51cf\u5c11\u670d\u52a1\u4e22\u5305\u7387\u3002 Supervisor\u670d\u52a1\u76d1\u63a7\u5668 \u4f5c\u7528\uff1a\u5728\u9879\u76ee\u4e2d\uff0cSupervisor\u7528\u4e8e\u76d1\u63a7\u548c\u5b88\u62a4\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u548credis\u6570\u636e\u5e93\u670d\u52a1\u3002 Neo4j\u56fe\u6570\u636e\u5e93","title":"7 \u5c0f\u7ed3"},{"location":"3.html","text":"3.1 neo4j\u4ecb\u7ecd \u00b6 \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3neo4j\u56fe\u6570\u636e\u5e93\u7684\u7b80\u4ecb\uff0c\u7248\u672c\u8bf4\u660e\u3002 \u4e86\u89e3\u8282\u70b9\uff0c\u5173\u7cfb\uff0c\u5c5e\u6027\uff0c\u6807\u7b7e\u7684\u6709\u5173\u6982\u5ff5\u3002 1 neo4j\u7b80\u4ecb \u00b6 neo4j\u662f\u7531Java\u5b9e\u73b0\u7684\u5f00\u6e90NoSQL\u56fe\u6570\u636e\u5e93\u3002\u81ea\u4ece2003\u5e74\u5f00\u59cb\u7814\u53d1\uff0c\u52302007\u5e74\u53d1\u5e03\u7b2c\u4e00\u7248\u3002neo4j\u73b0\u5982\u4eca\u5df2\u7ecf\u88ab\u5404\u884c\u5404\u4e1a\u7684\u6570\u5341\u4e07\u5bb6\u516c\u53f8\u548c\u7ec4\u7ec7\u91c7\u7528\u3002 neo4j\u5b9e\u73b0\u4e86\u4e13\u4e1a\u6570\u636e\u5e93\u7ea7\u522b\u7684\u56fe\u6570\u636e\u6a21\u578b\u7684\u5b58\u50a8\u3002\u4e0e\u666e\u901a\u7684\u56fe\u5904\u7406\u6216\u5185\u5b58\u7ea7\u6570\u636e\u5e93\u4e0d\u540c\uff0cneo4j\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u6570\u636e\u5e93\u7279\u6027\uff0c\u5305\u62ecACID\u4e8b\u7269\u7684\u652f\u6301\uff0c\u96c6\u7fa4\u652f\u6301\uff0c\u5907\u4efd\u4e0e\u6545\u969c\u8f6c\u79fb\u7b49\u3002\u8fd9\u4f7f\u5176\u9002\u5408\u4e8e\u4f01\u4e1a\u7ea7\u751f\u4ea7\u73af\u5883\u4e0b\u7684\u5404\u79cd\u5e94\u7528\u3002 neo4j\u7684\u7248\u672c\u8bf4\u660e\uff1a \u4f01\u4e1a\u7248\uff1a\u9700\u8981\u9ad8\u989d\u7684\u4ed8\u8d39\u83b7\u5f97\u6388\u6743\uff0c\u63d0\u4f9b\u9ad8\u53ef\u7528\uff0c\u70ed\u5907\u4efd\u7b49\u6027\u80fd\u3002 \u793e\u533a\u5f00\u6e90\u7248\uff1a\u514d\u8d39\u4f7f\u7528\uff0c\u4f46\u53ea\u80fd\u5355\u70b9\u8fd0\u884c\u3002 2 neo4j\u56fe\u6570\u636e\u5e93\u6982\u5ff5 \u00b6 \u8282\u70b9 \u8282\u70b9\u662f\u4e3b\u8981\u7684\u6570\u636e\u5143\u7d20\uff0c\u8282\u70b9\u901a\u8fc7\u5173\u7cfb\u8fde\u63a5\u5230\u5176\u4ed6\u8282\u70b9\uff0c\u8282\u70b9\u53ef\u4ee5\u5177\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u5c5e\u6027 (\u5373\u5b58\u50a8\u4e3a\u952e/\u503c\u5bf9\u7684\u5c5e\u6027), \u8282\u70b9\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u7b7e\uff0c\u7528\u4e8e\u63cf\u8ff0\u5176\u5728\u56fe\u8868\u4e2d\u7684\u4f5c\u7528\u3002\u793a\u4f8b\uff1aPerson>\u8282\u70b9\u3002 \u53ef\u4ee5\u5c06\u8282\u70b9\u7c7b\u6bd4\u4e3a\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e2d\u7684\u8868\uff0c\u5bf9\u5e94\u7684\u6807\u7b7e\u53ef\u4ee5\u7c7b\u6bd4\u4e3a\u4e0d\u540c\u7684\u8868\u540d\uff0c\u5c5e\u6027\u5c31\u662f\u8868\u4e2d\u7684\u5217\u3002 \u5173\u7cfb \u5173\u7cfb\u8fde\u63a5\u4e24\u4e2a\u8282\u70b9\uff0c\u5173\u7cfb\u662f\u65b9\u5411\u6027\u7684\uff0c\u5173\u7cfb\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u5c5e\u6027(\u5373\u5b58\u50a8\u4e3a\u952e/\u503c\u5bf9\u7684 \u5c5e\u6027). \u5c5e\u6027 \u5c5e\u6027\u662f\u547d\u540d\u503c\uff0c\u5176\u4e2d\u540d\u79f0(\u6216\u952e)\u662f\u5b57\u7b26\u4e32\uff0c\u5c5e\u6027\u53ef\u4ee5\u88ab\u7d22\u5f15\u548c\u7ea6\u675f\uff0c\u53ef\u4ee5\u4ece\u591a\u4e2a\u5c5e\u6027\u521b \u5efa\u590d\u5408\u7d22\u5f15\u3002 \u6807\u7b7e \u6807\u7b7e\u7528\u4e8e\u7ec4\u8282\u70b9\u5230\u96c6\uff0c\u8282\u70b9\u53ef\u4ee5\u5177\u6709\u591a\u4e2a\u6807\u7b7e\uff0c\u5bf9\u6807\u7b7e\u8fdb\u884c\u7d22\u5f15\u4ee5\u52a0\u901f\u5728\u56fe\u4e2d\u67e5\u627e\u8282\u70b9\u3002 3.2 neo4j\u56fe\u6570\u636e\u5e93\u7684\u5b89\u88c5 \u00b6 \u5b66\u4e60\u76ee\u6807 * \u638c\u63e1neo4j\u56fe\u6570\u636e\u5e93\u7684\u5b89\u88c5\u6d41\u7a0b\u53ca\u5176\u53ef\u89c6\u5316\u540e\u53f0\u7684\u767b\u9646 1 neo4j\u56fe\u6570\u636e\u5e93\u7684\u5b89\u88c5\u6d41\u7a0b \u00b6 \u7b2c\u4e00\u6b65\uff1a\u5c06neo4j\u5b89\u88c5\u4fe1\u606f\u8f7d\u5165\u5230yum\u68c0\u7d22\u5217\u8868\u3002 \u7b2c\u4e8c\u6b65\uff1a\u4f7f\u7528yum install\u547d\u4ee4\u5b89\u88c5\u3002 \u7b2c\u4e09\u6b65\uff1a\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u5185\u5bb9 /etc/neo4j/neo4j.conf. \u7b2c\u56db\u6b65\uff1a\u542f\u52a8neo4j\u6570\u636e\u5e93\u3002 \u7b2c\u4e00\u6b65\uff1a\u5c06neo4j\u5b89\u88c5\u4fe1\u606f\u8f7d\u5165\u5230yum\u68c0\u7d22\u5217\u8868 rpm --import http://debian.neo4j.org/neotechnology.gpg.key vim /etc/yum.repos.d/neo4j.repo # \u5199\u5165\u4e0b\u9762\u5185\u5bb9 [ neo4j ] name = Neo4j RPM Repository baseurl = http://yum.neo4j.org/stable enabled = 1 gpgcheck = 1 \u7b2c\u4e8c\u6b65\uff1a\u4f7f\u7528yum install\u547d\u4ee4\u5b89\u88c5 yum install neo4j \u7b2c\u4e09\u6b65\uff1a\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u9ed8\u8ba4\u5728/etc/neo4j/neo4j.conf, \u4e3a\u4e86\u65b9\u4fbf\u663e\u793a\u4e0b\u9762\u628a\u4e00\u4e9b\u4fee\u6539\u663e\u793a\u5728\u8fd9\u91cc # \u6570\u636e\u5e93\u7684\u5b58\u50a8\u5e93\u5b58\u50a8\u4f4d\u7f6e\u3001\u65e5\u5fd7\u4f4d\u7f6e\u7b49 dbms.directories.data = /var/lib/neo4j/data dbms.directories.plugins = /var/lib/neo4j/plugins dbms.directories.certificates = /var/lib/neo4j/certificates dbms.directories.logs = /var/log/neo4j dbms.directories.lib = /usr/share/neo4j/lib dbms.directories.run = /var/run/neo4j # \u5bfc\u5165\u7684\u4f4d\u7f6e dbms.directories.import = /var/lib/neo4j/import # \u521d\u59cb\u5316\u5185\u5b58\u5927\u5c0f dbms.memory.heap.initial_size = 512m # \u5c06\u8fd9\u4e00\u884c\u6ce8\u91ca\u53bb\u6389 # web\u9875\u9762\u5730\u5740 dbms.connectors.default_listen_address = 0 .0.0.0 # HTTP Connector. There can be zero or one HTTP connectors. dbms.connector.http.enabled = true dbms.connector.http.listen_address = :7474 # \u5c06\u8fd9\u4e00\u884c\u6ce8\u91ca\u53bb\u6389 # HTTPS Connector. There can be zero or one HTTPS connectors. dbms.connector.https.enabled = true dbms.connector.https.listen_address = :7473 # \u5c06\u8fd9\u4e00\u884c\u6ce8\u91ca\u53bb\u6389 # Bolt \u8fde\u63a5\u5730\u5740 dbms.connector.bolt.enabled = true # dbms.connector.bolt.tls_level=OPTIONAL dbms.connector.bolt.listen_address = :7687 # \u5c06\u8fd9\u4e00\u884c\u6ce8\u91ca\u53bb\u6389 \u7b2c\u56db\u6b65\uff1a\u542f\u52a8neo4j\u6570\u636e\u5e93 # \u542f\u52a8\u547d\u4ee4 neo4j start # \u7ec8\u7aef\u663e\u793a\u5982\u4e0b\uff0c\u4ee3\u8868\u542f\u52a8\u6210\u529f Active database: graph.db Directories in use: home: /var/lib/neo4j config: /etc/neo4j logs: /var/log/neo4j plugins: /var/lib/neo4j/plugins import: /var/lib/neo4j/import data: /var/lib/neo4j/data certificates: /var/lib/neo4j/certificates run: /var/run/neo4j Starting Neo4j. WARNING: Max 1024 open files allowed, minimum of 40000 recommended. See the Neo4j manual. Started neo4j ( pid 2463 ) . It is available at http://localhost:7474/ There may be a short delay until the server is ready. See /var/log/neo4j/neo4j.log for current status. 2 neo4j\u7684\u53ef\u89c6\u5316\u7ba1\u7406\u540e\u53f0\u767b\u9646 \u00b6 \u8bbf\u95ee\u5730\u5740\uff1a http://192.168.88.161:7474 ConnectURL: bolt://192.168.88.161:7687 Username: neo4j Password: neo4j (\u7b2c\u4e00\u6b21\u767b\u5f55)\uff0c\u865a\u62df\u673a\u4e2d\u5df2\u6539\u6210123456 3 \u5c0f\u8282\u603b\u7ed3 \u00b6 \u5b66\u4e60\u4e86neo4j\u56fe\u6570\u636e\u5e93\u7684\u5b89\u88c5\u6d41\u7a0b\uff1a \u7b2c\u4e00\u6b65\uff1a\u5c06neo4j\u5b89\u88c5\u4fe1\u606f\u8f7d\u5165\u5230yum\u68c0\u7d22\u5217\u8868\u3002 \u7b2c\u4e8c\u6b65\uff1a\u4f7f\u7528yum install\u547d\u4ee4\u5b89\u88c5\u3002 \u7b2c\u4e09\u6b65\uff1a\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u5185\u5bb9 /etc/neo4j/neo4j.conf. \u7b2c\u56db\u6b65\uff1a\u542f\u52a8neo4j\u6570\u636e\u5e93\u3002 \u5b66\u4e60\u4e86neo4j\u7684\u53ef\u89c6\u5316\u7ba1\u7406\u540e\u53f0\u767b\u9646\uff1a \u8bbf\u95ee\u5730\u5740\uff1a http://192.168.88.161:7474 . ConnectURL: bolt://192.168.88.161:7687 Username: neo4j Password: neo4j (\u9ed8\u8ba4) 3.3 Cypher\u4ecb\u7ecd\u4e0e\u4f7f\u7528 \u00b6 \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3Cypher\u7684\u57fa\u672c\u6982\u5ff5\u3002 \u638c\u63e1Cypher\u7684\u57fa\u672c\u547d\u4ee4\u548c\u8bed\u6cd5\u3002 Cypher\u7684\u57fa\u672c\u6982\u5ff5\uff1a Cypher\u662fneo4j\u56fe\u6570\u636e\u7684\u67e5\u8be2\u8bed\u8a00\uff0c\u7c7b\u4f3c\u4e8emysql\u6570\u636e\u5e93\u7684sql\u8bed\u53e5\uff0c\u4f46\u662f\u5b83\u5141\u8bb8\u5bf9\u56fe\u5f62\u8fdb\u884c\u5bcc\u6709\u8868\u73b0\u529b\u548c\u6709\u6548\u7684\u67e5\u8be2\u548c\u66f4\u65b0\u3002 Cypher\u7684\u57fa\u672c\u547d\u4ee4\u548c\u8bed\u6cd5\uff1a create\u547d\u4ee4 match\u547d\u4ee4 merge\u547d\u4ee4 relationship\u5173\u7cfb\u547d\u4ee4 where\u547d\u4ee4 delete\u547d\u4ee4 sort\u547d\u4ee4 \u5b57\u7b26\u4e32\u51fd\u6570 \u805a\u5408\u51fd\u6570 index\u7d22\u5f15\u547d\u4ee4 1 create\u547d\u4ee4 \u00b6 \u521b\u5efa\u56fe\u6570\u636e\u4e2d\u7684\u8282\u70b9 \u6f14\u793a\uff1a # \u521b\u5efa\u547d\u4ee4\u683c\u5f0f\uff1a # \u6b64\u5904 create\u662f\u5173\u952e\u5b57 \uff0c\u521b\u5efa\u8282\u70b9\u540d\u79f0 node_name , \u8282\u70b9\u6807\u7b7e Node_Label , \u653e\u5728\u5c0f\u62ec\u53f7\u91cc\u9762 () # \u540e\u9762\u628a\u6240\u6709\u5c5e\u4e8e\u8282\u70b9\u6807\u7b7e\u7684\u5c5e\u6027\u653e\u5728\u5927\u62ec\u53f7 '{}' \u91cc\u9762\uff0c\u4f9d\u6b21\u5199\u51fa\u5c5e\u6027\u540d\u79f0\uff1a\u5c5e\u6027\u503c\uff0c\u4e0d\u540c\u5c5e\u6027\u7528\u9017\u53f7 ',' \u5206\u9694 # \u4f8b\u5982\u4e0b\u9762\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u8282\u70b9 e , \u8282\u70b9\u6807\u7b7e\u662f Employee , \u62e5\u6709 id , name , salary , deptnp\u56db\u4e2a\u5c5e\u6027 \uff1a CREATE ( e : Employee { id : 222 , name : 'Bob' , salary : 6000 , deptnp : 12 } ) \u6548\u679c 2 match\u547d\u4ee4 \u00b6 \u5339\u914d(\u67e5\u8be2)\u5df2\u6709\u6570\u636e \u6f14\u793a\uff1a # match\u547d\u4ee4\u4e13\u95e8\u7528\u6765\u5339\u914d\u67e5\u8be2 \uff0c\u8282\u70b9\u540d\u79f0\uff1a\u8282\u70b9\u6807\u7b7e\uff0c\u4f9d\u7136\u653e\u5728\u5c0f\u62ec\u53f7\u5185\uff0c\u7136\u540e\u4f7f\u7528 return\u8bed\u53e5\u8fd4\u56de\u67e5\u8be2\u7ed3\u679c \uff0c\u548c SQL\u5f88\u76f8\u4f3c \u3002 MATCH ( e : Employee ) RETURN e . id , e . name , e . salary , e . deptno MATCH ( n ) return n # \u67e5\u8be2\u6240\u6709\u7ed3\u70b9 \u6548\u679c\uff1a 3 merge\u547d\u4ee4 \u00b6 \u82e5\u8282\u70b9\u5b58\u5728\uff0c\u5219\u7b49\u6548\u4e0ematch\u547d\u4ee4; \u8282\u70b9\u4e0d\u5b58\u5728\uff0c\u5219\u7b49\u6548\u4e8ecreate\u547d\u4ee4\u3002 \u6f14\u793a\uff1a MERGE ( e : Employee { id : 146 , name : 'Lucer' , salary : 3500 , deptno : 16 } ) \u6548\u679c\uff1a \u7136\u540e\u518d\u6b21\u7528merge\u67e5\u8be2\uff0c\u53d1\u73b0\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u5e76\u6ca1\u6709\u589e\u52a0\uff0c\u56e0\u4e3a\u5df2\u7ecf\u5b58\u5728\u76f8\u540c\u7684\u6570\u636e\u4e86\uff0cmerge\u5339\u914d\u6210\u529f\u3002 \u6f14\u793a\uff1a MERGE (e:Employee {id:146, name:'Lucer', salary:3500, deptno:16}) \u6548\u679c\uff1a 4 \u4f7f\u7528create\u521b\u5efa\u5173\u7cfb \u00b6 \u5fc5\u987b\u521b\u5efa\u6709\u65b9\u5411\u6027\u7684\u5173\u7cfb\uff0c\u5426\u5219\u62a5\u9519\u3002 \u6f14\u793a\uff1a # \u521b\u5efa\u4e00\u4e2a\u8282\u70b9 p1\u5230p2\u7684\u6709\u65b9\u5411\u5173\u7cfb \uff0c\u8fd9\u4e2a\u5173\u7cfb r\u7684\u6807\u7b7e\u4e3aBuy , \u4ee3\u8868 p1\u8d2d\u4e70\u4e86p2 , \u65b9\u5411\u4e3a p1\u6307\u5411p2 CREATE ( p1 : Profile1 ) - [ r : Buy ] -> ( p2 : Profile2 ) \u6548\u679c\uff1a 5 \u4f7f\u7528merge\u521b\u5efa\u5173\u7cfb \u00b6 \u53ef\u4ee5\u521b\u5efa\u6709/\u65e0\u65b9\u5411\u6027\u7684\u5173\u7cfb\u3002 \u6f14\u793a\uff1a # \u521b\u5efa\u4e00\u4e2a\u8282\u70b9 p1\u5230p2\u7684\u65e0\u65b9\u5411\u5173\u7cfb \uff0c\u8fd9\u4e2a\u5173\u7cfb r\u7684\u6807\u7b7e\u4e3amiss , \u4ee3\u8868 p1 - miss - p2 , \u65b9\u5411\u4e3a\u76f8\u4e92\u7684 MERGE ( p1 : Profile1 ) - [ r : miss ] - ( p2 : Profile2 ) \u6548\u679c\uff1a 6 where\u547d\u4ee4 \u00b6 \u7c7b\u4f3c\u4e8eSQL\u4e2d\u7684\u6dfb\u52a0\u67e5\u8be2\u6761\u4ef6\u3002 \u6f14\u793a\uff1a # \u67e5\u8be2\u8282\u70b9 Employee\u4e2d \uff0c id\u503c\u7b49\u4e8e123\u7684\u90a3\u4e2a\u8282\u70b9 MATCH ( e : Employee ) WHERE e . id = 123 RETURN e \u6548\u679c\uff1a 7 delete\u547d\u4ee4 \u00b6 \u5220\u9664\u8282\u70b9/\u5173\u7cfb\u53ca\u5176\u5173\u8054\u7684\u5c5e\u6027\u3002 \u6f14\u793a\uff1a # \u6ce8\u610f\uff1a\u5220\u9664\u8282\u70b9\u7684\u540c\u65f6\uff0c\u4e5f\u8981\u5220\u9664\u5173\u8054\u7684\u5173\u7cfb\u8fb9 MATCH ( p1 : Profile1 ) - [ r ] - ( p2 : Profile2 ) DELETE p1 , r , p2 \u6548\u679c\uff1a 8 sort\u547d\u4ee4 \u00b6 Cypher\u547d\u4ee4\u4e2d\u7684\u6392\u5e8f\u4f7f\u7528\u7684\u662forder by. \u6f14\u793a\uff1a # \u5339\u914d\u67e5\u8be2\u6807\u7b7e Employee , \u5c06\u6240\u6709\u5339\u914d\u7ed3\u679c\u6309\u7167 id\u503c\u5347\u5e8f\u6392\u5217\u540e\u8fd4\u56de\u7ed3\u679c MATCH ( e : Employee ) RETURN e . id , e . name , e . salary , e . deptno ORDER BY e . id # \u5982\u679c\u8981\u6309\u7167\u964d\u5e8f\u6392\u5e8f\uff0c\u53ea\u9700\u8981\u5c06 ORDER BY e . salary\u6539\u5199\u4e3aORDER BY e . salary DESC MATCH ( e : Employee ) RETURN e . id , e . name , e . salary , e . deptno ORDER BY e . salary DESC \u6548\u679c\uff1a 9 \u5b57\u7b26\u4e32\u51fd\u6570\uff1a \u00b6 toUpper()\u51fd\u6570 toLower()\u51fd\u6570 substring()\u51fd\u6570 replace()\u51fd\u6570 1 toUpper()\u51fd\u6570 \u00b6 \u5c06\u4e00\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5927\u5199\u5b57\u6bcd\u3002 \u6f14\u793a\uff1a MATCH ( e : Employee ) RETURN e . id , toUpper ( e . name ), e . salary , e . deptno \u6548\u679c\uff1a 2 toLower()\u51fd\u6570 \u00b6 \u5c06\u4e00\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002 \u6f14\u793a\uff1a MATCH ( e : Employee ) RETURN e . id , toLower ( e . name ), e . salary , e . deptno \u6548\u679c\uff1a 3 substring()\u51fd\u6570 \u00b6 \u8fd4\u56de\u4e00\u4e2a\u5b50\u5b57\u7b26\u4e32\u3002 \u6f14\u793a\uff1a # \u8f93\u5165\u5b57\u7b26\u4e32\u4e3a input_str , \u8fd4\u56de\u4ece\u7d22\u5f15 start_index\u5f00\u59cb \uff0c\u5230 end_index - 1 \u7ed3\u675f\u7684\u5b50\u5b57\u7b26\u4e32 substring ( input_str , start_index , end_index ) # \u793a\u4f8b\u4ee3\u7801\uff0c\u8fd4\u56de\u5458\u5de5\u540d\u5b57\u7684\u524d\u4e24\u4e2a\u5b57\u6bcd MATCH ( e : Employee ) RETURN e . id , substring ( e . name , 0 , 2 ), e . salary , e . deptno \u6548\u679c\uff1a 4 replace()\u51fd\u6570 \u00b6 \u66ff\u6362\u6389\u5b50\u5b57\u7b26\u4e32\u3002 \u6f14\u793a\uff1a # \u8f93\u5165\u5b57\u7b26\u4e32\u4e3a input_str , \u5c06\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u7b26\u5408 origin_str\u7684\u90e8\u5206 \uff0c\u66ff\u6362\u6210 new_str replace ( input_str , origin_str , new_str ) # \u793a\u4f8b\u4ee3\u7801\uff0c\u5c06\u5458\u5de5\u540d\u5b57\u66ff\u6362\u4e3a\u6dfb\u52a0\u540e\u7f00 _HelloWorld MATCH ( e : Employee ) RETURN e . id , replace ( e . name , e . name , e . name + \"_HelloWorld\" ), e . salary , e . deptno # \u8fd8\u539f MATCH ( e : Employee ) RETURN e . id , replace ( e . name , \"_HelloWorld\" , \"\" ), e . salary , e . deptno \u6548\u679c\uff1a 10 \u805a\u5408\u51fd\u6570 \u00b6 count()\u51fd\u6570 max()\u51fd\u6570 min()\u51fd\u6570 sum()\u51fd\u6570 avg()\u51fd\u6570 1 count()\u51fd\u6570 \u00b6 \u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u6761\u6570\u3002 \u6f14\u793a\uff1a # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2a\u6570 MATCH ( e : Employee ) RETURN count ( * ) \u6548\u679c\uff1a 2 max()\u51fd\u6570 \u00b6 \u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u7684\u6700\u5927\u503c\u3002 \u6f14\u793a\uff1a # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2d \uff0c\u6700\u9ad8\u7684\u5de5\u8d44\u6570\u5b57 MATCH ( e : Employee ) RETURN max ( e . salary ) \u6548\u679c\uff1a 3 min()\u51fd\u6570 \u00b6 \u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u7684\u6700\u5c0f\u503c\u3002 \u6f14\u793a\uff1a # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2d \uff0c\u6700\u4f4e\u7684\u5de5\u8d44\u6570\u5b57 MATCH ( e : Employee ) RETURN min ( e . salary ) \u6548\u679c\uff1a 4 sum()\u51fd\u6570 \u00b6 \u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u67d0\u5b57\u6bb5\u7684\u5168\u90e8\u52a0\u548c\u503c\u3002 \u6f14\u793a\uff1a # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2d \uff0c\u6240\u6709\u5458\u5de5\u5de5\u8d44\u7684\u548c MATCH ( e : Employee ) RETURN sum ( e . salary ) \u6548\u679c\uff1a 5 avg()\u51fd\u6570 \u00b6 \u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u67d0\u5b57\u6bb5\u7684\u5e73\u5747\u503c\u3002 \u6f14\u793a\uff1a # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2d \uff0c\u6240\u6709\u5458\u5de5\u5de5\u8d44\u7684\u5e73\u5747\u503c MATCH ( e : Employee ) RETURN avg ( e . salary ) \u6548\u679c\uff1a 11 \u7d22\u5f15index \u00b6 Neo4j\u652f\u6301\u5728\u8282\u70b9\u6216\u5173\u7cfb\u5c5e\u6027\u4e0a\u7684\u7d22\u5f15\uff0c\u4ee5\u63d0\u9ad8\u67e5\u8be2\u7684\u6027\u80fd\u3002 \u53ef\u4ee5\u4e3a\u5177\u6709\u76f8\u540c\u6807\u7b7e\u540d\u79f0\u7684\u6240\u6709\u8282\u70b9\u7684\u5c5e\u6027\u521b\u5efa\u7d22\u5f15\u3002 1 \u521b\u5efa\u7d22\u5f15 \u00b6 \u4f7f\u7528create index on\u6765\u521b\u5efa\u7d22\u5f15\u3002 \u6f14\u793a\uff1a # \u521b\u5efa\u8282\u70b9 Employee\u4e0a\u9762\u5c5e\u6027id\u7684\u7d22\u5f15 CREATE INDEX ON : Employee ( id ) \u6548\u679c\uff1a 2 \u5220\u9664\u7d22\u5f15 \u00b6 \u4f7f\u7528drop index on\u6765\u5220\u9664\u7d22\u5f15\u3002 \u6f14\u793a\uff1a # \u5220\u9664\u8282\u70b9 Employee\u4e0a\u9762\u5c5e\u6027id\u7684\u7d22\u5f15 DROP INDEX ON : Employee ( id ) \u6548\u679c\uff1a 12 \u5c0f\u8282\u603b\u7ed3 \u00b6 \u5b66\u4e60\u4e86Cypher\u7684\u57fa\u672c\u6982\u5ff5\uff1a Cypher\u662fneo4j\u56fe\u6570\u636e\u7684\u67e5\u8be2\u8bed\u8a00\uff0c\u7c7b\u4f3c\u4e8emysql\u6570\u636e\u5e93\u7684sql\u8bed\u53e5\uff0c\u4f46\u662f\u5b83\u5141\u8bb8\u5bf9\u56fe\u5f62\u8fdb\u884c\u5bcc\u6709\u8868\u73b0\u529b\u548c\u6709\u6548\u7684\u67e5\u8be2\u548c\u66f4\u65b0\u3002 Cypher\u7684\u57fa\u672c\u547d\u4ee4\u548c\u8bed\u6cd5\uff1a create\u547d\u4ee4\uff1a\u521b\u5efa\u56fe\u6570\u636e\u4e2d\u7684\u8282\u70b9\u3002 CREATE (e:Employee{id:222, name:'Bob', salary:6000, deptnp:12}) match\u547d\u4ee4\uff1a\u5339\u914d(\u67e5\u8be2)\u5df2\u6709\u6570\u636e\u3002 MATCH (e:Employee) RETURN e.id, e.name, e.salary, e.deptno merge\u547d\u4ee4\uff1a\u82e5\u8282\u70b9\u5b58\u5728\uff0c\u5219\u7b49\u6548\u4e0ematch\u547d\u4ee4; \u8282\u70b9\u4e0d\u5b58\u5728\uff0c\u5219\u7b49\u6548\u4e8ecreate\u547d\u4ee4\u3002 MERGE (e:Employee {id:145, name:'Lucy', salary:7500, deptno:12}) \u4f7f\u7528create\u521b\u5efa\u5173\u7cfb\uff1a\u5fc5\u987b\u521b\u5efa\u6709\u65b9\u5411\u6027\u7684\u5173\u7cfb\uff0c\u5426\u5219\u62a5\u9519\u3002 CREATE (p1:Profile1)-[r:Buy]->(p2:Profile2) \u4f7f\u7528merge\u521b\u5efa\u5173\u7cfb\uff1a\u53ef\u4ee5\u521b\u5efa\u6709/\u65e0\u65b9\u5411\u6027\u7684\u5173\u7cfb\u3002 MERGE (p1:Profile1)-[r:miss]-(p2:Profile2) where\u547d\u4ee4\uff1a\u7c7b\u4f3c\u4e8eSQL\u4e2d\u7684\u6dfb\u52a0\u67e5\u8be2\u6761\u4ef6\u3002 MATCH (e:Employee) WHERE e.id=123 RETURN e delete\u547d\u4ee4\uff1a\u5220\u9664\u8282\u70b9/\u5173\u7cfb\u53ca\u5176\u5173\u8054\u7684\u5c5e\u6027\u3002 MATCH (c1:CreditCard)-[r]-(c2:Customer) DELETE c1, r, c2 sort\u547d\u4ee4\uff1aCypher\u547d\u4ee4\u4e2d\u7684\u6392\u5e8f\u4f7f\u7528\u7684\u662forder by. MATCH (e:Employee) RETURN e.id, e.name, e.salary, e.deptno ORDER BY e.id toUpper()\u51fd\u6570\uff1a\u5c06\u4e00\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5927\u5199\u5b57\u6bcd\u3002 MATCH (e:Employee) RETURN e.id, toUpper(e.name), e.salary, e.deptno toLower()\u51fd\u6570\uff1a\u8bb2\u4e00\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002 MATCH (e:Employee) RETURN e.id, toLower(e.name), e.salary, e.deptno substring()\u51fd\u6570\uff1a\u8fd4\u56de\u4e00\u4e2a\u5b50\u5b57\u7b26\u4e32\u3002 MATCH (e:Employee) RETURN e.id, substring(e.name,0,2), e.salary, e.deptno replace()\u51fd\u6570\uff1a\u66ff\u6362\u6389\u5b50\u5b57\u7b26\u4e32\u3002 MATCH (e:Employee) RETURN e.id, replace(e.name,e.name,e.name + \"_HelloWorld\"), e.salary, e.deptno count()\u51fd\u6570\uff1a\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u6761\u6570\u3002 MATCH (e:Employee) RETURN count( * ) max()\u51fd\u6570\uff1a\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u7684\u6700\u5927\u503c\u3002 MATCH (e:Employee) RETURN max(e.salary) min()\u51fd\u6570\uff1a\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u7684\u6700\u5c0f\u503c\u3002 MATCH (e:Employee) RETURN min(e.salary) sum()\u51fd\u6570\uff1a\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u67d0\u5b57\u6bb5\u7684\u5168\u90e8\u52a0\u548c\u503c\u3002 MATCH (e:Employee) RETURN sum(e.salary) avg()\u51fd\u6570\uff1a\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u67d0\u5b57\u6bb5\u7684\u5e73\u5747\u503c\u3002 MATCH (e:Employee) RETURN avg(e.salary) \u7d22\u5f15index Neo4j\u652f\u6301\u5728\u8282\u70b9\u6216\u5173\u7cfb\u5c5e\u6027\u4e0a\u7684\u7d22\u5f15\uff0c\u4ee5\u63d0\u9ad8\u67e5\u8be2\u7684\u6027\u80fd\u3002 \u53ef\u4ee5\u4e3a\u5177\u6709\u76f8\u540c\u6807\u7b7e\u540d\u79f0\u7684\u6240\u6709\u8282\u70b9\u7684\u5c5e\u6027\u521b\u5efa\u7d22\u5f15\u3002 \u521b\u5efa\u7d22\u5f15\uff1a\u4f7f\u7528create index on\u6765\u521b\u5efa\u7d22\u5f15\u3002 CREATE INDEX ON:Employee(id) \u5220\u9664\u7d22\u5f15\uff1a\u4f7f\u7528drop index on\u6765\u5220\u9664\u7d22\u5f15\u3002 DROP INDEX ON:Employee(id) 3.4 \u5728Python\u4e2d\u4f7f\u7528neo4j \u00b6 \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3python\u4e2dneo4j-driver\u7684\u76f8\u5173\u77e5\u8bc6\u3002 \u638c\u63e1neo4j\u4e2d\u4e8b\u52a1\u6982\u5ff5\u548c\u64cd\u4f5c\u65b9\u6cd5\u3002 1 neo4j-driver\u7b80\u4ecb\uff1a \u00b6 neo4j-driver\u662f\u4e00\u4e2apython\u4e2d\u7684package, \u4f5c\u4e3apython\u4e2dneo4j\u7684\u9a71\u52a8\uff0c\u5e2e\u52a9\u6211\u4eec\u5728python\u7a0b\u5e8f\u4e2d\u66f4\u597d\u7684\u4f7f\u7528\u56fe\u6570\u636e\u5e93\u3002 neo4j-driver\u7684\u5b89\u88c5\uff1a pip install neo4j-driver neo4j-driver\u4f7f\u7528\u6f14\u793a\uff1a from neo4j import GraphDatabase # uri = \"neo4j://192.168.88.161:7687\" # 4.x\u7248\u672c\u7528\u8fd9\u4e2a uri = \"bolt://192.168.88.161:7687\" # 3.x\u7248\u672c\u7528\u8fd9\u4e2a driver = GraphDatabase . driver ( uri , auth = ( \"neo4j\" , \"123456\" ), max_connection_lifetime = 1000 ) # \u76f4\u63a5\u7528python\u4ee3\u7801\u5f62\u5f0f\u8bbf\u95ee\u8282\u70b9Company, \u5e76\u8fd4\u56de\u6240\u6709\u8282\u70b9\u4fe1\u606f with driver . session () as session : cypher = \"CREATE(c:Company) SET c.name='\u9ed1\u9a6c\u7a0b\u5e8f\u5458' RETURN c.name\" record = session . run ( cypher ) result = list ( map ( lambda x : x [ 0 ], record )) print ( \"result:\" , result ) \u8f93\u51fa\u6548\u679c\uff1a result: \u9ed1\u9a6c\u7a0b\u5e8f\u5458 2 \u4e8b\u52a1\u7684\u6982\u5ff5 \u00b6 \u5982\u679c\u4e00\u7ec4\u6570\u636e\u5e93\u64cd\u4f5c\u8981\u4e48\u5168\u90e8\u53d1\u751f\u8981\u4e48\u4e00\u6b65\u4e5f\u4e0d\u6267\u884c\uff0c\u6211\u4eec\u79f0\u8be5\u7ec4\u5904\u7406\u6b65\u9aa4\u4e3a\u4e00\u4e2a\u4e8b\u52a1\uff0c\u5b83\u662f\u6570\u636e\u5e93\u4e00\u81f4\u6027\u7684\u4fdd\u8bc1\u3002 \u4f7f\u7528\u4e8b\u52a1\u7684\u6f14\u793a\uff1a # \u4e0b\u9762\u53ef\u4ee5\u6b63\u5e38\u6267\u884c def _some_operations ( sess , cat_name , mouse_name ): sess . run ( \"MERGE (a:Cat{name: $cat_name})\" \"MERGE (b:Mouse{name: $mouse_name})\" \"MERGE (a)-[r:And]-(b)\" , cat_name = cat_name , mouse_name = mouse_name ) with driver . session () as session : session . write_transaction ( _some_operations , \"Tom\" , \"Jerry\" ) # \u4e0b\u9762\u6267\u884c\u65f6\u62a5\u9519 def _some_operations ( sess , cat_name , mouse_name ): sess . run ( \"MERGE (a:Cat{name: $cat_name})\" \"MERGE (b:Mouse{name: $mouse_name})\" \"CREATE (a)-[r:And]-(b)\" , cat_name = cat_name , mouse_name = mouse_name ) with driver . session () as session : session . write_transaction ( _some_operations , \"Tom1\" , \"Jerry1\" ) \u8f93\u51fa\u6548\u679c\uff1a 3 \u5c0f\u8282\u603b\u7ed3 \u00b6 \u5b66\u4e60\u4e86neo4j-driver\u7b80\u4ecb\uff1a neo4j-driver\u662f\u4e00\u4e2apython\u4e2d\u7684package, \u4f5c\u4e3apython\u4e2dneo4j\u7684\u9a71\u52a8\uff0c\u5e2e\u52a9\u6211\u4eec\u5728python\u7a0b\u5e8f\u4e2d\u66f4\u597d\u7684\u4f7f\u7528\u56fe\u6570\u636e\u5e93\u3002 \u5b66\u4e60\u4e86neo4j-driver\u7684\u5b89\u88c5\u548c\u4f7f\u7528\u65b9\u6cd5\u3002 \u5b66\u4e60\u4e86\u4e8b\u52a1\u7684\u6982\u5ff5\uff1a \u5982\u679c\u4e00\u7ec4\u6570\u636e\u5e93\u64cd\u4f5c\u8981\u4e48\u5168\u90e8\u53d1\u751f\u8981\u4e48\u4e00\u6b65\u4e5f\u4e0d\u6267\u884c\uff0c\u6211\u4eec\u79f0\u8be5\u7ec4\u5904\u7406\u6b65\u9aa4\u4e3a\u4e00\u4e2a\u4e8b\u52a1\uff0c\u5b83\u662f\u6570\u636e\u5e93\u4e00\u81f4\u6027\u7684\u4fdd\u8bc1\u3002 \u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528\u4e8b\u52a1\u6765\u5411\u56fe\u6570\u636e\u5e93\u4e2d\u5199\u5165\u6570\u636e\u3002","title":"\u7b2c\u4e09\u7ae0:neo4j\u56fe\u6570\u636e\u5e93"},{"location":"3.html#31-neo4j","text":"\u5b66\u4e60\u76ee\u6807 \u4e86\u89e3neo4j\u56fe\u6570\u636e\u5e93\u7684\u7b80\u4ecb\uff0c\u7248\u672c\u8bf4\u660e\u3002 \u4e86\u89e3\u8282\u70b9\uff0c\u5173\u7cfb\uff0c\u5c5e\u6027\uff0c\u6807\u7b7e\u7684\u6709\u5173\u6982\u5ff5\u3002","title":"3.1 neo4j\u4ecb\u7ecd"},{"location":"3.html#1-neo4j","text":"neo4j\u662f\u7531Java\u5b9e\u73b0\u7684\u5f00\u6e90NoSQL\u56fe\u6570\u636e\u5e93\u3002\u81ea\u4ece2003\u5e74\u5f00\u59cb\u7814\u53d1\uff0c\u52302007\u5e74\u53d1\u5e03\u7b2c\u4e00\u7248\u3002neo4j\u73b0\u5982\u4eca\u5df2\u7ecf\u88ab\u5404\u884c\u5404\u4e1a\u7684\u6570\u5341\u4e07\u5bb6\u516c\u53f8\u548c\u7ec4\u7ec7\u91c7\u7528\u3002 neo4j\u5b9e\u73b0\u4e86\u4e13\u4e1a\u6570\u636e\u5e93\u7ea7\u522b\u7684\u56fe\u6570\u636e\u6a21\u578b\u7684\u5b58\u50a8\u3002\u4e0e\u666e\u901a\u7684\u56fe\u5904\u7406\u6216\u5185\u5b58\u7ea7\u6570\u636e\u5e93\u4e0d\u540c\uff0cneo4j\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u6570\u636e\u5e93\u7279\u6027\uff0c\u5305\u62ecACID\u4e8b\u7269\u7684\u652f\u6301\uff0c\u96c6\u7fa4\u652f\u6301\uff0c\u5907\u4efd\u4e0e\u6545\u969c\u8f6c\u79fb\u7b49\u3002\u8fd9\u4f7f\u5176\u9002\u5408\u4e8e\u4f01\u4e1a\u7ea7\u751f\u4ea7\u73af\u5883\u4e0b\u7684\u5404\u79cd\u5e94\u7528\u3002 neo4j\u7684\u7248\u672c\u8bf4\u660e\uff1a \u4f01\u4e1a\u7248\uff1a\u9700\u8981\u9ad8\u989d\u7684\u4ed8\u8d39\u83b7\u5f97\u6388\u6743\uff0c\u63d0\u4f9b\u9ad8\u53ef\u7528\uff0c\u70ed\u5907\u4efd\u7b49\u6027\u80fd\u3002 \u793e\u533a\u5f00\u6e90\u7248\uff1a\u514d\u8d39\u4f7f\u7528\uff0c\u4f46\u53ea\u80fd\u5355\u70b9\u8fd0\u884c\u3002","title":"1 neo4j\u7b80\u4ecb"},{"location":"3.html#2-neo4j","text":"\u8282\u70b9 \u8282\u70b9\u662f\u4e3b\u8981\u7684\u6570\u636e\u5143\u7d20\uff0c\u8282\u70b9\u901a\u8fc7\u5173\u7cfb\u8fde\u63a5\u5230\u5176\u4ed6\u8282\u70b9\uff0c\u8282\u70b9\u53ef\u4ee5\u5177\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u5c5e\u6027 (\u5373\u5b58\u50a8\u4e3a\u952e/\u503c\u5bf9\u7684\u5c5e\u6027), \u8282\u70b9\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u7b7e\uff0c\u7528\u4e8e\u63cf\u8ff0\u5176\u5728\u56fe\u8868\u4e2d\u7684\u4f5c\u7528\u3002\u793a\u4f8b\uff1aPerson>\u8282\u70b9\u3002 \u53ef\u4ee5\u5c06\u8282\u70b9\u7c7b\u6bd4\u4e3a\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e2d\u7684\u8868\uff0c\u5bf9\u5e94\u7684\u6807\u7b7e\u53ef\u4ee5\u7c7b\u6bd4\u4e3a\u4e0d\u540c\u7684\u8868\u540d\uff0c\u5c5e\u6027\u5c31\u662f\u8868\u4e2d\u7684\u5217\u3002 \u5173\u7cfb \u5173\u7cfb\u8fde\u63a5\u4e24\u4e2a\u8282\u70b9\uff0c\u5173\u7cfb\u662f\u65b9\u5411\u6027\u7684\uff0c\u5173\u7cfb\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u5c5e\u6027(\u5373\u5b58\u50a8\u4e3a\u952e/\u503c\u5bf9\u7684 \u5c5e\u6027). \u5c5e\u6027 \u5c5e\u6027\u662f\u547d\u540d\u503c\uff0c\u5176\u4e2d\u540d\u79f0(\u6216\u952e)\u662f\u5b57\u7b26\u4e32\uff0c\u5c5e\u6027\u53ef\u4ee5\u88ab\u7d22\u5f15\u548c\u7ea6\u675f\uff0c\u53ef\u4ee5\u4ece\u591a\u4e2a\u5c5e\u6027\u521b \u5efa\u590d\u5408\u7d22\u5f15\u3002 \u6807\u7b7e \u6807\u7b7e\u7528\u4e8e\u7ec4\u8282\u70b9\u5230\u96c6\uff0c\u8282\u70b9\u53ef\u4ee5\u5177\u6709\u591a\u4e2a\u6807\u7b7e\uff0c\u5bf9\u6807\u7b7e\u8fdb\u884c\u7d22\u5f15\u4ee5\u52a0\u901f\u5728\u56fe\u4e2d\u67e5\u627e\u8282\u70b9\u3002","title":"2 neo4j\u56fe\u6570\u636e\u5e93\u6982\u5ff5"},{"location":"3.html#32-neo4j","text":"\u5b66\u4e60\u76ee\u6807 * \u638c\u63e1neo4j\u56fe\u6570\u636e\u5e93\u7684\u5b89\u88c5\u6d41\u7a0b\u53ca\u5176\u53ef\u89c6\u5316\u540e\u53f0\u7684\u767b\u9646","title":"3.2 neo4j\u56fe\u6570\u636e\u5e93\u7684\u5b89\u88c5"},{"location":"3.html#1-neo4j_1","text":"\u7b2c\u4e00\u6b65\uff1a\u5c06neo4j\u5b89\u88c5\u4fe1\u606f\u8f7d\u5165\u5230yum\u68c0\u7d22\u5217\u8868\u3002 \u7b2c\u4e8c\u6b65\uff1a\u4f7f\u7528yum install\u547d\u4ee4\u5b89\u88c5\u3002 \u7b2c\u4e09\u6b65\uff1a\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u5185\u5bb9 /etc/neo4j/neo4j.conf. \u7b2c\u56db\u6b65\uff1a\u542f\u52a8neo4j\u6570\u636e\u5e93\u3002 \u7b2c\u4e00\u6b65\uff1a\u5c06neo4j\u5b89\u88c5\u4fe1\u606f\u8f7d\u5165\u5230yum\u68c0\u7d22\u5217\u8868 rpm --import http://debian.neo4j.org/neotechnology.gpg.key vim /etc/yum.repos.d/neo4j.repo # \u5199\u5165\u4e0b\u9762\u5185\u5bb9 [ neo4j ] name = Neo4j RPM Repository baseurl = http://yum.neo4j.org/stable enabled = 1 gpgcheck = 1 \u7b2c\u4e8c\u6b65\uff1a\u4f7f\u7528yum install\u547d\u4ee4\u5b89\u88c5 yum install neo4j \u7b2c\u4e09\u6b65\uff1a\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u9ed8\u8ba4\u5728/etc/neo4j/neo4j.conf, \u4e3a\u4e86\u65b9\u4fbf\u663e\u793a\u4e0b\u9762\u628a\u4e00\u4e9b\u4fee\u6539\u663e\u793a\u5728\u8fd9\u91cc # \u6570\u636e\u5e93\u7684\u5b58\u50a8\u5e93\u5b58\u50a8\u4f4d\u7f6e\u3001\u65e5\u5fd7\u4f4d\u7f6e\u7b49 dbms.directories.data = /var/lib/neo4j/data dbms.directories.plugins = /var/lib/neo4j/plugins dbms.directories.certificates = /var/lib/neo4j/certificates dbms.directories.logs = /var/log/neo4j dbms.directories.lib = /usr/share/neo4j/lib dbms.directories.run = /var/run/neo4j # \u5bfc\u5165\u7684\u4f4d\u7f6e dbms.directories.import = /var/lib/neo4j/import # \u521d\u59cb\u5316\u5185\u5b58\u5927\u5c0f dbms.memory.heap.initial_size = 512m # \u5c06\u8fd9\u4e00\u884c\u6ce8\u91ca\u53bb\u6389 # web\u9875\u9762\u5730\u5740 dbms.connectors.default_listen_address = 0 .0.0.0 # HTTP Connector. There can be zero or one HTTP connectors. dbms.connector.http.enabled = true dbms.connector.http.listen_address = :7474 # \u5c06\u8fd9\u4e00\u884c\u6ce8\u91ca\u53bb\u6389 # HTTPS Connector. There can be zero or one HTTPS connectors. dbms.connector.https.enabled = true dbms.connector.https.listen_address = :7473 # \u5c06\u8fd9\u4e00\u884c\u6ce8\u91ca\u53bb\u6389 # Bolt \u8fde\u63a5\u5730\u5740 dbms.connector.bolt.enabled = true # dbms.connector.bolt.tls_level=OPTIONAL dbms.connector.bolt.listen_address = :7687 # \u5c06\u8fd9\u4e00\u884c\u6ce8\u91ca\u53bb\u6389 \u7b2c\u56db\u6b65\uff1a\u542f\u52a8neo4j\u6570\u636e\u5e93 # \u542f\u52a8\u547d\u4ee4 neo4j start # \u7ec8\u7aef\u663e\u793a\u5982\u4e0b\uff0c\u4ee3\u8868\u542f\u52a8\u6210\u529f Active database: graph.db Directories in use: home: /var/lib/neo4j config: /etc/neo4j logs: /var/log/neo4j plugins: /var/lib/neo4j/plugins import: /var/lib/neo4j/import data: /var/lib/neo4j/data certificates: /var/lib/neo4j/certificates run: /var/run/neo4j Starting Neo4j. WARNING: Max 1024 open files allowed, minimum of 40000 recommended. See the Neo4j manual. Started neo4j ( pid 2463 ) . It is available at http://localhost:7474/ There may be a short delay until the server is ready. See /var/log/neo4j/neo4j.log for current status.","title":"1 neo4j\u56fe\u6570\u636e\u5e93\u7684\u5b89\u88c5\u6d41\u7a0b"},{"location":"3.html#2-neo4j_1","text":"\u8bbf\u95ee\u5730\u5740\uff1a http://192.168.88.161:7474 ConnectURL: bolt://192.168.88.161:7687 Username: neo4j Password: neo4j (\u7b2c\u4e00\u6b21\u767b\u5f55)\uff0c\u865a\u62df\u673a\u4e2d\u5df2\u6539\u6210123456","title":"2 neo4j\u7684\u53ef\u89c6\u5316\u7ba1\u7406\u540e\u53f0\u767b\u9646"},{"location":"3.html#3","text":"\u5b66\u4e60\u4e86neo4j\u56fe\u6570\u636e\u5e93\u7684\u5b89\u88c5\u6d41\u7a0b\uff1a \u7b2c\u4e00\u6b65\uff1a\u5c06neo4j\u5b89\u88c5\u4fe1\u606f\u8f7d\u5165\u5230yum\u68c0\u7d22\u5217\u8868\u3002 \u7b2c\u4e8c\u6b65\uff1a\u4f7f\u7528yum install\u547d\u4ee4\u5b89\u88c5\u3002 \u7b2c\u4e09\u6b65\uff1a\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u5185\u5bb9 /etc/neo4j/neo4j.conf. \u7b2c\u56db\u6b65\uff1a\u542f\u52a8neo4j\u6570\u636e\u5e93\u3002 \u5b66\u4e60\u4e86neo4j\u7684\u53ef\u89c6\u5316\u7ba1\u7406\u540e\u53f0\u767b\u9646\uff1a \u8bbf\u95ee\u5730\u5740\uff1a http://192.168.88.161:7474 . ConnectURL: bolt://192.168.88.161:7687 Username: neo4j Password: neo4j (\u9ed8\u8ba4)","title":"3 \u5c0f\u8282\u603b\u7ed3"},{"location":"3.html#33-cypher","text":"\u5b66\u4e60\u76ee\u6807 \u4e86\u89e3Cypher\u7684\u57fa\u672c\u6982\u5ff5\u3002 \u638c\u63e1Cypher\u7684\u57fa\u672c\u547d\u4ee4\u548c\u8bed\u6cd5\u3002 Cypher\u7684\u57fa\u672c\u6982\u5ff5\uff1a Cypher\u662fneo4j\u56fe\u6570\u636e\u7684\u67e5\u8be2\u8bed\u8a00\uff0c\u7c7b\u4f3c\u4e8emysql\u6570\u636e\u5e93\u7684sql\u8bed\u53e5\uff0c\u4f46\u662f\u5b83\u5141\u8bb8\u5bf9\u56fe\u5f62\u8fdb\u884c\u5bcc\u6709\u8868\u73b0\u529b\u548c\u6709\u6548\u7684\u67e5\u8be2\u548c\u66f4\u65b0\u3002 Cypher\u7684\u57fa\u672c\u547d\u4ee4\u548c\u8bed\u6cd5\uff1a create\u547d\u4ee4 match\u547d\u4ee4 merge\u547d\u4ee4 relationship\u5173\u7cfb\u547d\u4ee4 where\u547d\u4ee4 delete\u547d\u4ee4 sort\u547d\u4ee4 \u5b57\u7b26\u4e32\u51fd\u6570 \u805a\u5408\u51fd\u6570 index\u7d22\u5f15\u547d\u4ee4","title":"3.3 Cypher\u4ecb\u7ecd\u4e0e\u4f7f\u7528"},{"location":"3.html#1-create","text":"\u521b\u5efa\u56fe\u6570\u636e\u4e2d\u7684\u8282\u70b9 \u6f14\u793a\uff1a # \u521b\u5efa\u547d\u4ee4\u683c\u5f0f\uff1a # \u6b64\u5904 create\u662f\u5173\u952e\u5b57 \uff0c\u521b\u5efa\u8282\u70b9\u540d\u79f0 node_name , \u8282\u70b9\u6807\u7b7e Node_Label , \u653e\u5728\u5c0f\u62ec\u53f7\u91cc\u9762 () # \u540e\u9762\u628a\u6240\u6709\u5c5e\u4e8e\u8282\u70b9\u6807\u7b7e\u7684\u5c5e\u6027\u653e\u5728\u5927\u62ec\u53f7 '{}' \u91cc\u9762\uff0c\u4f9d\u6b21\u5199\u51fa\u5c5e\u6027\u540d\u79f0\uff1a\u5c5e\u6027\u503c\uff0c\u4e0d\u540c\u5c5e\u6027\u7528\u9017\u53f7 ',' \u5206\u9694 # \u4f8b\u5982\u4e0b\u9762\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u8282\u70b9 e , \u8282\u70b9\u6807\u7b7e\u662f Employee , \u62e5\u6709 id , name , salary , deptnp\u56db\u4e2a\u5c5e\u6027 \uff1a CREATE ( e : Employee { id : 222 , name : 'Bob' , salary : 6000 , deptnp : 12 } ) \u6548\u679c","title":"1 create\u547d\u4ee4"},{"location":"3.html#2-match","text":"\u5339\u914d(\u67e5\u8be2)\u5df2\u6709\u6570\u636e \u6f14\u793a\uff1a # match\u547d\u4ee4\u4e13\u95e8\u7528\u6765\u5339\u914d\u67e5\u8be2 \uff0c\u8282\u70b9\u540d\u79f0\uff1a\u8282\u70b9\u6807\u7b7e\uff0c\u4f9d\u7136\u653e\u5728\u5c0f\u62ec\u53f7\u5185\uff0c\u7136\u540e\u4f7f\u7528 return\u8bed\u53e5\u8fd4\u56de\u67e5\u8be2\u7ed3\u679c \uff0c\u548c SQL\u5f88\u76f8\u4f3c \u3002 MATCH ( e : Employee ) RETURN e . id , e . name , e . salary , e . deptno MATCH ( n ) return n # \u67e5\u8be2\u6240\u6709\u7ed3\u70b9 \u6548\u679c\uff1a","title":"2 match\u547d\u4ee4"},{"location":"3.html#3-merge","text":"\u82e5\u8282\u70b9\u5b58\u5728\uff0c\u5219\u7b49\u6548\u4e0ematch\u547d\u4ee4; \u8282\u70b9\u4e0d\u5b58\u5728\uff0c\u5219\u7b49\u6548\u4e8ecreate\u547d\u4ee4\u3002 \u6f14\u793a\uff1a MERGE ( e : Employee { id : 146 , name : 'Lucer' , salary : 3500 , deptno : 16 } ) \u6548\u679c\uff1a \u7136\u540e\u518d\u6b21\u7528merge\u67e5\u8be2\uff0c\u53d1\u73b0\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u5e76\u6ca1\u6709\u589e\u52a0\uff0c\u56e0\u4e3a\u5df2\u7ecf\u5b58\u5728\u76f8\u540c\u7684\u6570\u636e\u4e86\uff0cmerge\u5339\u914d\u6210\u529f\u3002 \u6f14\u793a\uff1a MERGE (e:Employee {id:146, name:'Lucer', salary:3500, deptno:16}) \u6548\u679c\uff1a","title":"3 merge\u547d\u4ee4"},{"location":"3.html#4-create","text":"\u5fc5\u987b\u521b\u5efa\u6709\u65b9\u5411\u6027\u7684\u5173\u7cfb\uff0c\u5426\u5219\u62a5\u9519\u3002 \u6f14\u793a\uff1a # \u521b\u5efa\u4e00\u4e2a\u8282\u70b9 p1\u5230p2\u7684\u6709\u65b9\u5411\u5173\u7cfb \uff0c\u8fd9\u4e2a\u5173\u7cfb r\u7684\u6807\u7b7e\u4e3aBuy , \u4ee3\u8868 p1\u8d2d\u4e70\u4e86p2 , \u65b9\u5411\u4e3a p1\u6307\u5411p2 CREATE ( p1 : Profile1 ) - [ r : Buy ] -> ( p2 : Profile2 ) \u6548\u679c\uff1a","title":"4 \u4f7f\u7528create\u521b\u5efa\u5173\u7cfb"},{"location":"3.html#5-merge","text":"\u53ef\u4ee5\u521b\u5efa\u6709/\u65e0\u65b9\u5411\u6027\u7684\u5173\u7cfb\u3002 \u6f14\u793a\uff1a # \u521b\u5efa\u4e00\u4e2a\u8282\u70b9 p1\u5230p2\u7684\u65e0\u65b9\u5411\u5173\u7cfb \uff0c\u8fd9\u4e2a\u5173\u7cfb r\u7684\u6807\u7b7e\u4e3amiss , \u4ee3\u8868 p1 - miss - p2 , \u65b9\u5411\u4e3a\u76f8\u4e92\u7684 MERGE ( p1 : Profile1 ) - [ r : miss ] - ( p2 : Profile2 ) \u6548\u679c\uff1a","title":"5 \u4f7f\u7528merge\u521b\u5efa\u5173\u7cfb"},{"location":"3.html#6-where","text":"\u7c7b\u4f3c\u4e8eSQL\u4e2d\u7684\u6dfb\u52a0\u67e5\u8be2\u6761\u4ef6\u3002 \u6f14\u793a\uff1a # \u67e5\u8be2\u8282\u70b9 Employee\u4e2d \uff0c id\u503c\u7b49\u4e8e123\u7684\u90a3\u4e2a\u8282\u70b9 MATCH ( e : Employee ) WHERE e . id = 123 RETURN e \u6548\u679c\uff1a","title":"6 where\u547d\u4ee4"},{"location":"3.html#7-delete","text":"\u5220\u9664\u8282\u70b9/\u5173\u7cfb\u53ca\u5176\u5173\u8054\u7684\u5c5e\u6027\u3002 \u6f14\u793a\uff1a # \u6ce8\u610f\uff1a\u5220\u9664\u8282\u70b9\u7684\u540c\u65f6\uff0c\u4e5f\u8981\u5220\u9664\u5173\u8054\u7684\u5173\u7cfb\u8fb9 MATCH ( p1 : Profile1 ) - [ r ] - ( p2 : Profile2 ) DELETE p1 , r , p2 \u6548\u679c\uff1a","title":"7 delete\u547d\u4ee4"},{"location":"3.html#8-sort","text":"Cypher\u547d\u4ee4\u4e2d\u7684\u6392\u5e8f\u4f7f\u7528\u7684\u662forder by. \u6f14\u793a\uff1a # \u5339\u914d\u67e5\u8be2\u6807\u7b7e Employee , \u5c06\u6240\u6709\u5339\u914d\u7ed3\u679c\u6309\u7167 id\u503c\u5347\u5e8f\u6392\u5217\u540e\u8fd4\u56de\u7ed3\u679c MATCH ( e : Employee ) RETURN e . id , e . name , e . salary , e . deptno ORDER BY e . id # \u5982\u679c\u8981\u6309\u7167\u964d\u5e8f\u6392\u5e8f\uff0c\u53ea\u9700\u8981\u5c06 ORDER BY e . salary\u6539\u5199\u4e3aORDER BY e . salary DESC MATCH ( e : Employee ) RETURN e . id , e . name , e . salary , e . deptno ORDER BY e . salary DESC \u6548\u679c\uff1a","title":"8 sort\u547d\u4ee4"},{"location":"3.html#9","text":"toUpper()\u51fd\u6570 toLower()\u51fd\u6570 substring()\u51fd\u6570 replace()\u51fd\u6570","title":"9 \u5b57\u7b26\u4e32\u51fd\u6570\uff1a"},{"location":"3.html#1-toupper","text":"\u5c06\u4e00\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5927\u5199\u5b57\u6bcd\u3002 \u6f14\u793a\uff1a MATCH ( e : Employee ) RETURN e . id , toUpper ( e . name ), e . salary , e . deptno \u6548\u679c\uff1a","title":"1 toUpper()\u51fd\u6570"},{"location":"3.html#2-tolower","text":"\u5c06\u4e00\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002 \u6f14\u793a\uff1a MATCH ( e : Employee ) RETURN e . id , toLower ( e . name ), e . salary , e . deptno \u6548\u679c\uff1a","title":"2 toLower()\u51fd\u6570"},{"location":"3.html#3-substring","text":"\u8fd4\u56de\u4e00\u4e2a\u5b50\u5b57\u7b26\u4e32\u3002 \u6f14\u793a\uff1a # \u8f93\u5165\u5b57\u7b26\u4e32\u4e3a input_str , \u8fd4\u56de\u4ece\u7d22\u5f15 start_index\u5f00\u59cb \uff0c\u5230 end_index - 1 \u7ed3\u675f\u7684\u5b50\u5b57\u7b26\u4e32 substring ( input_str , start_index , end_index ) # \u793a\u4f8b\u4ee3\u7801\uff0c\u8fd4\u56de\u5458\u5de5\u540d\u5b57\u7684\u524d\u4e24\u4e2a\u5b57\u6bcd MATCH ( e : Employee ) RETURN e . id , substring ( e . name , 0 , 2 ), e . salary , e . deptno \u6548\u679c\uff1a","title":"3 substring()\u51fd\u6570"},{"location":"3.html#4-replace","text":"\u66ff\u6362\u6389\u5b50\u5b57\u7b26\u4e32\u3002 \u6f14\u793a\uff1a # \u8f93\u5165\u5b57\u7b26\u4e32\u4e3a input_str , \u5c06\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u7b26\u5408 origin_str\u7684\u90e8\u5206 \uff0c\u66ff\u6362\u6210 new_str replace ( input_str , origin_str , new_str ) # \u793a\u4f8b\u4ee3\u7801\uff0c\u5c06\u5458\u5de5\u540d\u5b57\u66ff\u6362\u4e3a\u6dfb\u52a0\u540e\u7f00 _HelloWorld MATCH ( e : Employee ) RETURN e . id , replace ( e . name , e . name , e . name + \"_HelloWorld\" ), e . salary , e . deptno # \u8fd8\u539f MATCH ( e : Employee ) RETURN e . id , replace ( e . name , \"_HelloWorld\" , \"\" ), e . salary , e . deptno \u6548\u679c\uff1a","title":"4 replace()\u51fd\u6570"},{"location":"3.html#10","text":"count()\u51fd\u6570 max()\u51fd\u6570 min()\u51fd\u6570 sum()\u51fd\u6570 avg()\u51fd\u6570","title":"10 \u805a\u5408\u51fd\u6570"},{"location":"3.html#1-count","text":"\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u6761\u6570\u3002 \u6f14\u793a\uff1a # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2a\u6570 MATCH ( e : Employee ) RETURN count ( * ) \u6548\u679c\uff1a","title":"1 count()\u51fd\u6570"},{"location":"3.html#2-max","text":"\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u7684\u6700\u5927\u503c\u3002 \u6f14\u793a\uff1a # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2d \uff0c\u6700\u9ad8\u7684\u5de5\u8d44\u6570\u5b57 MATCH ( e : Employee ) RETURN max ( e . salary ) \u6548\u679c\uff1a","title":"2 max()\u51fd\u6570"},{"location":"3.html#3-min","text":"\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u7684\u6700\u5c0f\u503c\u3002 \u6f14\u793a\uff1a # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2d \uff0c\u6700\u4f4e\u7684\u5de5\u8d44\u6570\u5b57 MATCH ( e : Employee ) RETURN min ( e . salary ) \u6548\u679c\uff1a","title":"3 min()\u51fd\u6570"},{"location":"3.html#4-sum","text":"\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u67d0\u5b57\u6bb5\u7684\u5168\u90e8\u52a0\u548c\u503c\u3002 \u6f14\u793a\uff1a # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2d \uff0c\u6240\u6709\u5458\u5de5\u5de5\u8d44\u7684\u548c MATCH ( e : Employee ) RETURN sum ( e . salary ) \u6548\u679c\uff1a","title":"4 sum()\u51fd\u6570"},{"location":"3.html#5-avg","text":"\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u67d0\u5b57\u6bb5\u7684\u5e73\u5747\u503c\u3002 \u6f14\u793a\uff1a # \u8fd4\u56de\u5339\u914d\u6807\u7b7e Employee\u6210\u529f\u7684\u8bb0\u5f55\u4e2d \uff0c\u6240\u6709\u5458\u5de5\u5de5\u8d44\u7684\u5e73\u5747\u503c MATCH ( e : Employee ) RETURN avg ( e . salary ) \u6548\u679c\uff1a","title":"5 avg()\u51fd\u6570"},{"location":"3.html#11-index","text":"Neo4j\u652f\u6301\u5728\u8282\u70b9\u6216\u5173\u7cfb\u5c5e\u6027\u4e0a\u7684\u7d22\u5f15\uff0c\u4ee5\u63d0\u9ad8\u67e5\u8be2\u7684\u6027\u80fd\u3002 \u53ef\u4ee5\u4e3a\u5177\u6709\u76f8\u540c\u6807\u7b7e\u540d\u79f0\u7684\u6240\u6709\u8282\u70b9\u7684\u5c5e\u6027\u521b\u5efa\u7d22\u5f15\u3002","title":"11 \u7d22\u5f15index"},{"location":"3.html#1","text":"\u4f7f\u7528create index on\u6765\u521b\u5efa\u7d22\u5f15\u3002 \u6f14\u793a\uff1a # \u521b\u5efa\u8282\u70b9 Employee\u4e0a\u9762\u5c5e\u6027id\u7684\u7d22\u5f15 CREATE INDEX ON : Employee ( id ) \u6548\u679c\uff1a","title":"1 \u521b\u5efa\u7d22\u5f15"},{"location":"3.html#2","text":"\u4f7f\u7528drop index on\u6765\u5220\u9664\u7d22\u5f15\u3002 \u6f14\u793a\uff1a # \u5220\u9664\u8282\u70b9 Employee\u4e0a\u9762\u5c5e\u6027id\u7684\u7d22\u5f15 DROP INDEX ON : Employee ( id ) \u6548\u679c\uff1a","title":"2 \u5220\u9664\u7d22\u5f15"},{"location":"3.html#12","text":"\u5b66\u4e60\u4e86Cypher\u7684\u57fa\u672c\u6982\u5ff5\uff1a Cypher\u662fneo4j\u56fe\u6570\u636e\u7684\u67e5\u8be2\u8bed\u8a00\uff0c\u7c7b\u4f3c\u4e8emysql\u6570\u636e\u5e93\u7684sql\u8bed\u53e5\uff0c\u4f46\u662f\u5b83\u5141\u8bb8\u5bf9\u56fe\u5f62\u8fdb\u884c\u5bcc\u6709\u8868\u73b0\u529b\u548c\u6709\u6548\u7684\u67e5\u8be2\u548c\u66f4\u65b0\u3002 Cypher\u7684\u57fa\u672c\u547d\u4ee4\u548c\u8bed\u6cd5\uff1a create\u547d\u4ee4\uff1a\u521b\u5efa\u56fe\u6570\u636e\u4e2d\u7684\u8282\u70b9\u3002 CREATE (e:Employee{id:222, name:'Bob', salary:6000, deptnp:12}) match\u547d\u4ee4\uff1a\u5339\u914d(\u67e5\u8be2)\u5df2\u6709\u6570\u636e\u3002 MATCH (e:Employee) RETURN e.id, e.name, e.salary, e.deptno merge\u547d\u4ee4\uff1a\u82e5\u8282\u70b9\u5b58\u5728\uff0c\u5219\u7b49\u6548\u4e0ematch\u547d\u4ee4; \u8282\u70b9\u4e0d\u5b58\u5728\uff0c\u5219\u7b49\u6548\u4e8ecreate\u547d\u4ee4\u3002 MERGE (e:Employee {id:145, name:'Lucy', salary:7500, deptno:12}) \u4f7f\u7528create\u521b\u5efa\u5173\u7cfb\uff1a\u5fc5\u987b\u521b\u5efa\u6709\u65b9\u5411\u6027\u7684\u5173\u7cfb\uff0c\u5426\u5219\u62a5\u9519\u3002 CREATE (p1:Profile1)-[r:Buy]->(p2:Profile2) \u4f7f\u7528merge\u521b\u5efa\u5173\u7cfb\uff1a\u53ef\u4ee5\u521b\u5efa\u6709/\u65e0\u65b9\u5411\u6027\u7684\u5173\u7cfb\u3002 MERGE (p1:Profile1)-[r:miss]-(p2:Profile2) where\u547d\u4ee4\uff1a\u7c7b\u4f3c\u4e8eSQL\u4e2d\u7684\u6dfb\u52a0\u67e5\u8be2\u6761\u4ef6\u3002 MATCH (e:Employee) WHERE e.id=123 RETURN e delete\u547d\u4ee4\uff1a\u5220\u9664\u8282\u70b9/\u5173\u7cfb\u53ca\u5176\u5173\u8054\u7684\u5c5e\u6027\u3002 MATCH (c1:CreditCard)-[r]-(c2:Customer) DELETE c1, r, c2 sort\u547d\u4ee4\uff1aCypher\u547d\u4ee4\u4e2d\u7684\u6392\u5e8f\u4f7f\u7528\u7684\u662forder by. MATCH (e:Employee) RETURN e.id, e.name, e.salary, e.deptno ORDER BY e.id toUpper()\u51fd\u6570\uff1a\u5c06\u4e00\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5927\u5199\u5b57\u6bcd\u3002 MATCH (e:Employee) RETURN e.id, toUpper(e.name), e.salary, e.deptno toLower()\u51fd\u6570\uff1a\u8bb2\u4e00\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002 MATCH (e:Employee) RETURN e.id, toLower(e.name), e.salary, e.deptno substring()\u51fd\u6570\uff1a\u8fd4\u56de\u4e00\u4e2a\u5b50\u5b57\u7b26\u4e32\u3002 MATCH (e:Employee) RETURN e.id, substring(e.name,0,2), e.salary, e.deptno replace()\u51fd\u6570\uff1a\u66ff\u6362\u6389\u5b50\u5b57\u7b26\u4e32\u3002 MATCH (e:Employee) RETURN e.id, replace(e.name,e.name,e.name + \"_HelloWorld\"), e.salary, e.deptno count()\u51fd\u6570\uff1a\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u6761\u6570\u3002 MATCH (e:Employee) RETURN count( * ) max()\u51fd\u6570\uff1a\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u7684\u6700\u5927\u503c\u3002 MATCH (e:Employee) RETURN max(e.salary) min()\u51fd\u6570\uff1a\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u7684\u6700\u5c0f\u503c\u3002 MATCH (e:Employee) RETURN min(e.salary) sum()\u51fd\u6570\uff1a\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u67d0\u5b57\u6bb5\u7684\u5168\u90e8\u52a0\u548c\u503c\u3002 MATCH (e:Employee) RETURN sum(e.salary) avg()\u51fd\u6570\uff1a\u8fd4\u56de\u7531match\u547d\u4ee4\u5339\u914d\u6210\u529f\u7684\u8bb0\u5f55\u4e2d\u67d0\u5b57\u6bb5\u7684\u5e73\u5747\u503c\u3002 MATCH (e:Employee) RETURN avg(e.salary) \u7d22\u5f15index Neo4j\u652f\u6301\u5728\u8282\u70b9\u6216\u5173\u7cfb\u5c5e\u6027\u4e0a\u7684\u7d22\u5f15\uff0c\u4ee5\u63d0\u9ad8\u67e5\u8be2\u7684\u6027\u80fd\u3002 \u53ef\u4ee5\u4e3a\u5177\u6709\u76f8\u540c\u6807\u7b7e\u540d\u79f0\u7684\u6240\u6709\u8282\u70b9\u7684\u5c5e\u6027\u521b\u5efa\u7d22\u5f15\u3002 \u521b\u5efa\u7d22\u5f15\uff1a\u4f7f\u7528create index on\u6765\u521b\u5efa\u7d22\u5f15\u3002 CREATE INDEX ON:Employee(id) \u5220\u9664\u7d22\u5f15\uff1a\u4f7f\u7528drop index on\u6765\u5220\u9664\u7d22\u5f15\u3002 DROP INDEX ON:Employee(id)","title":"12 \u5c0f\u8282\u603b\u7ed3"},{"location":"3.html#34-pythonneo4j","text":"\u5b66\u4e60\u76ee\u6807 \u4e86\u89e3python\u4e2dneo4j-driver\u7684\u76f8\u5173\u77e5\u8bc6\u3002 \u638c\u63e1neo4j\u4e2d\u4e8b\u52a1\u6982\u5ff5\u548c\u64cd\u4f5c\u65b9\u6cd5\u3002","title":"3.4 \u5728Python\u4e2d\u4f7f\u7528neo4j"},{"location":"3.html#1-neo4j-driver","text":"neo4j-driver\u662f\u4e00\u4e2apython\u4e2d\u7684package, \u4f5c\u4e3apython\u4e2dneo4j\u7684\u9a71\u52a8\uff0c\u5e2e\u52a9\u6211\u4eec\u5728python\u7a0b\u5e8f\u4e2d\u66f4\u597d\u7684\u4f7f\u7528\u56fe\u6570\u636e\u5e93\u3002 neo4j-driver\u7684\u5b89\u88c5\uff1a pip install neo4j-driver neo4j-driver\u4f7f\u7528\u6f14\u793a\uff1a from neo4j import GraphDatabase # uri = \"neo4j://192.168.88.161:7687\" # 4.x\u7248\u672c\u7528\u8fd9\u4e2a uri = \"bolt://192.168.88.161:7687\" # 3.x\u7248\u672c\u7528\u8fd9\u4e2a driver = GraphDatabase . driver ( uri , auth = ( \"neo4j\" , \"123456\" ), max_connection_lifetime = 1000 ) # \u76f4\u63a5\u7528python\u4ee3\u7801\u5f62\u5f0f\u8bbf\u95ee\u8282\u70b9Company, \u5e76\u8fd4\u56de\u6240\u6709\u8282\u70b9\u4fe1\u606f with driver . session () as session : cypher = \"CREATE(c:Company) SET c.name='\u9ed1\u9a6c\u7a0b\u5e8f\u5458' RETURN c.name\" record = session . run ( cypher ) result = list ( map ( lambda x : x [ 0 ], record )) print ( \"result:\" , result ) \u8f93\u51fa\u6548\u679c\uff1a result: \u9ed1\u9a6c\u7a0b\u5e8f\u5458","title":"1 neo4j-driver\u7b80\u4ecb\uff1a"},{"location":"3.html#2_1","text":"\u5982\u679c\u4e00\u7ec4\u6570\u636e\u5e93\u64cd\u4f5c\u8981\u4e48\u5168\u90e8\u53d1\u751f\u8981\u4e48\u4e00\u6b65\u4e5f\u4e0d\u6267\u884c\uff0c\u6211\u4eec\u79f0\u8be5\u7ec4\u5904\u7406\u6b65\u9aa4\u4e3a\u4e00\u4e2a\u4e8b\u52a1\uff0c\u5b83\u662f\u6570\u636e\u5e93\u4e00\u81f4\u6027\u7684\u4fdd\u8bc1\u3002 \u4f7f\u7528\u4e8b\u52a1\u7684\u6f14\u793a\uff1a # \u4e0b\u9762\u53ef\u4ee5\u6b63\u5e38\u6267\u884c def _some_operations ( sess , cat_name , mouse_name ): sess . run ( \"MERGE (a:Cat{name: $cat_name})\" \"MERGE (b:Mouse{name: $mouse_name})\" \"MERGE (a)-[r:And]-(b)\" , cat_name = cat_name , mouse_name = mouse_name ) with driver . session () as session : session . write_transaction ( _some_operations , \"Tom\" , \"Jerry\" ) # \u4e0b\u9762\u6267\u884c\u65f6\u62a5\u9519 def _some_operations ( sess , cat_name , mouse_name ): sess . run ( \"MERGE (a:Cat{name: $cat_name})\" \"MERGE (b:Mouse{name: $mouse_name})\" \"CREATE (a)-[r:And]-(b)\" , cat_name = cat_name , mouse_name = mouse_name ) with driver . session () as session : session . write_transaction ( _some_operations , \"Tom1\" , \"Jerry1\" ) \u8f93\u51fa\u6548\u679c\uff1a","title":"2 \u4e8b\u52a1\u7684\u6982\u5ff5"},{"location":"3.html#3_1","text":"\u5b66\u4e60\u4e86neo4j-driver\u7b80\u4ecb\uff1a neo4j-driver\u662f\u4e00\u4e2apython\u4e2d\u7684package, \u4f5c\u4e3apython\u4e2dneo4j\u7684\u9a71\u52a8\uff0c\u5e2e\u52a9\u6211\u4eec\u5728python\u7a0b\u5e8f\u4e2d\u66f4\u597d\u7684\u4f7f\u7528\u56fe\u6570\u636e\u5e93\u3002 \u5b66\u4e60\u4e86neo4j-driver\u7684\u5b89\u88c5\u548c\u4f7f\u7528\u65b9\u6cd5\u3002 \u5b66\u4e60\u4e86\u4e8b\u52a1\u7684\u6982\u5ff5\uff1a \u5982\u679c\u4e00\u7ec4\u6570\u636e\u5e93\u64cd\u4f5c\u8981\u4e48\u5168\u90e8\u53d1\u751f\u8981\u4e48\u4e00\u6b65\u4e5f\u4e0d\u6267\u884c\uff0c\u6211\u4eec\u79f0\u8be5\u7ec4\u5904\u7406\u6b65\u9aa4\u4e3a\u4e00\u4e2a\u4e8b\u52a1\uff0c\u5b83\u662f\u6570\u636e\u5e93\u4e00\u81f4\u6027\u7684\u4fdd\u8bc1\u3002 \u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528\u4e8b\u52a1\u6765\u5411\u56fe\u6570\u636e\u5e93\u4e2d\u5199\u5165\u6570\u636e\u3002","title":"3 \u5c0f\u8282\u603b\u7ed3"},{"location":"4.html","text":"4.1 \u79bb\u7ebf\u90e8\u5206\u7b80\u8981\u5206\u6790 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u79bb\u7ebf\u90e8\u5206\u7684\u6570\u636e\u6d41\u6c34\u7ebf\u4ee5\u53ca\u7ec4\u6210\u90e8\u5206\u3002 \u4e86\u89e3\u5404\u4e2a\u7ec4\u6210\u90e8\u5206\u7684\u4f5c\u7528\u3002 \u79bb\u7ebf\u90e8\u5206\u67b6\u6784\u56fe\uff1a \u79bb\u7ebf\u90e8\u5206\u67b6\u6784\u5c55\u5f00\u56fe\uff1a \u79bb\u7ebf\u90e8\u5206\u7b80\u8981\u5206\u6790\uff1a \u6839\u636e\u67b6\u6784\u5c55\u5f00\u56fe\u56fe\uff0c\u79bb\u7ebf\u90e8\u5206\u53ef\u5206\u4e3a\u4e24\u6761\u6570\u636e\u6d41\u6c34\u7ebf\uff0c\u5206\u522b\u7528\u4e8e\u5904\u7406\u7ed3\u6784\u5316\u6570\u636e\u548c\u975e\u7ed3\u6784\u5316\u6570\u636e\u3002\u8fd9\u91cc\u79f0\u5b83\u4eec\u4e3a\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u548c\u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u3002 \u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u7684\u7ec4\u6210\u90e8\u5206\uff1a \u7ed3\u6784\u5316\u6570\u636e\u722c\u866b\uff1a\u4ece\u7f51\u9875\u4e0a\u6293\u53d6\u7ed3\u6784\u5316\u7684\u6709\u5173\u533b\u5b66\u547d\u540d\u5b9e\u4f53\u7684\u5185\u5bb9\u3002 \u7ed3\u6784\u5316\u6570\u636e\u7684\u6e05\u6d17\uff1a\u5bf9\u6293\u53d6\u7684\u5185\u5bb9\u8fdb\u884c\u8fc7\u6ee4\u548c\u6e05\u6d17\uff0c\u4ee5\u4fdd\u7559\u9700\u8981\u7684\u90e8\u5206\u3002 \u547d\u540d\u5b9e\u4f53\u5ba1\u6838\uff1a\u5bf9\u5f53\u524d\u547d\u540d\u5b9e\u4f53\u8fdb\u884c\u5ba1\u6838\uff0c\u6765\u4fdd\u8bc1\u8fd9\u4e9b\u5b9e\u4f53\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\u3002 \u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\uff1a\u5c06\u5ba1\u6838\u540e\u7684\u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\u4e4b\u4e2d\uff0c\u4f9b\u5728\u7ebf\u90e8\u5206\u4f7f\u7528\u3002 \u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u7684\u7ec4\u6210\u90e8\u5206\uff1a \u975e\u7ed3\u6784\u5316\u6570\u636e\u722c\u866b\uff1a\u4ece\u7f51\u9875\u4e0a\u6293\u53d6\u975e\u7ed3\u6784\u5316\u7684\u5305\u542b\u533b\u5b66\u547d\u540d\u5b9e\u4f53\u7684\u6587\u672c\u3002 \u975e\u7ed3\u6784\u5316\u6570\u636e\u6e05\u6d17\uff1a\u5bf9\u975e\u7ed3\u6784\u5316\u6570\u636e\u8fdb\u884c\u8fc7\u6ee4\u548c\u6e05\u6d17\uff0c\u4ee5\u4fdd\u7559\u9700\u8981\u7684\u90e8\u5206\u3002 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff1a\u4f7f\u7528\u6a21\u578b\u4ece\u975e\u7ed3\u6784\u5316\u6587\u672c\u4e2d\u83b7\u53d6\u547d\u540d\u5b9e\u4f53\u3002 \u547d\u540d\u5b9e\u4f53\u5ba1\u6838\uff1a\u5bf9\u5f53\u524d\u547d\u540d\u5b9e\u4f53\u8fdb\u884c\u5ba1\u6838\uff0c\u6765\u4fdd\u8bc1\u8fd9\u4e9b\u5b9e\u4f53\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\u3002 \u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\uff1a\u5c06\u5ba1\u6838\u540e\u7684\u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\u4e4b\u4e2d\uff0c\u4f9b\u5728\u7ebf\u90e8\u5206\u4f7f\u7528\u3002 \u8bf4\u660e\uff1a \u56e0\u4e3a\u672c\u9879\u76ee\u662f\u4ee5AI\u4e3a\u6838\u5fc3\u7684\u9879\u76ee\uff0c\u56e0\u6b64\u7ed3\u6784\u5316\u4e0e\u975e\u7ed3\u6784\u5316\u7684\u6570\u636e\u722c\u866b\u548c\u6e05\u6d17\u90e8\u5206\u7684\u5185\u5bb9\u8fd9\u91cc\u4e0d\u505a\u4ecb\u7ecd\uff0c\u4f46\u540c\u5b66\u4eec\u8981\u77e5\u9053\u6211\u4eec\u7684\u6570\u636e\u6765\u6e90\u3002 4.2 \u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u9700\u8981\u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u7684\u6570\u636e\u5185\u5bb9\u3002 \u638c\u63e1\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u7684\u8fc7\u7a0b\u3002 \u638c\u63e1\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u547d\u540d\u5b9e\u4f53\u5199\u5165\u7684\u8fc7\u7a0b\u3002 \u9700\u8981\u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u7684\u6570\u636e\u5185\u5bb9\uff1a ... \u8e1d\u90e8\u6025\u6027\u97e7\u5e26\u635f\u4f24.csv \u8e1d\u90e8\u626d\u4f24.csv \u8e1d\u90e8\u9aa8\u6298.csv \u8e44\u94c1\u5f62\u80be.csv \u8e81\u72c2\u6291\u90c1\u75c7.csv \u8e81\u72c2\u75c7.csv \u8e81\u90c1\u75c7.csv \u8eaf\u4f53\u5f62\u5f0f\u969c\u788d.csv \u8eaf\u4f53\u611f\u67d3\u4f34\u53d1\u7684\u7cbe\u795e\u969c\u788d.csv \u8eaf\u4f53\u611f\u67d3\u6240\u81f4\u7cbe\u795e\u969c\u788d.csv \u8eaf\u4f53\u611f\u89c9\u969c\u788d.csv \u8eaf\u4f53\u75be\u75c5\u4f34\u53d1\u7684\u7cbe\u795e\u969c\u788d.csv \u8f6c\u6362\u6027\u969c\u788d.csv \u8f6c\u79fb\u6027\u5c0f\u80a0\u80bf\u7624.csv \u8f6c\u79fb\u6027\u76ae\u80a4\u9499\u5316\u75c5.csv \u8f6c\u79fb\u6027\u809d\u764c.csv \u8f6c\u79fb\u6027\u80f8\u819c\u80bf\u7624.csv \u8f6c\u79fb\u6027\u9aa8\u80bf\u7624.csv \u8f6e\u72b6\u75c5\u6bd2\u6027\u80a0\u708e.csv \u8f6e\u72b6\u75c5\u6bd2\u6240\u81f4\u80c3\u80a0\u708e.csv ... \u6bcf\u4e2acsv\u6587\u4ef6\u7684\u540d\u5b57\u90fd\u662f\u4e00\u79cd\u75be\u75c5\u540d\u3002 \u6587\u4ef6\u4f4d\u7f6e\uff1a/data/doctor_offline/structured/noreview/ \u4ee5\u8e81\u72c2\u75c7.csv\u4e3a\u4f8b\uff0c\u6709\u5982\u4e0b\u5185\u5bb9\uff1a \u8e81\u90c1\u6837 \u8e81\u72c2 \u884c\u4e3a\u53ca\u60c5\u7eea\u5f02\u5e38 \u5fc3\u5883\u9ad8\u6da8 \u60c5\u7eea\u8d77\u4f0f\u5927 \u6280\u672f\u72c2\u8e81\u75c7 \u653b\u51fb\u884c\u4e3a \u6613\u6fc0\u60f9 \u601d\u7ef4\u5954\u9038 \u63a7\u5236\u4e0d\u4f4f\u7684\u8054\u60f3 \u7cbe\u795e\u8fd0\u52a8\u6027\u5174\u594b csv\u6587\u4ef6\u7684\u5185\u5bb9\u662f\u8be5\u75be\u75c5\u5bf9\u5e94\u7684\u75c7\u72b6\uff0c\u6bcf\u79cd\u75c7\u72b6\u5360\u4e00\u884c\u3002 \u6587\u4ef6\u4f4d\u7f6e\uff1a/data/doctor_offline/structured/noreview/\u8e81\u72c2\u75c7.csv \u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\uff1a \u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u7684\u5de5\u4f5c\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528AI\u6a21\u578b\u5b9e\u73b0\uff0c\u5305\u62ec\u8bad\u7ec3\u6570\u636e\u96c6\uff0c\u6a21\u578b\u8bad\u7ec3\u548c\u4f7f\u7528\u7684\u6574\u4e2a\u8fc7\u7a0b\uff0c\u56e0\u6b64\u8fd9\u91cc\u5185\u5bb9\u4ee5\u72ec\u7acb\u4e00\u7ae0\u7684\u5f62\u6210\u5448\u73b0\u7ed9\u5927\u5bb6\uff0c\u5177\u4f53\u53c2\u89c1 \u7b2c\u4e94\u7ae0\uff1a\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u4efb\u52a1 . \u5220\u9664\u5ba1\u6838\u540e\u7684\u53ef\u80fd\u5b58\u5728\u7684\u7a7a\u6587\u4ef6\uff1a # Linux \u547d\u4ee4-- \u5220\u9664\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u7684\u7a7a\u6587\u4ef6 find ./ -name \"*\" -type f -size 0c | xargs -n 1 rm -f \u4ee3\u7801\u4f4d\u7f6e\uff1a\u5728/data/doctor_offline/structured/reviewed/\u76ee\u5f55\u4e0b\u6267\u884c\u3002 \u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\uff1a \u5c06\u547d\u540d\u5b9e\u4f53\u5199\u5165\u56fe\u6570\u636e\u5e93\u7684\u539f\u56e0\uff1a \u5199\u5165\u7684\u6570\u636e\u4f9b\u5728\u7ebf\u90e8\u5206\u8fdb\u884c\u67e5\u8be2\uff0c\u6839\u636e\u7528\u6237\u8f93\u5165\u75c7\u72b6\u6765\u5339\u914d\u5bf9\u5e94\u75be\u75c5\u3002 \u5c06\u547d\u540d\u5b9e\u4f53\u5199\u5165\u56fe\u6570\u636e\u5e93\u4ee3\u7801\uff1a # \u5f15\u5165\u76f8\u5173\u5305 import os import fileinput from neo4j import GraphDatabase from config import NEO4J_CONFIG driver = GraphDatabase . driver ( ** NEO4J_CONFIG ) def _load_data ( path ): \"\"\" description: \u5c06path\u76ee\u5f55\u4e0b\u7684csv\u6587\u4ef6\u4ee5\u6307\u5b9a\u683c\u5f0f\u52a0\u8f7d\u5230\u5185\u5b58 :param path: \u5ba1\u6838\u540e\u7684\u75be\u75c5\u5bf9\u5e94\u75c7\u72b6\u7684csv\u6587\u4ef6 :return: \u8fd4\u56de\u75be\u75c5\u5b57\u5178\uff0c\u5b58\u50a8\u5404\u4e2a\u75be\u75c5\u4ee5\u53ca\u4e0e\u4e4b\u5bf9\u5e94\u7684\u75c7\u72b6\u7684\u5b57\u5178 {\u75be\u75c51: [\u75c7\u72b61, \u75c7\u72b62, ...], \u75be\u75c52: [\u75c7\u72b61, \u75c7\u72b62, ...] \"\"\" # \u83b7\u5f97\u75be\u75c5csv\u5217\u8868 disease_csv_list = os . listdir ( path ) # \u5c06\u540e\u7f00.csv\u53bb\u6389\uff0c\u83b7\u5f97\u75be\u75c5\u5217\u8868 disease_list = list ( map ( lambda x : x . split ( \".\" )[ 0 ], disease_csv_list )) # \u521d\u59cb\u5316\u4e00\u4e2a\u75c7\u72b6\u5217\u8868\uff0c\u5b83\u91cc\u9762\u662f\u6bcf\u79cd\u75be\u75c5\u5bf9\u5e94\u7684\u75c7\u72b6\u5217\u8868 symptom_list = [] # \u904d\u5386\u75be\u75c5csv\u5217\u8868 for disease_csv in disease_csv_list : # \u5c06\u75be\u75c5csv\u4e2d\u7684\u6bcf\u4e2a\u75c7\u72b6\u53d6\u51fa\u5b58\u5165symptom\u5217\u8868\u4e2d symptom = list ( map ( lambda x : x . strip (), fileinput . FileInput ( os . path . join ( path , disease_csv )))) # \u8fc7\u6ee4\u6389\u6240\u6709\u957f\u5ea6\u5f02\u5e38\u7684\u75c7\u72b6\u540d symptom = list ( filter ( lambda x : 0 < len ( x ) < 100 , symptom )) symptom_list . append ( symptom ) # \u8fd4\u56de\u6307\u5b9a\u683c\u5f0f\u7684\u6570\u636e return dict ( zip ( disease_list , symptom_list )) def write ( path ): \"\"\" description: \u5c06csv\u6570\u636e\u5199\u5165\u5230neo4j, \u5e76\u5f62\u6210\u56fe\u8c31 :param path: \u6570\u636e\u6587\u4ef6\u8def\u5f84 \"\"\" # \u4f7f\u7528_load_data\u4ece\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6570\u636e disease_symptom_dict = _load_data ( path ) # \u5f00\u542f\u4e00\u4e2aneo4j\u7684session with driver . session () as session : for key , value in disease_symptom_dict . items (): cypher = \"MERGE (a:Disease{name: %r }) RETURN a\" % key session . run ( cypher ) for v in value : cypher = \"MERGE (b:Symptom{name: %r }) RETURN b\" % v session . run ( cypher ) cypher = \"MATCH (a:Disease{name: %r }) MATCH (b:Symptom{name: %r }) \\ WITH a,b MERGE(a)-[r:dis_to_sym]-(b)\" % ( key , v ) session . run ( cypher ) cypher = \"CREATE INDEX ON:Disease(name)\" session . run ( cypher ) cypher = \"CREATE INDEX ON:Symptom(name)\" session . run ( cypher ) \u8c03\u7528\uff1a # \u8f93\u5165\u53c2\u6570path\u4e3acsv\u6570\u636e\u6240\u5728\u8def\u5f84 path = \"/data/doctor_offline/structured/reviewed/\" write(path) \u8f93\u51fa\u6548\u679c\uff1a \u901a\u8fc7\u53ef\u89c6\u5316\u7ba1\u7406\u540e\u53f0\u67e5\u770b\u5199\u5165\u6548\u679c\u3002 4.3 \u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u9700\u8981\u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u6570\u636e\u5185\u5bb9\u3002 \u638c\u63e1\u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u8fc7\u7a0b\u3002 \u638c\u63e1\u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u7684\u8fc7\u7a0b\u3002 \u638c\u63e1\u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u547d\u540d\u5b9e\u4f53\u5199\u5165\u7684\u8fc7\u7a0b\u3002 \u9700\u8981\u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u6570\u636e\u5185\u5bb9\uff1a ... \u9ebb\u75b9\u6837\u7ea2\u6591\u578b\u836f\u75b9.txt \u9ebb\u75b9\u75c5\u6bd2\u80ba\u708e.txt \u9ebb\u75f9\u6027\u81c2\u4e1b\u795e\u7ecf\u708e.txt \u9ebb\u98ce\u6027\u5468\u56f4\u795e\u7ecf\u75c5.txt \u9ebb\u98ce\u6027\u8461\u8404\u819c\u708e.txt \u9ec4\u4f53\u56ca\u80bf.txt \u9ec4\u6591\u56ca\u6837\u6c34\u80bf.txt \u9ec4\u6591\u88c2\u5b54\u6027\u89c6\u7f51\u819c\u8131\u79bb.txt \u9ec4\u97e7\u5e26\u9aa8\u5316\u75c7.txt \u9ecf\u591a\u7cd6\u8d2e\u79ef\u75c7.txt \u9ecf\u591a\u7cd6\u8d2e\u79ef\u75c7\u2160\u578b.txt \u9ecf\u591a\u7cd6\u8d2e\u79ef\u75c7\u2161\u578b.txt \u9ecf\u591a\u7cd6\u8d2e\u79ef\u75c7\u2165\u578b.txt \u9ecf\u591a\u7cd6\u8d2e\u79ef\u75c7\u2162\u578b.txt \u9ecf\u591a\u7cd6\u8d2e\u79ef\u75c7\u2166\u578b.txt \u9ed1\u8272\u4e18\u75b9\u6027\u76ae\u80a4\u75c5.txt ... \u6bcf\u4e2atxt\u6587\u4ef6\u7684\u540d\u5b57\u90fd\u662f\u4e00\u79cd\u75be\u75c5\u540d\u3002 \u6587\u4ef6\u4f4d\u7f6e\uff1a/data/doctor_offline/unstructured/norecognite/ \u4ee5\u9ed1\u8272\u4e18\u75b9\u6027\u76ae\u80a4\u75c5.txt\u4e3a\u4f8b\uff0c\u6709\u5982\u4e0b\u5185\u5bb9\uff1a \u521d\u5448\u5fae\u5c0f\u3001\u5706\u5f62\u3001\u76ae\u80a4\u8272\u6216\u9ed1\u8272\u589e\u6df1\u7684\u4e18\u75b9\uff0c\u5355\u4e2a\u6216\u5c11\u6570\u53d1\u751f\u4e8e\u988c\u90e8\u6216\u988a\u90e8\uff0c\u76ae\u635f\u9010\u6e10\u589e\u5927\u589e\u591a\uff0c\u6570\u5e74\u4e2d\u53ef\u8fbe\u6570\u767e\uff0c\u9664\u7736\u5468\u5916\u5c1a\u5206\u5e03\u4e8e\u9762\u90e8\u3001\u9888\u90e8\u548c\u80f8\u4e0a\u90e8\u3002\u76ae\u635f\u5927\u5c0f\u5f62\u72b6\u9177\u4f3c\u8102\u6ea2\u6027\u89d2\u5316\u75c5\u53ca\u6241\u5e73\u75a3\u9d92\u3002\u4e0d\u53d1\u751f\u9cde\u5c51\uff0c\u7ed3\u75c2\u548c\u6e83\u75a1\uff0c\u4ea6\u65e0\u7619\u75d2\u53ca\u5176\u4ed6\u4e3b\u89c2\u75c7\u72b6 txt\u4e2d\u662f\u5bf9\u8be5\u75be\u75c5\u75c7\u72b6\u7684\u6587\u672c\u63cf\u8ff0\u3002 \u6587\u4ef6\u4f4d\u7f6e\uff1a/data/doctor_offline/unstructured/norecognite/\u9ed1\u8272\u4e18\u75b9\u6027\u76ae\u80a4\u75c5.txt \u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff1a \u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u5de5\u4f5c\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528AI\u6a21\u578b\u5b9e\u73b0\uff0c\u5305\u62ec\u6a21\u578b\u8bad\u7ec3\u548c\u4f7f\u7528\u7684\u6574\u4e2a\u8fc7\u7a0b\uff0c\u56e0\u6b64\u5185\u5bb9\u4ee5\u72ec\u7acb\u4e00\u7ae0\u7684\u5f62\u6210\u5448\u73b0\u7ed9\u5927\u5bb6\uff0c\u5177\u4f53\u5185\u5bb9\u5728 \u7b2c\u516d\u7ae0\uff1a\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u4efb\u52a1 . \u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\uff1a \u540c4.2 \u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u7684\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u3002 \u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\uff1a \u540c4.2 \u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u7684\u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\u3002 4.4 \u5c0f\u7ed3 \u00b6 \u5b66\u4e60\u4e86\u79bb\u7ebf\u90e8\u5206\u7684\u6570\u636e\u6d41\u6c34\u7ebf\u4ee5\u53ca\u7ec4\u6210\u90e8\u5206\u3002 \u6839\u636e\u67b6\u6784\u5c55\u5f00\u56fe\u56fe\uff0c\u79bb\u7ebf\u90e8\u5206\u53ef\u5206\u4e3a\u4e24\u6761\u6570\u636e\u6d41\u6c34\u7ebf\uff0c\u5206\u522b\u7528\u4e8e\u5904\u7406\u7ed3\u6784\u5316\u6570\u636e\u548c\u975e\u7ed3\u6784\u5316\u6570\u636e\u3002\u8fd9\u91cc\u79f0\u5b83\u4eec\u4e3a\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u548c\u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u3002 \u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u7684\u7ec4\u6210\u90e8\u5206\uff1a \u7ed3\u6784\u5316\u6570\u636e\u722c\u866b\uff1a\u4ece\u7f51\u9875\u4e0a\u6293\u53d6\u7ed3\u6784\u5316\u7684\u6709\u5173\u533b\u5b66\u547d\u540d\u5b9e\u4f53\u7684\u5185\u5bb9\u3002 \u7ed3\u6784\u5316\u6570\u636e\u7684\u6e05\u6d17\uff1a\u5bf9\u6293\u53d6\u7684\u5185\u5bb9\u8fdb\u884c\u8fc7\u6ee4\u548c\u6e05\u6d17\uff0c\u4ee5\u4fdd\u7559\u9700\u8981\u7684\u90e8\u5206\u3002 \u547d\u540d\u5b9e\u4f53\u5ba1\u6838\uff1a\u5bf9\u5f53\u524d\u547d\u540d\u5b9e\u4f53\u8fdb\u884c\u5ba1\u6838\uff0c\u6765\u4fdd\u8bc1\u8fd9\u4e9b\u5b9e\u4f53\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\u3002 \u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\uff1a\u5c06\u5ba1\u6838\u540e\u7684\u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\u4e4b\u4e2d\uff0c\u4f9b\u5728\u7ebf\u90e8\u5206\u4f7f\u7528\u3002 \u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u7684\u7ec4\u6210\u90e8\u5206\uff1a \u975e\u7ed3\u6784\u5316\u6570\u636e\u722c\u866b\uff1a\u4ece\u7f51\u9875\u4e0a\u6293\u53d6\u975e\u7ed3\u6784\u5316\u7684\u5305\u542b\u533b\u5b66\u547d\u540d\u5b9e\u4f53\u7684\u6587\u672c\u3002 \u975e\u7ed3\u6784\u5316\u6570\u636e\u6e05\u6d17\uff1a\u5bf9\u975e\u7ed3\u6784\u5316\u6570\u636e\u8fdb\u884c\u8fc7\u6ee4\u548c\u6e05\u6d17\uff0c\u4ee5\u4fdd\u7559\u9700\u8981\u7684\u90e8\u5206\u3002 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff1a\u4f7f\u7528\u6a21\u578b\u4ece\u975e\u7ed3\u6784\u5316\u6587\u672c\u4e2d\u83b7\u53d6\u547d\u540d\u5b9e\u4f53\u3002 \u547d\u540d\u5b9e\u4f53\u5ba1\u6838\uff1a\u5bf9\u5f53\u524d\u547d\u540d\u5b9e\u4f53\u8fdb\u884c\u5ba1\u6838\uff0c\u6765\u4fdd\u8bc1\u8fd9\u4e9b\u5b9e\u4f53\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\u3002 \u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\uff1a\u5c06\u5ba1\u6838\u540e\u7684\u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\u4e4b\u4e2d\uff0c\u4f9b\u5728\u7ebf\u90e8\u5206\u4f7f\u7528\u3002 \u5b66\u4e60\u4e86\u9700\u8981\u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u7684\u6570\u636e\u5185\u5bb9\u3002 \u5b66\u4e60\u4e86\u7ed3\u6784\u5316/\u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u7684\u8fc7\u7a0b\u3002 \u5b66\u4e60\u4e86\u7ed3\u6784\u5316/\u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u547d\u540d\u5b9e\u4f53\u5199\u5165\u7684\u8fc7\u7a0b\u3002 \u5b66\u4e60\u4e86\u9700\u8981\u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u6570\u636e\u5185\u5bb9\u3002 \u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u8fc7\u7a0b\u3002","title":"\u7b2c\u56db\u7ae0:\u79bb\u7ebf\u90e8\u5206"},{"location":"4.html#41","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u79bb\u7ebf\u90e8\u5206\u7684\u6570\u636e\u6d41\u6c34\u7ebf\u4ee5\u53ca\u7ec4\u6210\u90e8\u5206\u3002 \u4e86\u89e3\u5404\u4e2a\u7ec4\u6210\u90e8\u5206\u7684\u4f5c\u7528\u3002 \u79bb\u7ebf\u90e8\u5206\u67b6\u6784\u56fe\uff1a \u79bb\u7ebf\u90e8\u5206\u67b6\u6784\u5c55\u5f00\u56fe\uff1a \u79bb\u7ebf\u90e8\u5206\u7b80\u8981\u5206\u6790\uff1a \u6839\u636e\u67b6\u6784\u5c55\u5f00\u56fe\u56fe\uff0c\u79bb\u7ebf\u90e8\u5206\u53ef\u5206\u4e3a\u4e24\u6761\u6570\u636e\u6d41\u6c34\u7ebf\uff0c\u5206\u522b\u7528\u4e8e\u5904\u7406\u7ed3\u6784\u5316\u6570\u636e\u548c\u975e\u7ed3\u6784\u5316\u6570\u636e\u3002\u8fd9\u91cc\u79f0\u5b83\u4eec\u4e3a\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u548c\u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u3002 \u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u7684\u7ec4\u6210\u90e8\u5206\uff1a \u7ed3\u6784\u5316\u6570\u636e\u722c\u866b\uff1a\u4ece\u7f51\u9875\u4e0a\u6293\u53d6\u7ed3\u6784\u5316\u7684\u6709\u5173\u533b\u5b66\u547d\u540d\u5b9e\u4f53\u7684\u5185\u5bb9\u3002 \u7ed3\u6784\u5316\u6570\u636e\u7684\u6e05\u6d17\uff1a\u5bf9\u6293\u53d6\u7684\u5185\u5bb9\u8fdb\u884c\u8fc7\u6ee4\u548c\u6e05\u6d17\uff0c\u4ee5\u4fdd\u7559\u9700\u8981\u7684\u90e8\u5206\u3002 \u547d\u540d\u5b9e\u4f53\u5ba1\u6838\uff1a\u5bf9\u5f53\u524d\u547d\u540d\u5b9e\u4f53\u8fdb\u884c\u5ba1\u6838\uff0c\u6765\u4fdd\u8bc1\u8fd9\u4e9b\u5b9e\u4f53\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\u3002 \u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\uff1a\u5c06\u5ba1\u6838\u540e\u7684\u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\u4e4b\u4e2d\uff0c\u4f9b\u5728\u7ebf\u90e8\u5206\u4f7f\u7528\u3002 \u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u7684\u7ec4\u6210\u90e8\u5206\uff1a \u975e\u7ed3\u6784\u5316\u6570\u636e\u722c\u866b\uff1a\u4ece\u7f51\u9875\u4e0a\u6293\u53d6\u975e\u7ed3\u6784\u5316\u7684\u5305\u542b\u533b\u5b66\u547d\u540d\u5b9e\u4f53\u7684\u6587\u672c\u3002 \u975e\u7ed3\u6784\u5316\u6570\u636e\u6e05\u6d17\uff1a\u5bf9\u975e\u7ed3\u6784\u5316\u6570\u636e\u8fdb\u884c\u8fc7\u6ee4\u548c\u6e05\u6d17\uff0c\u4ee5\u4fdd\u7559\u9700\u8981\u7684\u90e8\u5206\u3002 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff1a\u4f7f\u7528\u6a21\u578b\u4ece\u975e\u7ed3\u6784\u5316\u6587\u672c\u4e2d\u83b7\u53d6\u547d\u540d\u5b9e\u4f53\u3002 \u547d\u540d\u5b9e\u4f53\u5ba1\u6838\uff1a\u5bf9\u5f53\u524d\u547d\u540d\u5b9e\u4f53\u8fdb\u884c\u5ba1\u6838\uff0c\u6765\u4fdd\u8bc1\u8fd9\u4e9b\u5b9e\u4f53\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\u3002 \u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\uff1a\u5c06\u5ba1\u6838\u540e\u7684\u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\u4e4b\u4e2d\uff0c\u4f9b\u5728\u7ebf\u90e8\u5206\u4f7f\u7528\u3002 \u8bf4\u660e\uff1a \u56e0\u4e3a\u672c\u9879\u76ee\u662f\u4ee5AI\u4e3a\u6838\u5fc3\u7684\u9879\u76ee\uff0c\u56e0\u6b64\u7ed3\u6784\u5316\u4e0e\u975e\u7ed3\u6784\u5316\u7684\u6570\u636e\u722c\u866b\u548c\u6e05\u6d17\u90e8\u5206\u7684\u5185\u5bb9\u8fd9\u91cc\u4e0d\u505a\u4ecb\u7ecd\uff0c\u4f46\u540c\u5b66\u4eec\u8981\u77e5\u9053\u6211\u4eec\u7684\u6570\u636e\u6765\u6e90\u3002","title":"4.1 \u79bb\u7ebf\u90e8\u5206\u7b80\u8981\u5206\u6790"},{"location":"4.html#42","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u9700\u8981\u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u7684\u6570\u636e\u5185\u5bb9\u3002 \u638c\u63e1\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u7684\u8fc7\u7a0b\u3002 \u638c\u63e1\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u547d\u540d\u5b9e\u4f53\u5199\u5165\u7684\u8fc7\u7a0b\u3002 \u9700\u8981\u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u7684\u6570\u636e\u5185\u5bb9\uff1a ... \u8e1d\u90e8\u6025\u6027\u97e7\u5e26\u635f\u4f24.csv \u8e1d\u90e8\u626d\u4f24.csv \u8e1d\u90e8\u9aa8\u6298.csv \u8e44\u94c1\u5f62\u80be.csv \u8e81\u72c2\u6291\u90c1\u75c7.csv \u8e81\u72c2\u75c7.csv \u8e81\u90c1\u75c7.csv \u8eaf\u4f53\u5f62\u5f0f\u969c\u788d.csv \u8eaf\u4f53\u611f\u67d3\u4f34\u53d1\u7684\u7cbe\u795e\u969c\u788d.csv \u8eaf\u4f53\u611f\u67d3\u6240\u81f4\u7cbe\u795e\u969c\u788d.csv \u8eaf\u4f53\u611f\u89c9\u969c\u788d.csv \u8eaf\u4f53\u75be\u75c5\u4f34\u53d1\u7684\u7cbe\u795e\u969c\u788d.csv \u8f6c\u6362\u6027\u969c\u788d.csv \u8f6c\u79fb\u6027\u5c0f\u80a0\u80bf\u7624.csv \u8f6c\u79fb\u6027\u76ae\u80a4\u9499\u5316\u75c5.csv \u8f6c\u79fb\u6027\u809d\u764c.csv \u8f6c\u79fb\u6027\u80f8\u819c\u80bf\u7624.csv \u8f6c\u79fb\u6027\u9aa8\u80bf\u7624.csv \u8f6e\u72b6\u75c5\u6bd2\u6027\u80a0\u708e.csv \u8f6e\u72b6\u75c5\u6bd2\u6240\u81f4\u80c3\u80a0\u708e.csv ... \u6bcf\u4e2acsv\u6587\u4ef6\u7684\u540d\u5b57\u90fd\u662f\u4e00\u79cd\u75be\u75c5\u540d\u3002 \u6587\u4ef6\u4f4d\u7f6e\uff1a/data/doctor_offline/structured/noreview/ \u4ee5\u8e81\u72c2\u75c7.csv\u4e3a\u4f8b\uff0c\u6709\u5982\u4e0b\u5185\u5bb9\uff1a \u8e81\u90c1\u6837 \u8e81\u72c2 \u884c\u4e3a\u53ca\u60c5\u7eea\u5f02\u5e38 \u5fc3\u5883\u9ad8\u6da8 \u60c5\u7eea\u8d77\u4f0f\u5927 \u6280\u672f\u72c2\u8e81\u75c7 \u653b\u51fb\u884c\u4e3a \u6613\u6fc0\u60f9 \u601d\u7ef4\u5954\u9038 \u63a7\u5236\u4e0d\u4f4f\u7684\u8054\u60f3 \u7cbe\u795e\u8fd0\u52a8\u6027\u5174\u594b csv\u6587\u4ef6\u7684\u5185\u5bb9\u662f\u8be5\u75be\u75c5\u5bf9\u5e94\u7684\u75c7\u72b6\uff0c\u6bcf\u79cd\u75c7\u72b6\u5360\u4e00\u884c\u3002 \u6587\u4ef6\u4f4d\u7f6e\uff1a/data/doctor_offline/structured/noreview/\u8e81\u72c2\u75c7.csv \u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\uff1a \u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u7684\u5de5\u4f5c\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528AI\u6a21\u578b\u5b9e\u73b0\uff0c\u5305\u62ec\u8bad\u7ec3\u6570\u636e\u96c6\uff0c\u6a21\u578b\u8bad\u7ec3\u548c\u4f7f\u7528\u7684\u6574\u4e2a\u8fc7\u7a0b\uff0c\u56e0\u6b64\u8fd9\u91cc\u5185\u5bb9\u4ee5\u72ec\u7acb\u4e00\u7ae0\u7684\u5f62\u6210\u5448\u73b0\u7ed9\u5927\u5bb6\uff0c\u5177\u4f53\u53c2\u89c1 \u7b2c\u4e94\u7ae0\uff1a\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u4efb\u52a1 . \u5220\u9664\u5ba1\u6838\u540e\u7684\u53ef\u80fd\u5b58\u5728\u7684\u7a7a\u6587\u4ef6\uff1a # Linux \u547d\u4ee4-- \u5220\u9664\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u7684\u7a7a\u6587\u4ef6 find ./ -name \"*\" -type f -size 0c | xargs -n 1 rm -f \u4ee3\u7801\u4f4d\u7f6e\uff1a\u5728/data/doctor_offline/structured/reviewed/\u76ee\u5f55\u4e0b\u6267\u884c\u3002 \u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\uff1a \u5c06\u547d\u540d\u5b9e\u4f53\u5199\u5165\u56fe\u6570\u636e\u5e93\u7684\u539f\u56e0\uff1a \u5199\u5165\u7684\u6570\u636e\u4f9b\u5728\u7ebf\u90e8\u5206\u8fdb\u884c\u67e5\u8be2\uff0c\u6839\u636e\u7528\u6237\u8f93\u5165\u75c7\u72b6\u6765\u5339\u914d\u5bf9\u5e94\u75be\u75c5\u3002 \u5c06\u547d\u540d\u5b9e\u4f53\u5199\u5165\u56fe\u6570\u636e\u5e93\u4ee3\u7801\uff1a # \u5f15\u5165\u76f8\u5173\u5305 import os import fileinput from neo4j import GraphDatabase from config import NEO4J_CONFIG driver = GraphDatabase . driver ( ** NEO4J_CONFIG ) def _load_data ( path ): \"\"\" description: \u5c06path\u76ee\u5f55\u4e0b\u7684csv\u6587\u4ef6\u4ee5\u6307\u5b9a\u683c\u5f0f\u52a0\u8f7d\u5230\u5185\u5b58 :param path: \u5ba1\u6838\u540e\u7684\u75be\u75c5\u5bf9\u5e94\u75c7\u72b6\u7684csv\u6587\u4ef6 :return: \u8fd4\u56de\u75be\u75c5\u5b57\u5178\uff0c\u5b58\u50a8\u5404\u4e2a\u75be\u75c5\u4ee5\u53ca\u4e0e\u4e4b\u5bf9\u5e94\u7684\u75c7\u72b6\u7684\u5b57\u5178 {\u75be\u75c51: [\u75c7\u72b61, \u75c7\u72b62, ...], \u75be\u75c52: [\u75c7\u72b61, \u75c7\u72b62, ...] \"\"\" # \u83b7\u5f97\u75be\u75c5csv\u5217\u8868 disease_csv_list = os . listdir ( path ) # \u5c06\u540e\u7f00.csv\u53bb\u6389\uff0c\u83b7\u5f97\u75be\u75c5\u5217\u8868 disease_list = list ( map ( lambda x : x . split ( \".\" )[ 0 ], disease_csv_list )) # \u521d\u59cb\u5316\u4e00\u4e2a\u75c7\u72b6\u5217\u8868\uff0c\u5b83\u91cc\u9762\u662f\u6bcf\u79cd\u75be\u75c5\u5bf9\u5e94\u7684\u75c7\u72b6\u5217\u8868 symptom_list = [] # \u904d\u5386\u75be\u75c5csv\u5217\u8868 for disease_csv in disease_csv_list : # \u5c06\u75be\u75c5csv\u4e2d\u7684\u6bcf\u4e2a\u75c7\u72b6\u53d6\u51fa\u5b58\u5165symptom\u5217\u8868\u4e2d symptom = list ( map ( lambda x : x . strip (), fileinput . FileInput ( os . path . join ( path , disease_csv )))) # \u8fc7\u6ee4\u6389\u6240\u6709\u957f\u5ea6\u5f02\u5e38\u7684\u75c7\u72b6\u540d symptom = list ( filter ( lambda x : 0 < len ( x ) < 100 , symptom )) symptom_list . append ( symptom ) # \u8fd4\u56de\u6307\u5b9a\u683c\u5f0f\u7684\u6570\u636e return dict ( zip ( disease_list , symptom_list )) def write ( path ): \"\"\" description: \u5c06csv\u6570\u636e\u5199\u5165\u5230neo4j, \u5e76\u5f62\u6210\u56fe\u8c31 :param path: \u6570\u636e\u6587\u4ef6\u8def\u5f84 \"\"\" # \u4f7f\u7528_load_data\u4ece\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6570\u636e disease_symptom_dict = _load_data ( path ) # \u5f00\u542f\u4e00\u4e2aneo4j\u7684session with driver . session () as session : for key , value in disease_symptom_dict . items (): cypher = \"MERGE (a:Disease{name: %r }) RETURN a\" % key session . run ( cypher ) for v in value : cypher = \"MERGE (b:Symptom{name: %r }) RETURN b\" % v session . run ( cypher ) cypher = \"MATCH (a:Disease{name: %r }) MATCH (b:Symptom{name: %r }) \\ WITH a,b MERGE(a)-[r:dis_to_sym]-(b)\" % ( key , v ) session . run ( cypher ) cypher = \"CREATE INDEX ON:Disease(name)\" session . run ( cypher ) cypher = \"CREATE INDEX ON:Symptom(name)\" session . run ( cypher ) \u8c03\u7528\uff1a # \u8f93\u5165\u53c2\u6570path\u4e3acsv\u6570\u636e\u6240\u5728\u8def\u5f84 path = \"/data/doctor_offline/structured/reviewed/\" write(path) \u8f93\u51fa\u6548\u679c\uff1a \u901a\u8fc7\u53ef\u89c6\u5316\u7ba1\u7406\u540e\u53f0\u67e5\u770b\u5199\u5165\u6548\u679c\u3002","title":"4.2 \u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf"},{"location":"4.html#43","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u9700\u8981\u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u6570\u636e\u5185\u5bb9\u3002 \u638c\u63e1\u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u8fc7\u7a0b\u3002 \u638c\u63e1\u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u7684\u8fc7\u7a0b\u3002 \u638c\u63e1\u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u547d\u540d\u5b9e\u4f53\u5199\u5165\u7684\u8fc7\u7a0b\u3002 \u9700\u8981\u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u6570\u636e\u5185\u5bb9\uff1a ... \u9ebb\u75b9\u6837\u7ea2\u6591\u578b\u836f\u75b9.txt \u9ebb\u75b9\u75c5\u6bd2\u80ba\u708e.txt \u9ebb\u75f9\u6027\u81c2\u4e1b\u795e\u7ecf\u708e.txt \u9ebb\u98ce\u6027\u5468\u56f4\u795e\u7ecf\u75c5.txt \u9ebb\u98ce\u6027\u8461\u8404\u819c\u708e.txt \u9ec4\u4f53\u56ca\u80bf.txt \u9ec4\u6591\u56ca\u6837\u6c34\u80bf.txt \u9ec4\u6591\u88c2\u5b54\u6027\u89c6\u7f51\u819c\u8131\u79bb.txt \u9ec4\u97e7\u5e26\u9aa8\u5316\u75c7.txt \u9ecf\u591a\u7cd6\u8d2e\u79ef\u75c7.txt \u9ecf\u591a\u7cd6\u8d2e\u79ef\u75c7\u2160\u578b.txt \u9ecf\u591a\u7cd6\u8d2e\u79ef\u75c7\u2161\u578b.txt \u9ecf\u591a\u7cd6\u8d2e\u79ef\u75c7\u2165\u578b.txt \u9ecf\u591a\u7cd6\u8d2e\u79ef\u75c7\u2162\u578b.txt \u9ecf\u591a\u7cd6\u8d2e\u79ef\u75c7\u2166\u578b.txt \u9ed1\u8272\u4e18\u75b9\u6027\u76ae\u80a4\u75c5.txt ... \u6bcf\u4e2atxt\u6587\u4ef6\u7684\u540d\u5b57\u90fd\u662f\u4e00\u79cd\u75be\u75c5\u540d\u3002 \u6587\u4ef6\u4f4d\u7f6e\uff1a/data/doctor_offline/unstructured/norecognite/ \u4ee5\u9ed1\u8272\u4e18\u75b9\u6027\u76ae\u80a4\u75c5.txt\u4e3a\u4f8b\uff0c\u6709\u5982\u4e0b\u5185\u5bb9\uff1a \u521d\u5448\u5fae\u5c0f\u3001\u5706\u5f62\u3001\u76ae\u80a4\u8272\u6216\u9ed1\u8272\u589e\u6df1\u7684\u4e18\u75b9\uff0c\u5355\u4e2a\u6216\u5c11\u6570\u53d1\u751f\u4e8e\u988c\u90e8\u6216\u988a\u90e8\uff0c\u76ae\u635f\u9010\u6e10\u589e\u5927\u589e\u591a\uff0c\u6570\u5e74\u4e2d\u53ef\u8fbe\u6570\u767e\uff0c\u9664\u7736\u5468\u5916\u5c1a\u5206\u5e03\u4e8e\u9762\u90e8\u3001\u9888\u90e8\u548c\u80f8\u4e0a\u90e8\u3002\u76ae\u635f\u5927\u5c0f\u5f62\u72b6\u9177\u4f3c\u8102\u6ea2\u6027\u89d2\u5316\u75c5\u53ca\u6241\u5e73\u75a3\u9d92\u3002\u4e0d\u53d1\u751f\u9cde\u5c51\uff0c\u7ed3\u75c2\u548c\u6e83\u75a1\uff0c\u4ea6\u65e0\u7619\u75d2\u53ca\u5176\u4ed6\u4e3b\u89c2\u75c7\u72b6 txt\u4e2d\u662f\u5bf9\u8be5\u75be\u75c5\u75c7\u72b6\u7684\u6587\u672c\u63cf\u8ff0\u3002 \u6587\u4ef6\u4f4d\u7f6e\uff1a/data/doctor_offline/unstructured/norecognite/\u9ed1\u8272\u4e18\u75b9\u6027\u76ae\u80a4\u75c5.txt \u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff1a \u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u5de5\u4f5c\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528AI\u6a21\u578b\u5b9e\u73b0\uff0c\u5305\u62ec\u6a21\u578b\u8bad\u7ec3\u548c\u4f7f\u7528\u7684\u6574\u4e2a\u8fc7\u7a0b\uff0c\u56e0\u6b64\u5185\u5bb9\u4ee5\u72ec\u7acb\u4e00\u7ae0\u7684\u5f62\u6210\u5448\u73b0\u7ed9\u5927\u5bb6\uff0c\u5177\u4f53\u5185\u5bb9\u5728 \u7b2c\u516d\u7ae0\uff1a\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u4efb\u52a1 . \u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\uff1a \u540c4.2 \u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u7684\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u3002 \u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\uff1a \u540c4.2 \u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u7684\u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\u3002","title":"4.3 \u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf"},{"location":"4.html#44","text":"\u5b66\u4e60\u4e86\u79bb\u7ebf\u90e8\u5206\u7684\u6570\u636e\u6d41\u6c34\u7ebf\u4ee5\u53ca\u7ec4\u6210\u90e8\u5206\u3002 \u6839\u636e\u67b6\u6784\u5c55\u5f00\u56fe\u56fe\uff0c\u79bb\u7ebf\u90e8\u5206\u53ef\u5206\u4e3a\u4e24\u6761\u6570\u636e\u6d41\u6c34\u7ebf\uff0c\u5206\u522b\u7528\u4e8e\u5904\u7406\u7ed3\u6784\u5316\u6570\u636e\u548c\u975e\u7ed3\u6784\u5316\u6570\u636e\u3002\u8fd9\u91cc\u79f0\u5b83\u4eec\u4e3a\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u548c\u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u3002 \u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u7684\u7ec4\u6210\u90e8\u5206\uff1a \u7ed3\u6784\u5316\u6570\u636e\u722c\u866b\uff1a\u4ece\u7f51\u9875\u4e0a\u6293\u53d6\u7ed3\u6784\u5316\u7684\u6709\u5173\u533b\u5b66\u547d\u540d\u5b9e\u4f53\u7684\u5185\u5bb9\u3002 \u7ed3\u6784\u5316\u6570\u636e\u7684\u6e05\u6d17\uff1a\u5bf9\u6293\u53d6\u7684\u5185\u5bb9\u8fdb\u884c\u8fc7\u6ee4\u548c\u6e05\u6d17\uff0c\u4ee5\u4fdd\u7559\u9700\u8981\u7684\u90e8\u5206\u3002 \u547d\u540d\u5b9e\u4f53\u5ba1\u6838\uff1a\u5bf9\u5f53\u524d\u547d\u540d\u5b9e\u4f53\u8fdb\u884c\u5ba1\u6838\uff0c\u6765\u4fdd\u8bc1\u8fd9\u4e9b\u5b9e\u4f53\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\u3002 \u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\uff1a\u5c06\u5ba1\u6838\u540e\u7684\u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\u4e4b\u4e2d\uff0c\u4f9b\u5728\u7ebf\u90e8\u5206\u4f7f\u7528\u3002 \u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u7684\u7ec4\u6210\u90e8\u5206\uff1a \u975e\u7ed3\u6784\u5316\u6570\u636e\u722c\u866b\uff1a\u4ece\u7f51\u9875\u4e0a\u6293\u53d6\u975e\u7ed3\u6784\u5316\u7684\u5305\u542b\u533b\u5b66\u547d\u540d\u5b9e\u4f53\u7684\u6587\u672c\u3002 \u975e\u7ed3\u6784\u5316\u6570\u636e\u6e05\u6d17\uff1a\u5bf9\u975e\u7ed3\u6784\u5316\u6570\u636e\u8fdb\u884c\u8fc7\u6ee4\u548c\u6e05\u6d17\uff0c\u4ee5\u4fdd\u7559\u9700\u8981\u7684\u90e8\u5206\u3002 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff1a\u4f7f\u7528\u6a21\u578b\u4ece\u975e\u7ed3\u6784\u5316\u6587\u672c\u4e2d\u83b7\u53d6\u547d\u540d\u5b9e\u4f53\u3002 \u547d\u540d\u5b9e\u4f53\u5ba1\u6838\uff1a\u5bf9\u5f53\u524d\u547d\u540d\u5b9e\u4f53\u8fdb\u884c\u5ba1\u6838\uff0c\u6765\u4fdd\u8bc1\u8fd9\u4e9b\u5b9e\u4f53\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\u3002 \u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\uff1a\u5c06\u5ba1\u6838\u540e\u7684\u547d\u540d\u5b9e\u4f53\u5199\u5165\u6570\u636e\u5e93\u4e4b\u4e2d\uff0c\u4f9b\u5728\u7ebf\u90e8\u5206\u4f7f\u7528\u3002 \u5b66\u4e60\u4e86\u9700\u8981\u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u7684\u6570\u636e\u5185\u5bb9\u3002 \u5b66\u4e60\u4e86\u7ed3\u6784\u5316/\u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u7684\u8fc7\u7a0b\u3002 \u5b66\u4e60\u4e86\u7ed3\u6784\u5316/\u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u547d\u540d\u5b9e\u4f53\u5199\u5165\u7684\u8fc7\u7a0b\u3002 \u5b66\u4e60\u4e86\u9700\u8981\u8fdb\u884c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u6570\u636e\u5185\u5bb9\u3002 \u975e\u7ed3\u6784\u5316\u6570\u636e\u6d41\u6c34\u7ebf\u4e2d\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u8fc7\u7a0b\u3002","title":"4.4 \u5c0f\u7ed3"},{"location":"5.html","text":"5.1 \u4efb\u52a1\u4ecb\u7ecd\u4e0e\u6a21\u578b\u9009\u7528 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u4efb\u52a1\u7684\u76f8\u5173\u77e5\u8bc6\u3002 \u4e86\u89e3\u9009\u7528\u7684\u6a21\u578b\u53ca\u5176\u539f\u56e0\u3002 NE\u5ba1\u6838\u4efb\u52a1\uff1a \u4e00\u822c\u5728\u5b9e\u4f53\u8fdb\u5165\u6570\u636e\u5e93\u5b58\u50a8\u524d\uff0c\u4e2d\u95f4\u90fd\u4f1a\u6709\u4e00\u9053\u5fc5\u4e0d\u53ef\u5c11\u7684\u5de5\u5e8f\uff0c\u5c31\u662f\u5bf9\u8bc6\u522b\u51fa\u6765\u7684\u5b9e\u4f53\u8fdb\u884c\u5408\u6cd5\u6027\u7684\u68c0\u9a8c\uff0c\u5373\u547d\u540d\u5b9e\u4f53(NE)\u5ba1\u6838\u4efb\u52a1\u3002\u5b83\u7684\u68c0\u9a8c\u8fc7\u7a0b\u4e0d\u4f7f\u7528\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u66f4\u5173\u6ce8\u4e8e\u5b57\u7b26\u672c\u8eab\u7684\u7ec4\u5408\u65b9\u5f0f\u6765\u8fdb\u884c\u5224\u65ad\uff0c\u672c\u8d28\u4e0a\uff0c\u5b83\u662f\u4e00\u9879\u77ed\u6587\u672c\u4e8c\u5206\u7c7b\u95ee\u9898\u3002 \u9009\u7528\u7684\u6a21\u578b\u53ca\u5176\u539f\u56e0\uff1a \u9488\u5bf9\u77ed\u6587\u672c\u4efb\u52a1\uff0c\u65e0\u987b\u6355\u6349\u957f\u8ddd\u79bb\u7684\u5173\u7cfb\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528\u4e86\u4f20\u7edf\u7684RNN\u6a21\u578b\u6765\u89e3\u51b3\uff0c\u6027\u80fd\u548c\u6548\u679c\u53ef\u4ee5\u8fbe\u5230\u5f88\u597d\u7684\u5747\u8861\u3002 \u77ed\u6587\u672c\u4efb\u52a1\u5f80\u5f80\u9002\u5408\u4f7f\u7528\u5b57\u5d4c\u5165\u7684\u65b9\u5f0f\uff0c\u4f46\u662f\u5982\u679c\u4f60\u7684\u8bad\u7ec3\u96c6\u4e0d\u662f\u5f88\u5927\uff0c\u6d89\u53ca\u7684\u5b57\u6570\u6709\u9650\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u5b57\u5411\u91cf\u8fdb\u884c\u8868\u793a\u5373\u53ef\u3002\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u4e86bert-chinese\u9884\u8bad\u7ec3\u6a21\u578b\u6765\u83b7\u5f97\u4e2d\u6587\u6c49\u5b57\u7684\u5411\u91cf\u8868\u793a\u3002 5.2 \u8bad\u7ec3\u6570\u636e\u96c6 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u5f0f\u53ca\u5176\u76f8\u5173\u89e3\u91ca\u3002 \u638c\u63e1\u5c06\u6570\u636e\u96c6\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u8fc7\u7a0b\u3002 \u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u5f0f\uff1a 1 \u624b\u5185\u808c\u840e\u7f29 0 \u7f29\u840e\u808c\u5185\u624b 1 \u5c3f\u9ed1\u9178 0 \u9178\u9ed1\u5c3f 1 \u5355\u773c\u773c\u524d\u9ed1\u5f71 0 \u5f71\u9ed1\u524d\u773c\u773c\u5355 1 \u5fe7\u90c1 0 \u90c1\u5fe7 1 \u7ea2\u7ec6\u80de\u5bff\u547d\u7f29\u77ed 0 \u77ed\u7f29\u547d\u5bff\u80de\u7ec6\u7ea2 1 \u76ae\u80a4\u9ecf\u86cb\u767d\u6c89\u79ef 0 \u79ef\u6c89\u767d\u86cb\u9ecf\u80a4\u76ae 1 \u773c\u795e\u5f02\u5e38 0 \u5e38\u5f02\u795e\u773c 1 \u52a8\u8109\u8840\u6c27\u9971\u548c\u5ea6\u964d\u4f4e 0 \u4f4e\u964d\u5ea6\u548c\u9971\u6c27\u8840\u8109\u52a8 \u6570\u636e\u96c6\u7684\u76f8\u5173\u89e3\u91ca\uff1a \u8fd9\u4e9b\u8bad\u7ec3\u96c6\u4e2d\u7684\u6b63\u6837\u672c\u5f80\u5f80\u662f\u57fa\u4e8e\u4eba\u5de5\u5ba1\u6838\u7684\u6807\u51c6\u547d\u540d\u5b9e\u4f53\u3002 \u6570\u636e\u96c6\u4e2d\u7684\u7b2c\u4e00\u5217\u4ee3\u8868\u6807\u7b7e\uff0c1\u4e3a\u6b63\u6807\u7b7e\uff0c\u4ee3\u8868\u540e\u9762\u7684\u6587\u5b57\u662f\u547d\u540d\u5b9e\u4f53\u30020\u4e3a\u8d1f\u6807\u7b7e\uff0c\u4ee3\u8868\u540e\u9762\u7684\u6587\u5b57\u4e0d\u662f\u547d\u540d\u5b9e\u4f53\u3002 \u6570\u636e\u96c6\u4e2d\u7684\u7b2c\u4e8c\u5217\u4e2d\u7684\u547d\u540d\u5b9e\u4f53\u6765\u6e90\u4e8e\u6570\u636e\u5e93\u4e2d\u7684\u75c7\u72b6\u5b9e\u4f53\u540d\u5b57\uff0c\u5b83\u662f\u7ed3\u6784\u5316\u722c\u866b\u6293\u53d6\u7684\u6570\u636e\u3002\u800c\u975e\u547d\u540d\u5b9e\u4f53\u5219\u662f\u5b83\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\u3002 \u6b63\u8d1f\u6837\u672c\u7684\u6bd4\u4f8b\u662f1:1. \u5c06\u6570\u636e\u96c6\u52a0\u8f7d\u5230\u5185\u5b58\uff1a import pandas as pd from collections import Counter # \u8bfb\u53d6\u6570\u636e train_data_path = \"./train_data.csv\" train_data = pd . read_csv ( train_data_path , header = None , sep = \" \\t \" ) # \u6253\u5370\u6b63\u8d1f\u6807\u7b7e\u6bd4\u4f8b print ( dict ( Counter ( train_data [ 0 ] . values ))) # \u8f6c\u6362\u6570\u636e\u5230\u5217\u8868\u5f62\u5f0f train_data = train_data . values . tolist () print ( train_data [: 10 ]) \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_offline/review_model/train.py \u8f93\u51fa\u6548\u679c\uff1a # \u6b63\u8d1f\u6807\u7b7e\u6bd4\u4f8b {1: 5740, 0: 5740} # \u53d6\u51fa10\u6761\u8bad\u7ec3\u6570\u636e\u67e5\u770b [[1, '\u6795\u90e8\u75bc\u75db'], [0, '\u75db\u75bc\u90e8\u6795'], [1, '\u9676\u745f\u5f81\u9633\u6027'], [0, '\u6027\u9633\u5f81\u745f\u9676'], [1, '\u604b\u517d\u578b\u6027\u53d8\u6001'], [0, '\u6001\u53d8\u6027\u578b\u517d\u604b'], [1, '\u8fdb\u98df\u56f0\u96be'], [0, '\u96be\u56f0\u98df\u8fdb'], [1, '\u4f1a\u9634\u7618\u7ba1\u6216\u7aa6\u9053\u5f62\u6210'], [0, '\u6210\u5f62\u9053\u7aa6\u6216\u7ba1\u7618\u9634\u4f1a']] \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u5f0f\u53ca\u5176\u76f8\u5173\u89e3\u91ca\u3002 \u5b66\u4e60\u4e86\u5c06\u6570\u636e\u96c6\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u8fc7\u7a0b\u3002 5.3 BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6709\u5173\u77e5\u8bc6\u548c\u4f5c\u7528\u3002 \u638c\u63e1\u4f7f\u7528BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u53e5\u5b50\u7f16\u7801\u7684\u8fc7\u7a0b\u3002 BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\uff1a BERT\u6a21\u578b\u6574\u4f53\u67b6\u6784\u57fa\u4e8eTransformer\u6a21\u578b\u67b6\u6784\uff0cBERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u7f16\u7801\u5668\u5177\u670912\u5c42\uff0c\u8f93\u51fa\u5c42\u4e2d\u7684\u7ebf\u6027\u5c42\u5177\u6709768\u4e2a\u8282\u70b9\uff0c\u5373\u8f93\u51fa\u5f20\u91cf\u6700\u540e\u4e00\u7ef4\u7684\u7ef4\u5ea6\u662f768. \u5b83\u4f7f\u7528\u7684\u591a\u5934\u6ce8\u610f\u529b\u673a\u5236\u7ed3\u6784\u4e2d\uff0c\u5934\u7684\u6570\u91cf\u4e3a12, \u6a21\u578b\u603b\u53c2\u6570\u91cf\u4e3a110M. \u540c\u65f6\uff0c\u5b83\u5728\u4e2d\u6587\u7b80\u4f53\u548c\u7e41\u4f53\u4e0a\u8fdb\u884c\u8bad\u7ec3\uff0c\u56e0\u6b64\u9002\u5408\u4e2d\u6587\u7b80\u4f53\u548c\u7e41\u4f53\u4efb\u52a1\u3002 BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u4f5c\u7528\uff1a \u5728\u5b9e\u9645\u7684\u6587\u672c\u4efb\u52a1\u5904\u7406\u4e2d\uff0c\u6709\u4e9b\u8bad\u7ec3\u8bed\u6599\u5f88\u96be\u83b7\u5f97\uff0c\u4ed6\u4eec\u7684\u603b\u4f53\u6570\u91cf\u548c\u5305\u542b\u7684\u8bcd\u6c47\u603b\u6570\u90fd\u975e\u5e38\u5c11\uff0c\u4e0d\u9002\u5408\u7528\u4e8e\u8bad\u7ec3\u5e26\u6709Embedding\u5c42\u7684\u6a21\u578b\uff0c\u4f46\u8fd9\u4e9b\u6570\u636e\u4e2d\u5374\u53c8\u8574\u542b\u8fd9\u4e00\u4e9b\u6709\u4ef7\u503c\u7684\u89c4\u5f8b\u53ef\u4ee5\u88ab\u6a21\u578b\u6316\u6398\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u539f\u59cb\u6587\u672c\u8fdb\u884c\u7f16\u7801\u662f\u975e\u5e38\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u9884\u8bad\u7ec3\u6a21\u578b\u6765\u81ea\u5927\u578b\u8bed\u6599\uff0c\u80fd\u591f\u4f7f\u5f97\u5f53\u524d\u6587\u672c\u5177\u6709\u610f\u4e49\uff0c\u867d\u7136\u8fd9\u4e9b\u610f\u4e49\u53ef\u80fd\u5e76\u4e0d\u9488\u5bf9\u67d0\u4e2a\u7279\u5b9a\u9886\u57df\uff0c\u4f46\u662f\u8fd9\u79cd\u7f3a\u9677\u53ef\u4ee5\u4f7f\u7528\u5fae\u8c03\u6a21\u578b\u6765\u8fdb\u884c\u5f25\u8865\u3002 \u4f7f\u7528BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u53e5\u5b50\u7f16\u7801\uff1a import torch import torch.nn as nn # root\u7528\u6237\u4ece\u672c\u5730\u52a0\u8f7d # source = '/root/.cache/torch/hub/huggingface_pytorch-transformers_main' # \u666e\u901a\u7528\u6237xxx\u4ece\u672c\u5730\u52a0\u8f7d # source = '/home/xxx/.cache/torch/hub/huggingface_pytorch-transformers_main' # \u76f4\u63a5\u4f7f\u7528\u9884\u8bad\u7ec3\u7684bert\u4e2d\u6587\u6a21\u578b # model_name = 'bert-base-chinese' # \u901a\u8fc7torch.hub\u83b7\u5f97\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684bert-base-chinese\u6a21\u578b # model = torch.hub.load(source, 'model', model_name, source='local') # \u83b7\u5f97\u5bf9\u5e94\u7684\u5b57\u7b26\u6620\u5c04\u5668\uff0c\u5b83\u5c06\u628a\u4e2d\u6587\u7684\u6bcf\u4e2a\u5b57\u6620\u5c04\u6210\u4e00\u4e2a\u6570\u5b57 # tokenizer = torch.hub.load(source, 'tokenizer', model_name, source='local') # \u4ecegithub\u52a0\u8f7d model_name = 'bert-base-chinese' source = 'huggingface/pytorch-transformers' model = torch . hub . load ( source , 'model' , model_name , source = 'github' ) tokenizer = torch . hub . load ( source , 'tokenizer' , model_name , source = 'github' ) def get_bert_encode_for_single ( text ): \"\"\" description: \u4f7f\u7528bert-chinese\u7f16\u7801\u4e2d\u6587\u6587\u672c :param text: \u8981\u8fdb\u884c\u7f16\u7801\u7684\u6587\u672c :return: \u4f7f\u7528bert\u7f16\u7801\u540e\u7684\u6587\u672c\u5f20\u91cf\u8868\u793a \"\"\" # \u9996\u5148\u4f7f\u7528\u5b57\u7b26\u6620\u5c04\u5668\u5bf9\u6bcf\u4e2a\u6c49\u5b57\u8fdb\u884c\u6620\u5c04 # \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0cbert\u7684tokenizer\u6620\u5c04\u540e\u4f1a\u4e3a\u7ed3\u679c\u524d\u540e\u6dfb\u52a0\u5f00\u59cb\u548c\u7ed3\u675f\u6807\u8bb0\u5373101\u548c102 # \u8fd9\u5bf9\u4e8e\u591a\u6bb5\u6587\u672c\u7684\u7f16\u7801\u662f\u6709\u610f\u4e49\u7684\uff0c\u4f46\u5728\u6211\u4eec\u8fd9\u91cc\u6ca1\u6709\u610f\u4e49\uff0c\u56e0\u6b64\u4f7f\u7528[1:-1]\u5bf9\u5934\u548c\u5c3e\u8fdb\u884c\u5207\u7247 indexed_tokens = tokenizer . encode ( text )[ 1 : - 1 ] # \u4e4b\u540e\u5c06\u5217\u8868\u7ed3\u6784\u8f6c\u5316\u4e3atensor tokens_tensor = torch . LongTensor ([ indexed_tokens ]) #print('tokens_tensor:', tokens_tensor) # \u4f7f\u6a21\u578b\u4e0d\u81ea\u52a8\u8ba1\u7b97\u68af\u5ea6 with torch . no_grad (): # \u8c03\u7528\u6a21\u578b\u83b7\u5f97\u9690\u5c42\u8f93\u51fa encoded_layers = model ( tokens_tensor ) # \u8f93\u51fa\u7684\u9690\u5c42\u662f\u4e00\u4e2a\u4e09\u7ef4\u5f20\u91cf\uff0c\u6700\u5916\u5c42\u4e00\u7ef4\u662f1, \u6211\u4eec\u4f7f\u7528[0]\u964d\u53bb\u5b83\u3002 #print('encoded_layers:', encoded_layers) encoded_layers = encoded_layers [ 0 ] return encoded_layers text = \"\u4f60\u597d\uff0c\u5468\u6770\u4f26\" outputs = get_bert_encode_for_single ( text ) print ( outputs ) \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_offline/review_model/bert_chinese_encode.py \u8f93\u5165\u53c2\u6570\uff1a text = \"\u4f60\u597d\uff0c\u5468\u6770\u4f26\" \u8c03\u7528\uff1a outputs = get_bert_encode_for_single ( text ) print ( outputs ) print ( outputs . shape ) \u8f93\u51fa\u6548\u679c\uff1a tensor([[[ 3.2731e-01, -1.4832e-01, -9.1618e-01, ..., -4.4089e-01, -4.1074e-01, -7.5570e-01], [-1.1287e-01, -7.6269e-01, -6.4860e-01, ..., -8.0478e-01, -5.3600e-01, -3.1953e-01], [-9.3012e-02, -4.4381e-01, -1.1985e+00, ..., -3.6624e-01, -4.7467e-01, -2.6408e-01], [-1.6894e-02, -4.3753e-01, -3.6060e-01, ..., -3.2451e-01, -3.4204e-02, -1.7930e-01], [-1.3159e-01, -3.0048e-01, -2.4193e-01, ..., -4.5755e-02, -2.0958e-01, -1.0649e-01], [-4.0006e-01, -3.4410e-01, -3.6472e-05, ..., 1.9081e-01, 1.7006e-01, -3.6221e-01]]]) torch.Size([1, 6, 768]) \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6709\u5173\u77e5\u8bc6\uff1a BERT\u6a21\u578b\u6574\u4f53\u67b6\u6784\u57fa\u4e8eTransformer\u6a21\u578b\u67b6\u6784\uff0cBERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u7f16\u7801\u5668\u5177\u670912\u5c42\uff0c\u8f93\u51fa\u5c42\u4e2d\u7684\u7ebf\u6027\u5c42\u5177\u6709768\u4e2a\u8282\u70b9\uff0c\u5373\u8f93\u51fa\u5f20\u91cf\u6700\u540e\u4e00\u7ef4\u7684\u7ef4\u5ea6\u662f768. \u5b83\u4f7f\u7528\u7684\u591a\u5934\u6ce8\u610f\u529b\u673a\u5236\u7ed3\u6784\u4e2d\uff0c\u5934\u7684\u6570\u91cf\u4e3a12, \u6a21\u578b\u603b\u53c2\u6570\u91cf\u4e3a110M. \u540c\u65f6\uff0c\u5b83\u5728\u4e2d\u6587\u7b80\u4f53\u548c\u7e41\u4f53\u4e0a\u8fdb\u884c\u8bad\u7ec3\uff0c\u56e0\u6b64\u9002\u5408\u4e2d\u6587\u7b80\u4f53\u548c\u7e41\u4f53\u4efb\u52a1\u3002 \u5b66\u4e60\u4e86BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u4f5c\u7528\uff1a \u5728\u5b9e\u9645\u7684\u6587\u672c\u4efb\u52a1\u5904\u7406\u4e2d\uff0c\u6709\u4e9b\u8bad\u7ec3\u8bed\u6599\u5f88\u96be\u83b7\u5f97\uff0c\u4ed6\u4eec\u7684\u603b\u4f53\u6570\u91cf\u548c\u5305\u542b\u7684\u8bcd\u6c47\u603b\u6570\u90fd\u975e\u5e38\u5c11\uff0c\u4e0d\u9002\u5408\u7528\u4e8e\u8bad\u7ec3\u5e26\u6709Embedding\u5c42\u7684\u6a21\u578b\uff0c\u4f46\u8fd9\u4e9b\u6570\u636e\u4e2d\u5374\u53c8\u8574\u542b\u8fd9\u4e00\u4e9b\u6709\u4ef7\u503c\u7684\u89c4\u5f8b\u53ef\u4ee5\u88ab\u6a21\u578b\u6316\u6398\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u539f\u59cb\u6587\u672c\u8fdb\u884c\u7f16\u7801\u662f\u975e\u5e38\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u9884\u8bad\u7ec3\u6a21\u578b\u6765\u81ea\u5927\u578b\u8bed\u6599\uff0c\u80fd\u591f\u4f7f\u5f97\u5f53\u524d\u6587\u672c\u5177\u6709\u610f\u4e49\uff0c\u867d\u7136\u8fd9\u4e9b\u610f\u4e49\u53ef\u80fd\u5e76\u4e0d\u9488\u5bf9\u67d0\u4e2a\u7279\u5b9a\u9886\u57df\uff0c\u4f46\u662f\u8fd9\u79cd\u7f3a\u9677\u53ef\u4ee5\u4f7f\u7528\u5fae\u8c03\u6a21\u578b\u6765\u8fdb\u884c\u5f25\u8865\u3002 \u5b66\u4e60\u4e86\u4f7f\u7528BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u53e5\u5b50\u7f16\u7801\u7684\u51fd\u6570\uff1aget_bert_encode_for_single(text) 5.4 \u6784\u5efaRNN\u6a21\u578b \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u5b66\u4e60RNN\u6a21\u578b\u7684\u5185\u90e8\u7ed3\u6784\u53ca\u8ba1\u7b97\u516c\u5f0f\u3002 \u638c\u63e1RNN\u6a21\u578b\u7684\u5b9e\u73b0\u8fc7\u7a0b\u3002 \u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u56fe\uff1a \u7ed3\u6784\u89e3\u91ca\u56fe\uff1a \u5185\u90e8\u7ed3\u6784\u5206\u6790\uff1a * \u6211\u4eec\u628a\u76ee\u5149\u96c6\u4e2d\u5728\u4e2d\u95f4\u7684\u65b9\u5757\u90e8\u5206\uff0c\u5b83\u7684\u8f93\u5165\u6709\u4e24\u90e8\u5206\uff0c\u5206\u522b\u662fh(t-1)\u4ee5\u53cax(t), \u4ee3\u8868\u4e0a\u4e00\u65f6\u95f4\u6b65\u7684\u9690\u5c42\u8f93\u51fa\uff0c\u4ee5\u53ca\u6b64\u65f6\u95f4\u6b65\u7684\u8f93\u5165\uff0c\u5b83\u4eec\u8fdb\u5165RNN\u7ed3\u6784\u4f53\u540e\uff0c\u4f1a\"\u878d\u5408\"\u5230\u4e00\u8d77\uff0c\u8fd9\u79cd\u878d\u5408\u6211\u4eec\u6839\u636e\u7ed3\u6784\u89e3\u91ca\u53ef\u77e5\uff0c\u662f\u5c06\u4e8c\u8005\u8fdb\u884c\u62fc\u63a5\uff0c\u5f62\u6210\u65b0\u7684\u5f20\u91cf[x(t), h(t-1)], \u4e4b\u540e\u8fd9\u4e2a\u65b0\u7684\u5f20\u91cf\u5c06\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42(\u7ebf\u6027\u5c42), \u8be5\u5c42>\u4f7f\u7528tanh\u4f5c\u4e3a\u6fc0\u6d3b\u51fd\u6570\uff0c\u6700\u7ec8\u5f97\u5230\u8be5\u65f6\u95f4\u6b65\u7684\u8f93\u51fah(t), \u5b83\u5c06\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684>\u8f93\u5165\u548cx(t+1)\u4e00\u8d77\u8fdb\u5165\u7ed3\u6784\u4f53\u3002\u4ee5\u6b64\u7c7b\u63a8\u3002 \u5185\u90e8\u7ed3\u6784\u8fc7\u7a0b\u6f14\u793a\uff1a \u6839\u636e\u7ed3\u6784\u5206\u6790\u5f97\u51fa\u5185\u90e8\u8ba1\u7b97\u516c\u5f0f\uff1a $$ h_t = \\tanh(W_t[X_t, h_{t-1}]+b_t) $$ \u6fc0\u6d3b\u51fd\u6570tanh\u7684\u4f5c\u7528\uff1a * \u7528\u4e8e\u5e2e\u52a9\u8c03\u8282\u6d41\u7ecf\u7f51\u7edc\u7684\u503c\uff0ctanh\u51fd\u6570\u5c06\u503c\u538b\u7f29\u5728-1\u548c1\u4e4b\u95f4\u3002 \u6784\u5efaRNN\u6a21\u578b\u7684\u4ee3\u7801\u5206\u6790\uff1a import torch import torch.nn as nn class RNN ( nn . Module ): def __init__ ( self , input_size , hidden_size , output_size ): ''' :param input_size: \u8f93\u5165\u5f20\u91cf\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f :param hidden_size: \u9690\u85cf\u5c42\u5f20\u91cf\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f :param output_size: \u8f93\u51fa\u5f20\u91cf\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f ''' super ( RNN , self ) . __init__ () # \u5c06\u9690\u85cf\u5c42\u7684\u5927\u5c0f\u5199\u6210\u7c7b\u7684\u5185\u90e8\u53d8\u91cf self . hidden_size = hidden_size # \u6784\u5efa\u7b2c\u4e00\u4e2a\u7ebf\u6027\u5c42\uff0c\u8f93\u5165\u5c3a\u5bf8\u662finput_size+hidden_size, \u56e0\u4e3a\u771f\u6b63\u8fdb\u5165\u5168\u8fde\u63a5\u5c42\u7684\u5f20\u91cf\u662fX(t)+h(t-1) # \u8f93\u51fa\u5c3a\u5bf8\u662fhidden_size self . i2h = nn . Linear ( input_size + hidden_size , hidden_size ) # tanh self . tanh = nn . Tanh () # \u6784\u5efa\u7b2c\u4e8c\u4e2a\u7ebf\u6027\u5c42\uff0c\u8f93\u5165\u5c3a\u5bf8\u662fhidden_size # \u8f93\u51fa\u5c3a\u5bf8\u662foutput_size self . i2o = nn . Linear ( hidden_size , output_size ) # \u5b9a\u4e49\u6700\u7ec8\u8f93\u51fa\u7684softmax\u5904\u7406\u5c42 self . softmax = nn . LogSoftmax ( dim =- 1 ) def forward ( self , input1 , hidden1 ): ''' :param input1: \u76f8\u5f53\u4e0ex(t) :param hidden1: \u76f8\u5f53\u4e8eh(t-1) :return: ''' # \u9996\u5148\u8981\u8fdb\u884c\u8f93\u5165\u5f20\u91cf\u7684\u62fc\u63a5\uff0c\u5c06x(t)\u548ch(t-1)\u62fc\u63a5\u5728\u4e00\u8d77 combined = torch . cat (( input1 , hidden1 ), 1 ) # \u8ba9\u8f93\u5165\u7ecf\u8fc7\u9690\u85cf\u5c42\u7684\u83b7\u5f97hidden hidden = self . i2h ( combined ) # tanh\u5c42 hidden = self . tanh ( hidden ) # print('hidden.shape:', hidden.shape) # \u8ba9\u8f93\u5165\u7ecf\u8fc7\u8f93\u51fa\u5c42\u83b7\u5f97output output = self . i2o ( hidden ) # \u8ba9output\u7ecf\u8fc7softmax\u5c42 output = self . softmax ( output ) # \u8fd4\u56de\u4e24\u4e2a\u5f20\u91cfoutput, hidden return output , hidden def initHidden ( self ): # \u5c06\u9690\u85cf\u5c42\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a[1, hidden_size]\u7684\u5168\u96f6\u5f20\u91cf return torch . zeros ( 1 , self . hidden_size ) torch.cat\u6f14\u793a\uff1a >>> x = torch.randn(2, 3) >>> x tensor([[ 0.6580, -1.0969, -0.4614], [-0.1034, -0.5790, 0.1497]]) >>> torch.cat((x, x, x), 0) tensor([[ 0.6580, -1.0969, -0.4614], [-0.1034, -0.5790, 0.1497], [ 0.6580, -1.0969, -0.4614], [-0.1034, -0.5790, 0.1497], [ 0.6580, -1.0969, -0.4614], [-0.1034, -0.5790, 0.1497]]) >>> torch.cat((x, x, x), 1) ensor([[ 0.6580, -1.0969, -0.4614, 0.6580, -1.0969, -0.4614, 0.6580,-1.0969, -0.4614], [-0.1034, -0.5790, 0.1497, -0.1034, -0.5790, 0.1497, -0.1034,-0.5790, 0.1497]]) \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_offline/review_model/RNN_MODEL.py \u5b9e\u4f8b\u5316\u53c2\u6570\uff1a input_size = 768 hidden_size = 128 n_categories = 2 \u8f93\u5165\u53c2\u6570\uff1a input = torch . rand ( 1 , input_size ) hidden = torch . rand ( 1 , hidden_size ) \u8c03\u7528\uff1a from RNN_MODEL import RNN rnn = RNN ( input_size , hidden_size , n_categories ) outputs , hidden = rnn ( input , hidden ) print ( \"outputs:\" , outputs ) print ( \"hidden:\" , hidden ) \u8f93\u51fa\u6548\u679c\uff1a outputs: tensor([[-0.7858, -0.6084]], grad_fn=<LogSoftmaxBackward>) hidden: tensor([[-4.8444e-01, -5.9609e-02, 1.7870e-01, -1.6553e-01, ... , 5.6711e-01]], grad_fn=<AddmmBackward>)) \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86RNN\u6a21\u578b\u7684\u5185\u90e8\u7ed3\u6784\u53ca\u8ba1\u7b97\u516c\u5f0f\u3002 \u5b66\u4e60\u5e76\u5b9e\u73b0\u4e86RNN\u6a21\u578b\u7684\u7c7b\uff1aclass RNN(nn.Module). 5.5 \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u7684\u6b65\u9aa4\u3002 \u638c\u63e1\u6a21\u578b\u8bad\u7ec3\u4e2d\u6bcf\u4e2a\u6b65\u9aa4\u7684\u5b9e\u73b0\u8fc7\u7a0b\u3002 \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u7684\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u6784\u5efa\u968f\u673a\u9009\u53d6\u6570\u636e\u51fd\u6570\u3002 \u7b2c\u4e8c\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570\u3002 \u7b2c\u4e09\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u9a8c\u8bc1\u51fd\u6570\u3002 \u7b2c\u56db\u6b65\uff1a\u8c03\u7528\u8bad\u7ec3\u548c\u9a8c\u8bc1\u51fd\u6570\u3002 \u7b2c\u4e94\u6b65\uff1a\u7ed8\u5236\u8bad\u7ec3\u548c\u9a8c\u8bc1\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf\u3002 \u7b2c\u516d\u6b65\uff1a\u6a21\u578b\u4fdd\u5b58\u3002 \u7b2c\u4e00\u6b65\uff1a\u6784\u5efa\u968f\u673a\u9009\u53d6\u6570\u636e\u51fd\u6570 # \u5bfc\u5165bert\u4e2d\u6587\u7f16\u7801\u7684\u9884\u8bad\u7ec3\u6a21\u578b from bert_chinese_encode import get_bert_encode_for_single def randomTrainingExample ( train_data ): \"\"\"\u968f\u673a\u9009\u53d6\u6570\u636e\u51fd\u6570\uff0ctrain_data\u662f\u8bad\u7ec3\u96c6\u7684\u5217\u8868\u5f62\u5f0f\u6570\u636e\"\"\" # \u4ecetrain_data\u968f\u673a\u9009\u62e9\u4e00\u6761\u6570\u636e category , line = random . choice ( train_data ) # \u5c06\u91cc\u9762\u7684\u6587\u5b57\u4f7f\u7528bert\u8fdb\u884c\u7f16\u7801\uff0c\u83b7\u53d6\u7f16\u7801\u540e\u7684tensor\u7c7b\u578b\u6570\u636e line_tensor = get_bert_encode_for_single ( line ) # \u5c06\u5206\u7c7b\u6807\u7b7e\u5c01\u88c5\u6210tensor category_tensor = torch . tensor ([ int ( category )]) # \u8fd4\u56de\u56db\u4e2a\u7ed3\u679c return category , line , category_tensor , line_tensor \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/doctor_offline/review_model/train.py \u8f93\u5165\u53c2\u6570\uff1a # \u5c06\u6570\u636e\u96c6\u52a0\u8f7d\u5230\u5185\u5b58\u83b7\u5f97\u7684train_data \u8c03\u7528\uff1a # \u9009\u62e910\u6761\u6570\u636e\u8fdb\u884c\u67e5\u770b for i in range(10): category, line, category_tensor, line_tensor = randomTrainingExample(train_data) print('category =', category, '/ line =', line) \u8f93\u51fa\u6548\u679c\uff1a category = 1 / line = \u89e6\u89c9\u5931\u8c03 category = 0 / line = \u98a4\u9707\u6027\u7406\u751f category = 0 / line = \u5f81\u538b\u8840\u9ad8\u5a20\u598a category = 1 / line = \u98df\u6b32\u51cf\u9000 category = 0 / line = \u8840\u6de4\u9053\u80a0\u80c3 category = 0 / line = \u5f62\u7578\u8282\u5173 category = 0 / line = \u54b3\u545b\u6c34\u996e category = 0 / line = \u75c7\u75e3\u5de8 category = 1 / line = \u663c\u76f2 category = 1 / line = \u773c\u795e\u5f02\u5e38 \u7b2c\u4e8c\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570 # \u9009\u53d6\u635f\u5931\u51fd\u6570\u4e3aNLLLoss() # CrossEntropyLoss\u5c31\u662f\u628a\u4ee5\u4e0aSoftmax\u2013Log\u2013NLLLoss criterion = nn . NLLLoss () # \u5b66\u4e60\u7387\u4e3a0.005 learning_rate = 0.005 def train ( category_tensor , line_tensor ): \"\"\"\u6a21\u578b\u8bad\u7ec3\u51fd\u6570\uff0ccategory_tensor\u4ee3\u8868\u7c7b\u522b\u5f20\u91cf\uff0cline_tensor\u4ee3\u8868\u7f16\u7801\u540e\u7684\u6587\u672c\u5f20\u91cf\"\"\" # \u521d\u59cb\u5316\u9690\u5c42 hidden = rnn . initHidden () # \u6a21\u578b\u68af\u5ea6\u5f520 rnn . zero_grad () # \u904d\u5386line_tensor\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u7684\u5f20\u91cf\u8868\u793a for i in range ( line_tensor . size ()[ 1 ]): # \u7136\u540e\u5c06\u5176\u8f93\u5165\u5230rnn\u6a21\u578b\u4e2d\uff0c\u56e0\u4e3a\u6a21\u578b\u8981\u6c42\u662f\u8f93\u5165\u5fc5\u987b\u662f\u4e8c\u7ef4\u5f20\u91cf\uff0c\u56e0\u6b64\u9700\u8981\u62d3\u5c55\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u5faa\u73af\u8c03\u7528rnn\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u5b57 output , hidden = rnn ( line_tensor [ 0 ][ i ] . unsqueeze ( 0 ), hidden ) # \u6839\u636e\u635f\u5931\u51fd\u6570\u8ba1\u7b97\u635f\u5931\uff0c\u8f93\u5165\u5206\u522b\u662frnn\u7684\u8f93\u51fa\u7ed3\u679c\u548c\u771f\u6b63\u7684\u7c7b\u522b\u6807\u7b7e loss = criterion ( output , category_tensor ) # \u5c06\u8bef\u5dee\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u66f4\u65b0\u6a21\u578b\u4e2d\u6240\u6709\u7684\u53c2\u6570 for p in rnn . parameters (): # \u5c06\u53c2\u6570\u7684\u5f20\u91cf\u8868\u793a\u4e0e\u53c2\u6570\u7684\u68af\u5ea6\u4e58\u4ee5\u5b66\u4e60\u7387\u7684\u7ed3\u679c\u76f8\u52a0\u4ee5\u6b64\u6765\u66f4\u65b0\u53c2\u6570 p . data . add_ ( - learning_rate , p . grad . data ) # \u8fd4\u56de\u7ed3\u679c\u548c\u635f\u5931\u7684\u503c return output , loss . item () \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_offline/review_model/train.py \u7b2c\u4e09\u6b65\uff1a\u6a21\u578b\u9a8c\u8bc1\u51fd\u6570 def valid ( category_tensor , line_tensor ): \"\"\"\u6a21\u578b\u9a8c\u8bc1\u51fd\u6570\uff0ccategory_tensor\u4ee3\u8868\u7c7b\u522b\u5f20\u91cf\uff0cline_tensor\u4ee3\u8868\u7f16\u7801\u540e\u7684\u6587\u672c\u5f20\u91cf\"\"\" # \u521d\u59cb\u5316\u9690\u5c42 hidden = rnn . initHidden () # \u9a8c\u8bc1\u6a21\u578b\u4e0d\u81ea\u52a8\u6c42\u89e3\u68af\u5ea6 with torch . no_grad (): # \u904d\u5386line_tensor\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u7684\u5f20\u91cf\u8868\u793a for i in range ( line_tensor . size ()[ 1 ]): # \u7136\u540e\u5c06\u5176\u8f93\u5165\u5230rnn\u6a21\u578b\u4e2d\uff0c\u56e0\u4e3a\u6a21\u578b\u8981\u6c42\u662f\u8f93\u5165\u5fc5\u987b\u662f\u4e8c\u7ef4\u5f20\u91cf\uff0c\u56e0\u6b64\u9700\u8981\u62d3\u5c55\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u5faa\u73af\u8c03\u7528rnn\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u5b57 output , hidden = rnn ( line_tensor [ 0 ][ i ] . unsqueeze ( 0 ), hidden ) # \u83b7\u5f97\u635f\u5931 loss = criterion ( output , category_tensor ) # \u8fd4\u56de\u7ed3\u679c\u548c\u635f\u5931\u7684\u503c return output , loss . item () \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_offline/review_model/train.py \u8ba1\u7b97\u65f6\u95f4\u51fd\u6570 # \u6784\u5efa\u65f6\u95f4\u8ba1\u7b97\u51fd\u6570 def timeSince ( since ): \"\u83b7\u5f97\u6bcf\u6b21\u6253\u5370\u7684\u8bad\u7ec3\u8017\u65f6\uff0csince\u662f\u8bad\u7ec3\u5f00\u59cb\u65f6\u95f4\" # \u83b7\u5f97\u5f53\u524d\u65f6\u95f4 now = time . time () # \u83b7\u5f97\u65f6\u95f4\u5dee\uff0c\u5c31\u662f\u8bad\u7ec3\u8017\u65f6 s = now - since # \u5c06\u79d2\u8f6c\u5316\u4e3a\u5206\u949f\uff0c\u5e76\u53d6\u6574 m = math . floor ( s / 60 ) # \u8ba1\u7b97\u5269\u4e0b\u4e0d\u591f\u51d1\u62101\u5206\u949f\u7684\u79d2\u6570 s -= m * 60 # \u8fd4\u56de\u6307\u5b9a\u683c\u5f0f\u7684\u8017\u65f6 return ' %d m %d s' % ( m , s ) \u8f93\u5165\u53c2\u6570\uff1a # \u5047\u5b9a\u6a21\u578b\u8bad\u7ec3\u5f00\u59cb\u65f6\u95f4\u662f10min\u4e4b\u524d since = time.time() - 10*60 \u8c03\u7528\uff1a period = timeSince(since) print(period) \u8f93\u51fa\u6548\u679c\uff1a 10m 0s \u8c03\u7528\u8bad\u7ec3\u548c\u9a8c\u8bc1\u51fd\u6570\u5e76\u6253\u5370\u65e5\u5fd7 # \u8bbe\u7f6e\u8fed\u4ee3\u6b21\u6570\u4e3a50000\u6b65 n_iters = 50000 # \u6253\u5370\u95f4\u9694\u4e3a1000\u6b65 plot_every = 1000 # \u521d\u59cb\u5316\u6253\u5370\u95f4\u9694\u4e2d\u8bad\u7ec3\u548c\u9a8c\u8bc1\u7684\u635f\u5931\u548c\u51c6\u786e\u7387 train_current_loss = 0 train_current_acc = 0 valid_current_loss = 0 valid_current_acc = 0 # \u521d\u59cb\u5316\u76db\u88c5\u6bcf\u6b21\u6253\u5370\u95f4\u9694\u7684\u5e73\u5747\u635f\u5931\u548c\u51c6\u786e\u7387 all_train_losses = [] all_train_acc = [] all_valid_losses = [] all_valid_acc = [] # \u83b7\u53d6\u5f00\u59cb\u65f6\u95f4\u6233 start = time . time () # \u5faa\u73af\u904d\u5386n_iters\u6b21 for iter in range ( 1 , n_iters + 1 ): # \u8c03\u7528\u4e24\u6b21\u968f\u673a\u51fd\u6570\u5206\u522b\u751f\u6210\u4e00\u6761\u8bad\u7ec3\u548c\u9a8c\u8bc1\u6570\u636e category , line , category_tensor , line_tensor = randomTrainingExample ( train_data [: 9000 ]) category_ , line_ , category_tensor_ , line_tensor_ = randomTrainingExample ( train_data [ 9000 :]) # \u5206\u522b\u8c03\u7528\u8bad\u7ec3\u548c\u9a8c\u8bc1\u51fd\u6570\uff0c\u83b7\u5f97\u8f93\u51fa\u548c\u635f\u5931 train_output , train_loss = train ( category_tensor , line_tensor ) valid_output , valid_loss = valid ( category_tensor_ , line_tensor_ ) # \u8fdb\u884c\u8bad\u7ec3\u635f\u5931\uff0c\u9a8c\u8bc1\u635f\u5931\uff0c\u8bad\u7ec3\u51c6\u786e\u7387\u548c\u9a8c\u8bc1\u51c6\u786e\u7387\u5206\u522b\u7d2f\u52a0 train_current_loss += train_loss train_current_acc += ( train_output . argmax ( 1 ) == category_tensor ) . sum () . item () valid_current_loss += valid_loss valid_current_acc += ( valid_output . argmax ( 1 ) == category_tensor_ ) . sum () . item () # \u5f53\u8fed\u4ee3\u6b21\u6570\u662f\u6307\u5b9a\u6253\u5370\u95f4\u9694\u7684\u6574\u6570\u500d\u65f6 if iter % plot_every == 0 : # \u7528\u521a\u521a\u7d2f\u52a0\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u9664\u4ee5\u95f4\u9694\u6b65\u6570\u5f97\u5230\u5e73\u5747\u503c train_average_loss = train_current_loss / plot_every train_average_acc = train_current_acc / plot_every valid_average_loss = valid_current_loss / plot_every valid_average_acc = valid_current_acc / plot_every # \u6253\u5370\u8fed\u4ee3\u6b65\uff0c\u8017\u65f6\uff0c\u8bad\u7ec3\u635f\u5931\u548c\u51c6\u786e\u7387\uff0c\u9a8c\u8bc1\u635f\u5931\u548c\u51c6\u786e\u7387 print ( \"Iter:\" , iter , \"|\" , \"TimeSince:\" , timeSince ( start )) print ( \"Train Loss:\" , train_average_loss , \"|\" , \"Train Acc:\" , train_average_acc ) print ( \"Valid Loss:\" , valid_average_loss , \"|\" , \"Valid Acc:\" , valid_average_acc ) # \u5c06\u7ed3\u679c\u5b58\u5165\u5bf9\u5e94\u7684\u5217\u8868\u4e2d\uff0c\u65b9\u4fbf\u540e\u7eed\u5236\u56fe all_train_losses . append ( train_average_loss ) all_train_acc . append ( train_average_acc ) all_valid_losses . append ( valid_average_loss ) all_valid_acc . append ( valid_average_acc ) # \u5c06\u8be5\u95f4\u9694\u7684\u8bad\u7ec3\u548c\u9a8c\u8bc1\u635f\u5931\u53ca\u5176\u51c6\u786e\u7387\u5f520 train_current_loss = 0 train_current_acc = 0 valid_current_loss = 0 valid_current_acc = 0 \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_offline/review_model/train.py \u8f93\u51fa\u6548\u679c\uff1a Iter: 1000 | TimeSince: 0m 56s Train Loss: 0.6127021567507527 | Train Acc: 0.747 Valid Loss: 0.6702297774022868 | Valid Acc: 0.7 Iter: 2000 | TimeSince: 1m 52s Train Loss: 0.5190641692602076 | Train Acc: 0.789 Valid Loss: 0.5217500487511397 | Valid Acc: 0.784 Iter: 3000 | TimeSince: 2m 48s Train Loss: 0.5398398997281778 | Train Acc: 0.8 Valid Loss: 0.5844468013737023 | Valid Acc: 0.777 Iter: 4000 | TimeSince: 3m 43s Train Loss: 0.4700755337187358 | Train Acc: 0.822 Valid Loss: 0.5140456306522071 | Valid Acc: 0.802 Iter: 5000 | TimeSince: 4m 38s Train Loss: 0.5260879981063878 | Train Acc: 0.804 Valid Loss: 0.5924804099237979 | Valid Acc: 0.796 Iter: 6000 | TimeSince: 5m 33s Train Loss: 0.4702717279043861 | Train Acc: 0.825 Valid Loss: 0.6675750375208704 | Valid Acc: 0.78 Iter: 7000 | TimeSince: 6m 27s Train Loss: 0.4734503294042624 | Train Acc: 0.833 Valid Loss: 0.6329268293256277 | Valid Acc: 0.784 Iter: 8000 | TimeSince: 7m 23s Train Loss: 0.4258338176879665 | Train Acc: 0.847 Valid Loss: 0.5356959595441066 | Valid Acc: 0.82 Iter: 9000 | TimeSince: 8m 18s Train Loss: 0.45773495503464817 | Train Acc: 0.843 Valid Loss: 0.5413714128659645 | Valid Acc: 0.798 Iter: 10000 | TimeSince: 9m 14s Train Loss: 0.4856756244019302 | Train Acc: 0.835 Valid Loss: 0.5450502399195044 | Valid Acc: 0.813 \u7b2c\u4e94\u6b65\uff1a\u7ed8\u5236\u8bad\u7ec3\u548c\u9a8c\u8bc1\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf import matplotlib.pyplot as plt plt . figure ( 0 ) plt . plot ( all_train_losses , label = \"Train Loss\" ) plt . plot ( all_valid_losses , color = \"red\" , label = \"Valid Loss\" ) plt . legend ( loc = 'upper left' ) plt . savefig ( \"./loss.png\" ) plt . figure ( 1 ) plt . plot ( all_train_acc , label = \"Train Acc\" ) plt . plot ( all_valid_acc , color = \"red\" , label = \"Valid Acc\" ) plt . legend ( loc = 'upper left' ) plt . savefig ( \"./acc.png\" ) \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/doctor_offline/review_model/train.py \u8bad\u7ec3\u548c\u9a8c\u8bc1\u635f\u5931\u5bf9\u7167\u66f2\u7ebf\uff1a \u8bad\u7ec3\u548c\u9a8c\u8bc1\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf\uff1a \u5206\u6790\uff1a \u635f\u5931\u5bf9\u7167\u66f2\u7ebf\u4e00\u76f4\u4e0b\u964d\uff0c\u8bf4\u660e\u6a21\u578b\u80fd\u591f\u4ece\u6570\u636e\u4e2d\u83b7\u53d6\u89c4\u5f8b\uff0c\u6b63\u5728\u6536\u655b\uff0c\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf\u4e2d\u9a8c\u8bc1\u51c6\u786e\u7387\u4e00\u76f4\u4e0a\u5347\uff0c\u6700\u7ec8\u7ef4\u6301\u57280.98\u5de6\u53f3\u3002 \u7b2c\u516d\u6b65\uff1a\u6a21\u578b\u4fdd\u5b58 # \u4fdd\u5b58\u8def\u5f84 MODEL_PATH = './BERT_RNN.pth' # \u4fdd\u5b58\u6a21\u578b\u53c2\u6570 torch.save(rnn.state_dict(), MODEL_PATH) \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/doctor_offline/review_model/train.py \u8f93\u51fa\u6548\u679c\uff1a \u5728/data/doctor_offline/review_model/\u8def\u5f84\u4e0b\u751f\u6210BERT_RNN.pth\u6587\u4ef6\u3002 \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u7684\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u6784\u5efa\u968f\u673a\u9009\u53d6\u6570\u636e\u51fd\u6570\u3002 \u7b2c\u4e8c\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570\u3002 \u7b2c\u4e09\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u9a8c\u8bc1\u51fd\u6570\u3002 \u7b2c\u56db\u6b65\uff1a\u8c03\u7528\u8bad\u7ec3\u548c\u9a8c\u8bc1\u51fd\u6570\u3002 \u7b2c\u4e94\u6b65\uff1a\u7ed8\u5236\u8bad\u7ec3\u548c\u9a8c\u8bc1\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf\u3002 \u7b2c\u516d\u6b65\uff1a\u6a21\u578b\u4fdd\u5b58\u3002 5.6 \u6a21\u578b\u4f7f\u7528 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u638c\u63e1\u6a21\u578b\u9884\u6d4b\u7684\u5b9e\u73b0\u8fc7\u7a0b\u3002 \u638c\u63e1\u6a21\u578b\u6279\u91cf\u9884\u6d4b\u7684\u5b9e\u73b0\u8fc7\u7a0b\u3002 \u6a21\u578b\u9884\u6d4b\u7684\u5b9e\u73b0\u8fc7\u7a0b\uff1a import os import torch import torch.nn as nn # \u5bfc\u5165RNN\u6a21\u578b\u7ed3\u6784 from RNN_MODEL import RNN # \u5bfc\u5165bert\u9884\u8bad\u7ec3\u6a21\u578b\u7f16\u7801\u51fd\u6570 from bert_chinese_encode import get_bert_encode_for_single # \u9884\u52a0\u8f7d\u7684\u6a21\u578b\u53c2\u6570\u8def\u5f84 MODEL_PATH = './BERT_RNN.pth' # \u9690\u5c42\u8282\u70b9\u6570\uff0c\u8f93\u5165\u5c42\u5c3a\u5bf8\uff0c\u7c7b\u522b\u6570\u90fd\u548c\u8bad\u7ec3\u65f6\u76f8\u540c\u5373\u53ef n_hidden = 128 input_size = 768 n_categories = 2 # \u5b9e\u4f8b\u5316RNN\u6a21\u578b\uff0c\u5e76\u52a0\u8f7d\u4fdd\u5b58\u6a21\u578b\u53c2\u6570 rnn = RNN ( input_size , n_hidden , n_categories ) rnn . load_state_dict ( torch . load ( MODEL_PATH )) def _test ( line_tensor ): \"\"\"\u6a21\u578b\u6d4b\u8bd5\u51fd\u6570\uff0c\u5b83\u5c06\u7528\u5728\u6a21\u578b\u9884\u6d4b\u51fd\u6570\u4e2d\uff0c\u7528\u4e8e\u8c03\u7528RNN\u6a21\u578b\u5e76\u8fd4\u56de\u7ed3\u679c\u3002 \u5b83\u7684\u53c2\u6570line_tensor\u4ee3\u8868\u8f93\u5165\u6587\u672c\u7684\u5f20\u91cf\u8868\u793a\"\"\" # \u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf hidden = rnn . initHidden () # \u4e0e\u8bad\u7ec3\u65f6\u76f8\u540c\uff0c\u904d\u5386\u8f93\u5165\u6587\u672c\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26 for i in range ( line_tensor . size ()[ 1 ]): # \u5c06\u5176\u9010\u6b21\u8f93\u9001\u7ed9rnn\u6a21\u578b output , hidden = rnn ( line_tensor [ 0 ][ i ] . unsqueeze ( 0 ), hidden ) # \u83b7\u5f97rnn\u6a21\u578b\u6700\u7ec8\u7684\u8f93\u51fa return output def predict ( input_line ): \"\"\"\u6a21\u578b\u9884\u6d4b\u51fd\u6570\uff0c\u8f93\u5165\u53c2\u6570input_line\u4ee3\u8868\u9700\u8981\u9884\u6d4b\u7684\u6587\u672c\"\"\" # \u4e0d\u81ea\u52a8\u6c42\u89e3\u68af\u5ea6 with torch . no_grad (): # \u5c06input_line\u4f7f\u7528bert\u6a21\u578b\u8fdb\u884c\u7f16\u7801 output = _test ( get_bert_encode_for_single ( input_line )) # \u4eceoutput\u4e2d\u53d6\u51fa\u6700\u5927\u503c\u5bf9\u5e94\u7684\u7d22\u5f15\uff0c\u6bd4\u8f83\u7684\u7ef4\u5ea6\u662f1 _ , topi = output . topk ( 1 , 1 ) # \u8fd4\u56de\u7ed3\u679c\u6570\u503c return topi . item () tensor.topk\u6f14\u793a\uff1a >>> tr = torch.randn(1, 2) >>> tr tensor([[-0.1808, -1.4170]]) >>> tr.topk(1, 1) torch.return_types.topk(values=tensor([[-0.1808]]), indices=tensor([[0]])) \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_offline/review_model/predict.py \u8f93\u5165\u53c2\u6570\uff1a input_line = \"\u70b9\u7600\u6837\u5c16\u9488\u6027\u53d1\u591a\" \u8c03\u7528\uff1a result = predict(input_line) print(\"result:\", result) \u8f93\u51fa\u6548\u679c\uff1a result: 0 \u6a21\u578b\u6279\u91cf\u9884\u6d4b\u7684\u5b9e\u73b0\u8fc7\u7a0b\uff1a def batch_predict ( input_path , output_path ): \"\"\"\u6279\u91cf\u9884\u6d4b\u51fd\u6570\uff0c\u4ee5\u539f\u59cb\u6587\u672c(\u5f85\u8bc6\u522b\u7684\u547d\u540d\u5b9e\u4f53\u7ec4\u6210\u7684\u6587\u4ef6)\u8f93\u5165\u8def\u5f84 \u548c\u9884\u6d4b\u8fc7\u6ee4\u540e(\u53bb\u9664\u6389\u975e\u547d\u540d\u5b9e\u4f53\u7684\u6587\u4ef6)\u7684\u8f93\u51fa\u8def\u5f84\u4e3a\u53c2\u6570\"\"\" # \u5f85\u8bc6\u522b\u7684\u547d\u540d\u5b9e\u4f53\u7ec4\u6210\u7684\u6587\u4ef6\u662f\u4ee5\u75be\u75c5\u540d\u79f0\u4e3acsv\u6587\u4ef6\u540d\uff0c # \u6587\u4ef6\u4e2d\u7684\u6bcf\u4e00\u884c\u662f\u8be5\u75be\u75c5\u5bf9\u5e94\u7684\u75c7\u72b6\u547d\u540d\u5b9e\u4f53 # \u8bfb\u53d6\u8def\u5f84\u4e0b\u7684\u6bcf\u4e00\u4e2acsv\u6587\u4ef6\u540d\uff0c\u88c5\u5165csv\u5217\u8868\u4e4b\u4e2d csv_list = os . listdir ( input_path ) # \u904d\u5386\u6bcf\u4e00\u4e2acsv\u6587\u4ef6 for csv in csv_list : # \u4ee5\u8bfb\u7684\u65b9\u5f0f\u6253\u5f00\u6bcf\u4e00\u4e2acsv\u6587\u4ef6 with open ( os . path . join ( input_path , csv ), \"r\" ) as fr : # \u518d\u4ee5\u5199\u7684\u65b9\u5f0f\u6253\u5f00\u8f93\u51fa\u8def\u5f84\u7684\u540c\u540dcsv\u6587\u4ef6 with open ( os . path . join ( output_path , csv ), \"w\" ) as fw : input_lines = fr . readlines () # \u8bfb\u53d6csv\u6587\u4ef6\u7684\u6bcf\u4e00\u884c for input_line in input_lines : print ( csv , input_line ) # \u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u9884\u6d4b res = predict ( input_line ) if res : # \u7ed3\u679c\u662f1\uff0c\u8bf4\u660e\u5ba1\u6838\u6210\u529f\uff0c\u628a\u6587\u672c\u5199\u5165\u5230\u6587\u4ef6\u4e2d fw . write ( input_line + ' \\n ' ) else : pass \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_offline/review_model/predict.py \u8f93\u5165\u53c2\u6570\uff1a input_path = \"/data/doctor_offline/structured/noreview/\" output_path = \"/data/doctor_offline/structured/reviewed/\" \u8c03\u7528\uff1a batch_predict(input_path, output_path) \u8f93\u51fa\u6548\u679c\uff1a \u5728\u8f93\u51fa\u8def\u5f84\u4e0b\u751f\u6210\u4e0e\u8f93\u5165\u8def\u5f84\u7b49\u6570\u91cf\u7684\u540c\u540dcsv\u6587\u4ef6\uff0c\u5185\u90e8\u7684\u75c7\u72b6\u5b9e\u4f53\u662f\u88ab\u5ba1\u6838\u7684\u53ef\u7528\u5b9e\u4f53\u3002 5.7 \u5c0f\u7ed3 \u00b6 \u5b66\u4e60\u5e76\u5b9e\u73b0\u4e86\u6a21\u578b\u9884\u6d4b\u7684\u51fd\u6570\uff1apredict(input_line). \u5b66\u4e60\u5e76\u5b9e\u73b0\u4e86\u6a21\u578b\u6279\u91cf\u9884\u6d4b\u7684\u51fd\u6570\uff1abatch_predict(input_path, output_path)","title":"\u7b2c\u4e94\u7ae0:\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u4efb\u52a1"},{"location":"5.html#51","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u547d\u540d\u5b9e\u4f53\u5ba1\u6838\u4efb\u52a1\u7684\u76f8\u5173\u77e5\u8bc6\u3002 \u4e86\u89e3\u9009\u7528\u7684\u6a21\u578b\u53ca\u5176\u539f\u56e0\u3002 NE\u5ba1\u6838\u4efb\u52a1\uff1a \u4e00\u822c\u5728\u5b9e\u4f53\u8fdb\u5165\u6570\u636e\u5e93\u5b58\u50a8\u524d\uff0c\u4e2d\u95f4\u90fd\u4f1a\u6709\u4e00\u9053\u5fc5\u4e0d\u53ef\u5c11\u7684\u5de5\u5e8f\uff0c\u5c31\u662f\u5bf9\u8bc6\u522b\u51fa\u6765\u7684\u5b9e\u4f53\u8fdb\u884c\u5408\u6cd5\u6027\u7684\u68c0\u9a8c\uff0c\u5373\u547d\u540d\u5b9e\u4f53(NE)\u5ba1\u6838\u4efb\u52a1\u3002\u5b83\u7684\u68c0\u9a8c\u8fc7\u7a0b\u4e0d\u4f7f\u7528\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u66f4\u5173\u6ce8\u4e8e\u5b57\u7b26\u672c\u8eab\u7684\u7ec4\u5408\u65b9\u5f0f\u6765\u8fdb\u884c\u5224\u65ad\uff0c\u672c\u8d28\u4e0a\uff0c\u5b83\u662f\u4e00\u9879\u77ed\u6587\u672c\u4e8c\u5206\u7c7b\u95ee\u9898\u3002 \u9009\u7528\u7684\u6a21\u578b\u53ca\u5176\u539f\u56e0\uff1a \u9488\u5bf9\u77ed\u6587\u672c\u4efb\u52a1\uff0c\u65e0\u987b\u6355\u6349\u957f\u8ddd\u79bb\u7684\u5173\u7cfb\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528\u4e86\u4f20\u7edf\u7684RNN\u6a21\u578b\u6765\u89e3\u51b3\uff0c\u6027\u80fd\u548c\u6548\u679c\u53ef\u4ee5\u8fbe\u5230\u5f88\u597d\u7684\u5747\u8861\u3002 \u77ed\u6587\u672c\u4efb\u52a1\u5f80\u5f80\u9002\u5408\u4f7f\u7528\u5b57\u5d4c\u5165\u7684\u65b9\u5f0f\uff0c\u4f46\u662f\u5982\u679c\u4f60\u7684\u8bad\u7ec3\u96c6\u4e0d\u662f\u5f88\u5927\uff0c\u6d89\u53ca\u7684\u5b57\u6570\u6709\u9650\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u5b57\u5411\u91cf\u8fdb\u884c\u8868\u793a\u5373\u53ef\u3002\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u4e86bert-chinese\u9884\u8bad\u7ec3\u6a21\u578b\u6765\u83b7\u5f97\u4e2d\u6587\u6c49\u5b57\u7684\u5411\u91cf\u8868\u793a\u3002","title":"5.1 \u4efb\u52a1\u4ecb\u7ecd\u4e0e\u6a21\u578b\u9009\u7528"},{"location":"5.html#52","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u5f0f\u53ca\u5176\u76f8\u5173\u89e3\u91ca\u3002 \u638c\u63e1\u5c06\u6570\u636e\u96c6\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u8fc7\u7a0b\u3002 \u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u5f0f\uff1a 1 \u624b\u5185\u808c\u840e\u7f29 0 \u7f29\u840e\u808c\u5185\u624b 1 \u5c3f\u9ed1\u9178 0 \u9178\u9ed1\u5c3f 1 \u5355\u773c\u773c\u524d\u9ed1\u5f71 0 \u5f71\u9ed1\u524d\u773c\u773c\u5355 1 \u5fe7\u90c1 0 \u90c1\u5fe7 1 \u7ea2\u7ec6\u80de\u5bff\u547d\u7f29\u77ed 0 \u77ed\u7f29\u547d\u5bff\u80de\u7ec6\u7ea2 1 \u76ae\u80a4\u9ecf\u86cb\u767d\u6c89\u79ef 0 \u79ef\u6c89\u767d\u86cb\u9ecf\u80a4\u76ae 1 \u773c\u795e\u5f02\u5e38 0 \u5e38\u5f02\u795e\u773c 1 \u52a8\u8109\u8840\u6c27\u9971\u548c\u5ea6\u964d\u4f4e 0 \u4f4e\u964d\u5ea6\u548c\u9971\u6c27\u8840\u8109\u52a8 \u6570\u636e\u96c6\u7684\u76f8\u5173\u89e3\u91ca\uff1a \u8fd9\u4e9b\u8bad\u7ec3\u96c6\u4e2d\u7684\u6b63\u6837\u672c\u5f80\u5f80\u662f\u57fa\u4e8e\u4eba\u5de5\u5ba1\u6838\u7684\u6807\u51c6\u547d\u540d\u5b9e\u4f53\u3002 \u6570\u636e\u96c6\u4e2d\u7684\u7b2c\u4e00\u5217\u4ee3\u8868\u6807\u7b7e\uff0c1\u4e3a\u6b63\u6807\u7b7e\uff0c\u4ee3\u8868\u540e\u9762\u7684\u6587\u5b57\u662f\u547d\u540d\u5b9e\u4f53\u30020\u4e3a\u8d1f\u6807\u7b7e\uff0c\u4ee3\u8868\u540e\u9762\u7684\u6587\u5b57\u4e0d\u662f\u547d\u540d\u5b9e\u4f53\u3002 \u6570\u636e\u96c6\u4e2d\u7684\u7b2c\u4e8c\u5217\u4e2d\u7684\u547d\u540d\u5b9e\u4f53\u6765\u6e90\u4e8e\u6570\u636e\u5e93\u4e2d\u7684\u75c7\u72b6\u5b9e\u4f53\u540d\u5b57\uff0c\u5b83\u662f\u7ed3\u6784\u5316\u722c\u866b\u6293\u53d6\u7684\u6570\u636e\u3002\u800c\u975e\u547d\u540d\u5b9e\u4f53\u5219\u662f\u5b83\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\u3002 \u6b63\u8d1f\u6837\u672c\u7684\u6bd4\u4f8b\u662f1:1. \u5c06\u6570\u636e\u96c6\u52a0\u8f7d\u5230\u5185\u5b58\uff1a import pandas as pd from collections import Counter # \u8bfb\u53d6\u6570\u636e train_data_path = \"./train_data.csv\" train_data = pd . read_csv ( train_data_path , header = None , sep = \" \\t \" ) # \u6253\u5370\u6b63\u8d1f\u6807\u7b7e\u6bd4\u4f8b print ( dict ( Counter ( train_data [ 0 ] . values ))) # \u8f6c\u6362\u6570\u636e\u5230\u5217\u8868\u5f62\u5f0f train_data = train_data . values . tolist () print ( train_data [: 10 ]) \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_offline/review_model/train.py \u8f93\u51fa\u6548\u679c\uff1a # \u6b63\u8d1f\u6807\u7b7e\u6bd4\u4f8b {1: 5740, 0: 5740} # \u53d6\u51fa10\u6761\u8bad\u7ec3\u6570\u636e\u67e5\u770b [[1, '\u6795\u90e8\u75bc\u75db'], [0, '\u75db\u75bc\u90e8\u6795'], [1, '\u9676\u745f\u5f81\u9633\u6027'], [0, '\u6027\u9633\u5f81\u745f\u9676'], [1, '\u604b\u517d\u578b\u6027\u53d8\u6001'], [0, '\u6001\u53d8\u6027\u578b\u517d\u604b'], [1, '\u8fdb\u98df\u56f0\u96be'], [0, '\u96be\u56f0\u98df\u8fdb'], [1, '\u4f1a\u9634\u7618\u7ba1\u6216\u7aa6\u9053\u5f62\u6210'], [0, '\u6210\u5f62\u9053\u7aa6\u6216\u7ba1\u7618\u9634\u4f1a']] \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u5f0f\u53ca\u5176\u76f8\u5173\u89e3\u91ca\u3002 \u5b66\u4e60\u4e86\u5c06\u6570\u636e\u96c6\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u8fc7\u7a0b\u3002","title":"5.2 \u8bad\u7ec3\u6570\u636e\u96c6"},{"location":"5.html#53-bert","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6709\u5173\u77e5\u8bc6\u548c\u4f5c\u7528\u3002 \u638c\u63e1\u4f7f\u7528BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u53e5\u5b50\u7f16\u7801\u7684\u8fc7\u7a0b\u3002 BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\uff1a BERT\u6a21\u578b\u6574\u4f53\u67b6\u6784\u57fa\u4e8eTransformer\u6a21\u578b\u67b6\u6784\uff0cBERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u7f16\u7801\u5668\u5177\u670912\u5c42\uff0c\u8f93\u51fa\u5c42\u4e2d\u7684\u7ebf\u6027\u5c42\u5177\u6709768\u4e2a\u8282\u70b9\uff0c\u5373\u8f93\u51fa\u5f20\u91cf\u6700\u540e\u4e00\u7ef4\u7684\u7ef4\u5ea6\u662f768. \u5b83\u4f7f\u7528\u7684\u591a\u5934\u6ce8\u610f\u529b\u673a\u5236\u7ed3\u6784\u4e2d\uff0c\u5934\u7684\u6570\u91cf\u4e3a12, \u6a21\u578b\u603b\u53c2\u6570\u91cf\u4e3a110M. \u540c\u65f6\uff0c\u5b83\u5728\u4e2d\u6587\u7b80\u4f53\u548c\u7e41\u4f53\u4e0a\u8fdb\u884c\u8bad\u7ec3\uff0c\u56e0\u6b64\u9002\u5408\u4e2d\u6587\u7b80\u4f53\u548c\u7e41\u4f53\u4efb\u52a1\u3002 BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u4f5c\u7528\uff1a \u5728\u5b9e\u9645\u7684\u6587\u672c\u4efb\u52a1\u5904\u7406\u4e2d\uff0c\u6709\u4e9b\u8bad\u7ec3\u8bed\u6599\u5f88\u96be\u83b7\u5f97\uff0c\u4ed6\u4eec\u7684\u603b\u4f53\u6570\u91cf\u548c\u5305\u542b\u7684\u8bcd\u6c47\u603b\u6570\u90fd\u975e\u5e38\u5c11\uff0c\u4e0d\u9002\u5408\u7528\u4e8e\u8bad\u7ec3\u5e26\u6709Embedding\u5c42\u7684\u6a21\u578b\uff0c\u4f46\u8fd9\u4e9b\u6570\u636e\u4e2d\u5374\u53c8\u8574\u542b\u8fd9\u4e00\u4e9b\u6709\u4ef7\u503c\u7684\u89c4\u5f8b\u53ef\u4ee5\u88ab\u6a21\u578b\u6316\u6398\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u539f\u59cb\u6587\u672c\u8fdb\u884c\u7f16\u7801\u662f\u975e\u5e38\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u9884\u8bad\u7ec3\u6a21\u578b\u6765\u81ea\u5927\u578b\u8bed\u6599\uff0c\u80fd\u591f\u4f7f\u5f97\u5f53\u524d\u6587\u672c\u5177\u6709\u610f\u4e49\uff0c\u867d\u7136\u8fd9\u4e9b\u610f\u4e49\u53ef\u80fd\u5e76\u4e0d\u9488\u5bf9\u67d0\u4e2a\u7279\u5b9a\u9886\u57df\uff0c\u4f46\u662f\u8fd9\u79cd\u7f3a\u9677\u53ef\u4ee5\u4f7f\u7528\u5fae\u8c03\u6a21\u578b\u6765\u8fdb\u884c\u5f25\u8865\u3002 \u4f7f\u7528BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u53e5\u5b50\u7f16\u7801\uff1a import torch import torch.nn as nn # root\u7528\u6237\u4ece\u672c\u5730\u52a0\u8f7d # source = '/root/.cache/torch/hub/huggingface_pytorch-transformers_main' # \u666e\u901a\u7528\u6237xxx\u4ece\u672c\u5730\u52a0\u8f7d # source = '/home/xxx/.cache/torch/hub/huggingface_pytorch-transformers_main' # \u76f4\u63a5\u4f7f\u7528\u9884\u8bad\u7ec3\u7684bert\u4e2d\u6587\u6a21\u578b # model_name = 'bert-base-chinese' # \u901a\u8fc7torch.hub\u83b7\u5f97\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684bert-base-chinese\u6a21\u578b # model = torch.hub.load(source, 'model', model_name, source='local') # \u83b7\u5f97\u5bf9\u5e94\u7684\u5b57\u7b26\u6620\u5c04\u5668\uff0c\u5b83\u5c06\u628a\u4e2d\u6587\u7684\u6bcf\u4e2a\u5b57\u6620\u5c04\u6210\u4e00\u4e2a\u6570\u5b57 # tokenizer = torch.hub.load(source, 'tokenizer', model_name, source='local') # \u4ecegithub\u52a0\u8f7d model_name = 'bert-base-chinese' source = 'huggingface/pytorch-transformers' model = torch . hub . load ( source , 'model' , model_name , source = 'github' ) tokenizer = torch . hub . load ( source , 'tokenizer' , model_name , source = 'github' ) def get_bert_encode_for_single ( text ): \"\"\" description: \u4f7f\u7528bert-chinese\u7f16\u7801\u4e2d\u6587\u6587\u672c :param text: \u8981\u8fdb\u884c\u7f16\u7801\u7684\u6587\u672c :return: \u4f7f\u7528bert\u7f16\u7801\u540e\u7684\u6587\u672c\u5f20\u91cf\u8868\u793a \"\"\" # \u9996\u5148\u4f7f\u7528\u5b57\u7b26\u6620\u5c04\u5668\u5bf9\u6bcf\u4e2a\u6c49\u5b57\u8fdb\u884c\u6620\u5c04 # \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0cbert\u7684tokenizer\u6620\u5c04\u540e\u4f1a\u4e3a\u7ed3\u679c\u524d\u540e\u6dfb\u52a0\u5f00\u59cb\u548c\u7ed3\u675f\u6807\u8bb0\u5373101\u548c102 # \u8fd9\u5bf9\u4e8e\u591a\u6bb5\u6587\u672c\u7684\u7f16\u7801\u662f\u6709\u610f\u4e49\u7684\uff0c\u4f46\u5728\u6211\u4eec\u8fd9\u91cc\u6ca1\u6709\u610f\u4e49\uff0c\u56e0\u6b64\u4f7f\u7528[1:-1]\u5bf9\u5934\u548c\u5c3e\u8fdb\u884c\u5207\u7247 indexed_tokens = tokenizer . encode ( text )[ 1 : - 1 ] # \u4e4b\u540e\u5c06\u5217\u8868\u7ed3\u6784\u8f6c\u5316\u4e3atensor tokens_tensor = torch . LongTensor ([ indexed_tokens ]) #print('tokens_tensor:', tokens_tensor) # \u4f7f\u6a21\u578b\u4e0d\u81ea\u52a8\u8ba1\u7b97\u68af\u5ea6 with torch . no_grad (): # \u8c03\u7528\u6a21\u578b\u83b7\u5f97\u9690\u5c42\u8f93\u51fa encoded_layers = model ( tokens_tensor ) # \u8f93\u51fa\u7684\u9690\u5c42\u662f\u4e00\u4e2a\u4e09\u7ef4\u5f20\u91cf\uff0c\u6700\u5916\u5c42\u4e00\u7ef4\u662f1, \u6211\u4eec\u4f7f\u7528[0]\u964d\u53bb\u5b83\u3002 #print('encoded_layers:', encoded_layers) encoded_layers = encoded_layers [ 0 ] return encoded_layers text = \"\u4f60\u597d\uff0c\u5468\u6770\u4f26\" outputs = get_bert_encode_for_single ( text ) print ( outputs ) \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_offline/review_model/bert_chinese_encode.py \u8f93\u5165\u53c2\u6570\uff1a text = \"\u4f60\u597d\uff0c\u5468\u6770\u4f26\" \u8c03\u7528\uff1a outputs = get_bert_encode_for_single ( text ) print ( outputs ) print ( outputs . shape ) \u8f93\u51fa\u6548\u679c\uff1a tensor([[[ 3.2731e-01, -1.4832e-01, -9.1618e-01, ..., -4.4089e-01, -4.1074e-01, -7.5570e-01], [-1.1287e-01, -7.6269e-01, -6.4860e-01, ..., -8.0478e-01, -5.3600e-01, -3.1953e-01], [-9.3012e-02, -4.4381e-01, -1.1985e+00, ..., -3.6624e-01, -4.7467e-01, -2.6408e-01], [-1.6894e-02, -4.3753e-01, -3.6060e-01, ..., -3.2451e-01, -3.4204e-02, -1.7930e-01], [-1.3159e-01, -3.0048e-01, -2.4193e-01, ..., -4.5755e-02, -2.0958e-01, -1.0649e-01], [-4.0006e-01, -3.4410e-01, -3.6472e-05, ..., 1.9081e-01, 1.7006e-01, -3.6221e-01]]]) torch.Size([1, 6, 768]) \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6709\u5173\u77e5\u8bc6\uff1a BERT\u6a21\u578b\u6574\u4f53\u67b6\u6784\u57fa\u4e8eTransformer\u6a21\u578b\u67b6\u6784\uff0cBERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u7f16\u7801\u5668\u5177\u670912\u5c42\uff0c\u8f93\u51fa\u5c42\u4e2d\u7684\u7ebf\u6027\u5c42\u5177\u6709768\u4e2a\u8282\u70b9\uff0c\u5373\u8f93\u51fa\u5f20\u91cf\u6700\u540e\u4e00\u7ef4\u7684\u7ef4\u5ea6\u662f768. \u5b83\u4f7f\u7528\u7684\u591a\u5934\u6ce8\u610f\u529b\u673a\u5236\u7ed3\u6784\u4e2d\uff0c\u5934\u7684\u6570\u91cf\u4e3a12, \u6a21\u578b\u603b\u53c2\u6570\u91cf\u4e3a110M. \u540c\u65f6\uff0c\u5b83\u5728\u4e2d\u6587\u7b80\u4f53\u548c\u7e41\u4f53\u4e0a\u8fdb\u884c\u8bad\u7ec3\uff0c\u56e0\u6b64\u9002\u5408\u4e2d\u6587\u7b80\u4f53\u548c\u7e41\u4f53\u4efb\u52a1\u3002 \u5b66\u4e60\u4e86BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u4f5c\u7528\uff1a \u5728\u5b9e\u9645\u7684\u6587\u672c\u4efb\u52a1\u5904\u7406\u4e2d\uff0c\u6709\u4e9b\u8bad\u7ec3\u8bed\u6599\u5f88\u96be\u83b7\u5f97\uff0c\u4ed6\u4eec\u7684\u603b\u4f53\u6570\u91cf\u548c\u5305\u542b\u7684\u8bcd\u6c47\u603b\u6570\u90fd\u975e\u5e38\u5c11\uff0c\u4e0d\u9002\u5408\u7528\u4e8e\u8bad\u7ec3\u5e26\u6709Embedding\u5c42\u7684\u6a21\u578b\uff0c\u4f46\u8fd9\u4e9b\u6570\u636e\u4e2d\u5374\u53c8\u8574\u542b\u8fd9\u4e00\u4e9b\u6709\u4ef7\u503c\u7684\u89c4\u5f8b\u53ef\u4ee5\u88ab\u6a21\u578b\u6316\u6398\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u539f\u59cb\u6587\u672c\u8fdb\u884c\u7f16\u7801\u662f\u975e\u5e38\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u9884\u8bad\u7ec3\u6a21\u578b\u6765\u81ea\u5927\u578b\u8bed\u6599\uff0c\u80fd\u591f\u4f7f\u5f97\u5f53\u524d\u6587\u672c\u5177\u6709\u610f\u4e49\uff0c\u867d\u7136\u8fd9\u4e9b\u610f\u4e49\u53ef\u80fd\u5e76\u4e0d\u9488\u5bf9\u67d0\u4e2a\u7279\u5b9a\u9886\u57df\uff0c\u4f46\u662f\u8fd9\u79cd\u7f3a\u9677\u53ef\u4ee5\u4f7f\u7528\u5fae\u8c03\u6a21\u578b\u6765\u8fdb\u884c\u5f25\u8865\u3002 \u5b66\u4e60\u4e86\u4f7f\u7528BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u53e5\u5b50\u7f16\u7801\u7684\u51fd\u6570\uff1aget_bert_encode_for_single(text)","title":"5.3 BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b"},{"location":"5.html#54-rnn","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u5b66\u4e60RNN\u6a21\u578b\u7684\u5185\u90e8\u7ed3\u6784\u53ca\u8ba1\u7b97\u516c\u5f0f\u3002 \u638c\u63e1RNN\u6a21\u578b\u7684\u5b9e\u73b0\u8fc7\u7a0b\u3002 \u4f20\u7edfRNN\u7684\u5185\u90e8\u7ed3\u6784\u56fe\uff1a \u7ed3\u6784\u89e3\u91ca\u56fe\uff1a \u5185\u90e8\u7ed3\u6784\u5206\u6790\uff1a * \u6211\u4eec\u628a\u76ee\u5149\u96c6\u4e2d\u5728\u4e2d\u95f4\u7684\u65b9\u5757\u90e8\u5206\uff0c\u5b83\u7684\u8f93\u5165\u6709\u4e24\u90e8\u5206\uff0c\u5206\u522b\u662fh(t-1)\u4ee5\u53cax(t), \u4ee3\u8868\u4e0a\u4e00\u65f6\u95f4\u6b65\u7684\u9690\u5c42\u8f93\u51fa\uff0c\u4ee5\u53ca\u6b64\u65f6\u95f4\u6b65\u7684\u8f93\u5165\uff0c\u5b83\u4eec\u8fdb\u5165RNN\u7ed3\u6784\u4f53\u540e\uff0c\u4f1a\"\u878d\u5408\"\u5230\u4e00\u8d77\uff0c\u8fd9\u79cd\u878d\u5408\u6211\u4eec\u6839\u636e\u7ed3\u6784\u89e3\u91ca\u53ef\u77e5\uff0c\u662f\u5c06\u4e8c\u8005\u8fdb\u884c\u62fc\u63a5\uff0c\u5f62\u6210\u65b0\u7684\u5f20\u91cf[x(t), h(t-1)], \u4e4b\u540e\u8fd9\u4e2a\u65b0\u7684\u5f20\u91cf\u5c06\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42(\u7ebf\u6027\u5c42), \u8be5\u5c42>\u4f7f\u7528tanh\u4f5c\u4e3a\u6fc0\u6d3b\u51fd\u6570\uff0c\u6700\u7ec8\u5f97\u5230\u8be5\u65f6\u95f4\u6b65\u7684\u8f93\u51fah(t), \u5b83\u5c06\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684>\u8f93\u5165\u548cx(t+1)\u4e00\u8d77\u8fdb\u5165\u7ed3\u6784\u4f53\u3002\u4ee5\u6b64\u7c7b\u63a8\u3002 \u5185\u90e8\u7ed3\u6784\u8fc7\u7a0b\u6f14\u793a\uff1a \u6839\u636e\u7ed3\u6784\u5206\u6790\u5f97\u51fa\u5185\u90e8\u8ba1\u7b97\u516c\u5f0f\uff1a $$ h_t = \\tanh(W_t[X_t, h_{t-1}]+b_t) $$ \u6fc0\u6d3b\u51fd\u6570tanh\u7684\u4f5c\u7528\uff1a * \u7528\u4e8e\u5e2e\u52a9\u8c03\u8282\u6d41\u7ecf\u7f51\u7edc\u7684\u503c\uff0ctanh\u51fd\u6570\u5c06\u503c\u538b\u7f29\u5728-1\u548c1\u4e4b\u95f4\u3002 \u6784\u5efaRNN\u6a21\u578b\u7684\u4ee3\u7801\u5206\u6790\uff1a import torch import torch.nn as nn class RNN ( nn . Module ): def __init__ ( self , input_size , hidden_size , output_size ): ''' :param input_size: \u8f93\u5165\u5f20\u91cf\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f :param hidden_size: \u9690\u85cf\u5c42\u5f20\u91cf\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f :param output_size: \u8f93\u51fa\u5f20\u91cf\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f ''' super ( RNN , self ) . __init__ () # \u5c06\u9690\u85cf\u5c42\u7684\u5927\u5c0f\u5199\u6210\u7c7b\u7684\u5185\u90e8\u53d8\u91cf self . hidden_size = hidden_size # \u6784\u5efa\u7b2c\u4e00\u4e2a\u7ebf\u6027\u5c42\uff0c\u8f93\u5165\u5c3a\u5bf8\u662finput_size+hidden_size, \u56e0\u4e3a\u771f\u6b63\u8fdb\u5165\u5168\u8fde\u63a5\u5c42\u7684\u5f20\u91cf\u662fX(t)+h(t-1) # \u8f93\u51fa\u5c3a\u5bf8\u662fhidden_size self . i2h = nn . Linear ( input_size + hidden_size , hidden_size ) # tanh self . tanh = nn . Tanh () # \u6784\u5efa\u7b2c\u4e8c\u4e2a\u7ebf\u6027\u5c42\uff0c\u8f93\u5165\u5c3a\u5bf8\u662fhidden_size # \u8f93\u51fa\u5c3a\u5bf8\u662foutput_size self . i2o = nn . Linear ( hidden_size , output_size ) # \u5b9a\u4e49\u6700\u7ec8\u8f93\u51fa\u7684softmax\u5904\u7406\u5c42 self . softmax = nn . LogSoftmax ( dim =- 1 ) def forward ( self , input1 , hidden1 ): ''' :param input1: \u76f8\u5f53\u4e0ex(t) :param hidden1: \u76f8\u5f53\u4e8eh(t-1) :return: ''' # \u9996\u5148\u8981\u8fdb\u884c\u8f93\u5165\u5f20\u91cf\u7684\u62fc\u63a5\uff0c\u5c06x(t)\u548ch(t-1)\u62fc\u63a5\u5728\u4e00\u8d77 combined = torch . cat (( input1 , hidden1 ), 1 ) # \u8ba9\u8f93\u5165\u7ecf\u8fc7\u9690\u85cf\u5c42\u7684\u83b7\u5f97hidden hidden = self . i2h ( combined ) # tanh\u5c42 hidden = self . tanh ( hidden ) # print('hidden.shape:', hidden.shape) # \u8ba9\u8f93\u5165\u7ecf\u8fc7\u8f93\u51fa\u5c42\u83b7\u5f97output output = self . i2o ( hidden ) # \u8ba9output\u7ecf\u8fc7softmax\u5c42 output = self . softmax ( output ) # \u8fd4\u56de\u4e24\u4e2a\u5f20\u91cfoutput, hidden return output , hidden def initHidden ( self ): # \u5c06\u9690\u85cf\u5c42\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a[1, hidden_size]\u7684\u5168\u96f6\u5f20\u91cf return torch . zeros ( 1 , self . hidden_size ) torch.cat\u6f14\u793a\uff1a >>> x = torch.randn(2, 3) >>> x tensor([[ 0.6580, -1.0969, -0.4614], [-0.1034, -0.5790, 0.1497]]) >>> torch.cat((x, x, x), 0) tensor([[ 0.6580, -1.0969, -0.4614], [-0.1034, -0.5790, 0.1497], [ 0.6580, -1.0969, -0.4614], [-0.1034, -0.5790, 0.1497], [ 0.6580, -1.0969, -0.4614], [-0.1034, -0.5790, 0.1497]]) >>> torch.cat((x, x, x), 1) ensor([[ 0.6580, -1.0969, -0.4614, 0.6580, -1.0969, -0.4614, 0.6580,-1.0969, -0.4614], [-0.1034, -0.5790, 0.1497, -0.1034, -0.5790, 0.1497, -0.1034,-0.5790, 0.1497]]) \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_offline/review_model/RNN_MODEL.py \u5b9e\u4f8b\u5316\u53c2\u6570\uff1a input_size = 768 hidden_size = 128 n_categories = 2 \u8f93\u5165\u53c2\u6570\uff1a input = torch . rand ( 1 , input_size ) hidden = torch . rand ( 1 , hidden_size ) \u8c03\u7528\uff1a from RNN_MODEL import RNN rnn = RNN ( input_size , hidden_size , n_categories ) outputs , hidden = rnn ( input , hidden ) print ( \"outputs:\" , outputs ) print ( \"hidden:\" , hidden ) \u8f93\u51fa\u6548\u679c\uff1a outputs: tensor([[-0.7858, -0.6084]], grad_fn=<LogSoftmaxBackward>) hidden: tensor([[-4.8444e-01, -5.9609e-02, 1.7870e-01, -1.6553e-01, ... , 5.6711e-01]], grad_fn=<AddmmBackward>)) \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86RNN\u6a21\u578b\u7684\u5185\u90e8\u7ed3\u6784\u53ca\u8ba1\u7b97\u516c\u5f0f\u3002 \u5b66\u4e60\u5e76\u5b9e\u73b0\u4e86RNN\u6a21\u578b\u7684\u7c7b\uff1aclass RNN(nn.Module).","title":"5.4 \u6784\u5efaRNN\u6a21\u578b"},{"location":"5.html#55","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u7684\u6b65\u9aa4\u3002 \u638c\u63e1\u6a21\u578b\u8bad\u7ec3\u4e2d\u6bcf\u4e2a\u6b65\u9aa4\u7684\u5b9e\u73b0\u8fc7\u7a0b\u3002 \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u7684\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u6784\u5efa\u968f\u673a\u9009\u53d6\u6570\u636e\u51fd\u6570\u3002 \u7b2c\u4e8c\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570\u3002 \u7b2c\u4e09\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u9a8c\u8bc1\u51fd\u6570\u3002 \u7b2c\u56db\u6b65\uff1a\u8c03\u7528\u8bad\u7ec3\u548c\u9a8c\u8bc1\u51fd\u6570\u3002 \u7b2c\u4e94\u6b65\uff1a\u7ed8\u5236\u8bad\u7ec3\u548c\u9a8c\u8bc1\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf\u3002 \u7b2c\u516d\u6b65\uff1a\u6a21\u578b\u4fdd\u5b58\u3002 \u7b2c\u4e00\u6b65\uff1a\u6784\u5efa\u968f\u673a\u9009\u53d6\u6570\u636e\u51fd\u6570 # \u5bfc\u5165bert\u4e2d\u6587\u7f16\u7801\u7684\u9884\u8bad\u7ec3\u6a21\u578b from bert_chinese_encode import get_bert_encode_for_single def randomTrainingExample ( train_data ): \"\"\"\u968f\u673a\u9009\u53d6\u6570\u636e\u51fd\u6570\uff0ctrain_data\u662f\u8bad\u7ec3\u96c6\u7684\u5217\u8868\u5f62\u5f0f\u6570\u636e\"\"\" # \u4ecetrain_data\u968f\u673a\u9009\u62e9\u4e00\u6761\u6570\u636e category , line = random . choice ( train_data ) # \u5c06\u91cc\u9762\u7684\u6587\u5b57\u4f7f\u7528bert\u8fdb\u884c\u7f16\u7801\uff0c\u83b7\u53d6\u7f16\u7801\u540e\u7684tensor\u7c7b\u578b\u6570\u636e line_tensor = get_bert_encode_for_single ( line ) # \u5c06\u5206\u7c7b\u6807\u7b7e\u5c01\u88c5\u6210tensor category_tensor = torch . tensor ([ int ( category )]) # \u8fd4\u56de\u56db\u4e2a\u7ed3\u679c return category , line , category_tensor , line_tensor \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/doctor_offline/review_model/train.py \u8f93\u5165\u53c2\u6570\uff1a # \u5c06\u6570\u636e\u96c6\u52a0\u8f7d\u5230\u5185\u5b58\u83b7\u5f97\u7684train_data \u8c03\u7528\uff1a # \u9009\u62e910\u6761\u6570\u636e\u8fdb\u884c\u67e5\u770b for i in range(10): category, line, category_tensor, line_tensor = randomTrainingExample(train_data) print('category =', category, '/ line =', line) \u8f93\u51fa\u6548\u679c\uff1a category = 1 / line = \u89e6\u89c9\u5931\u8c03 category = 0 / line = \u98a4\u9707\u6027\u7406\u751f category = 0 / line = \u5f81\u538b\u8840\u9ad8\u5a20\u598a category = 1 / line = \u98df\u6b32\u51cf\u9000 category = 0 / line = \u8840\u6de4\u9053\u80a0\u80c3 category = 0 / line = \u5f62\u7578\u8282\u5173 category = 0 / line = \u54b3\u545b\u6c34\u996e category = 0 / line = \u75c7\u75e3\u5de8 category = 1 / line = \u663c\u76f2 category = 1 / line = \u773c\u795e\u5f02\u5e38 \u7b2c\u4e8c\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570 # \u9009\u53d6\u635f\u5931\u51fd\u6570\u4e3aNLLLoss() # CrossEntropyLoss\u5c31\u662f\u628a\u4ee5\u4e0aSoftmax\u2013Log\u2013NLLLoss criterion = nn . NLLLoss () # \u5b66\u4e60\u7387\u4e3a0.005 learning_rate = 0.005 def train ( category_tensor , line_tensor ): \"\"\"\u6a21\u578b\u8bad\u7ec3\u51fd\u6570\uff0ccategory_tensor\u4ee3\u8868\u7c7b\u522b\u5f20\u91cf\uff0cline_tensor\u4ee3\u8868\u7f16\u7801\u540e\u7684\u6587\u672c\u5f20\u91cf\"\"\" # \u521d\u59cb\u5316\u9690\u5c42 hidden = rnn . initHidden () # \u6a21\u578b\u68af\u5ea6\u5f520 rnn . zero_grad () # \u904d\u5386line_tensor\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u7684\u5f20\u91cf\u8868\u793a for i in range ( line_tensor . size ()[ 1 ]): # \u7136\u540e\u5c06\u5176\u8f93\u5165\u5230rnn\u6a21\u578b\u4e2d\uff0c\u56e0\u4e3a\u6a21\u578b\u8981\u6c42\u662f\u8f93\u5165\u5fc5\u987b\u662f\u4e8c\u7ef4\u5f20\u91cf\uff0c\u56e0\u6b64\u9700\u8981\u62d3\u5c55\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u5faa\u73af\u8c03\u7528rnn\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u5b57 output , hidden = rnn ( line_tensor [ 0 ][ i ] . unsqueeze ( 0 ), hidden ) # \u6839\u636e\u635f\u5931\u51fd\u6570\u8ba1\u7b97\u635f\u5931\uff0c\u8f93\u5165\u5206\u522b\u662frnn\u7684\u8f93\u51fa\u7ed3\u679c\u548c\u771f\u6b63\u7684\u7c7b\u522b\u6807\u7b7e loss = criterion ( output , category_tensor ) # \u5c06\u8bef\u5dee\u8fdb\u884c\u53cd\u5411\u4f20\u64ad loss . backward () # \u66f4\u65b0\u6a21\u578b\u4e2d\u6240\u6709\u7684\u53c2\u6570 for p in rnn . parameters (): # \u5c06\u53c2\u6570\u7684\u5f20\u91cf\u8868\u793a\u4e0e\u53c2\u6570\u7684\u68af\u5ea6\u4e58\u4ee5\u5b66\u4e60\u7387\u7684\u7ed3\u679c\u76f8\u52a0\u4ee5\u6b64\u6765\u66f4\u65b0\u53c2\u6570 p . data . add_ ( - learning_rate , p . grad . data ) # \u8fd4\u56de\u7ed3\u679c\u548c\u635f\u5931\u7684\u503c return output , loss . item () \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_offline/review_model/train.py \u7b2c\u4e09\u6b65\uff1a\u6a21\u578b\u9a8c\u8bc1\u51fd\u6570 def valid ( category_tensor , line_tensor ): \"\"\"\u6a21\u578b\u9a8c\u8bc1\u51fd\u6570\uff0ccategory_tensor\u4ee3\u8868\u7c7b\u522b\u5f20\u91cf\uff0cline_tensor\u4ee3\u8868\u7f16\u7801\u540e\u7684\u6587\u672c\u5f20\u91cf\"\"\" # \u521d\u59cb\u5316\u9690\u5c42 hidden = rnn . initHidden () # \u9a8c\u8bc1\u6a21\u578b\u4e0d\u81ea\u52a8\u6c42\u89e3\u68af\u5ea6 with torch . no_grad (): # \u904d\u5386line_tensor\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u7684\u5f20\u91cf\u8868\u793a for i in range ( line_tensor . size ()[ 1 ]): # \u7136\u540e\u5c06\u5176\u8f93\u5165\u5230rnn\u6a21\u578b\u4e2d\uff0c\u56e0\u4e3a\u6a21\u578b\u8981\u6c42\u662f\u8f93\u5165\u5fc5\u987b\u662f\u4e8c\u7ef4\u5f20\u91cf\uff0c\u56e0\u6b64\u9700\u8981\u62d3\u5c55\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u5faa\u73af\u8c03\u7528rnn\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u5b57 output , hidden = rnn ( line_tensor [ 0 ][ i ] . unsqueeze ( 0 ), hidden ) # \u83b7\u5f97\u635f\u5931 loss = criterion ( output , category_tensor ) # \u8fd4\u56de\u7ed3\u679c\u548c\u635f\u5931\u7684\u503c return output , loss . item () \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_offline/review_model/train.py \u8ba1\u7b97\u65f6\u95f4\u51fd\u6570 # \u6784\u5efa\u65f6\u95f4\u8ba1\u7b97\u51fd\u6570 def timeSince ( since ): \"\u83b7\u5f97\u6bcf\u6b21\u6253\u5370\u7684\u8bad\u7ec3\u8017\u65f6\uff0csince\u662f\u8bad\u7ec3\u5f00\u59cb\u65f6\u95f4\" # \u83b7\u5f97\u5f53\u524d\u65f6\u95f4 now = time . time () # \u83b7\u5f97\u65f6\u95f4\u5dee\uff0c\u5c31\u662f\u8bad\u7ec3\u8017\u65f6 s = now - since # \u5c06\u79d2\u8f6c\u5316\u4e3a\u5206\u949f\uff0c\u5e76\u53d6\u6574 m = math . floor ( s / 60 ) # \u8ba1\u7b97\u5269\u4e0b\u4e0d\u591f\u51d1\u62101\u5206\u949f\u7684\u79d2\u6570 s -= m * 60 # \u8fd4\u56de\u6307\u5b9a\u683c\u5f0f\u7684\u8017\u65f6 return ' %d m %d s' % ( m , s ) \u8f93\u5165\u53c2\u6570\uff1a # \u5047\u5b9a\u6a21\u578b\u8bad\u7ec3\u5f00\u59cb\u65f6\u95f4\u662f10min\u4e4b\u524d since = time.time() - 10*60 \u8c03\u7528\uff1a period = timeSince(since) print(period) \u8f93\u51fa\u6548\u679c\uff1a 10m 0s \u8c03\u7528\u8bad\u7ec3\u548c\u9a8c\u8bc1\u51fd\u6570\u5e76\u6253\u5370\u65e5\u5fd7 # \u8bbe\u7f6e\u8fed\u4ee3\u6b21\u6570\u4e3a50000\u6b65 n_iters = 50000 # \u6253\u5370\u95f4\u9694\u4e3a1000\u6b65 plot_every = 1000 # \u521d\u59cb\u5316\u6253\u5370\u95f4\u9694\u4e2d\u8bad\u7ec3\u548c\u9a8c\u8bc1\u7684\u635f\u5931\u548c\u51c6\u786e\u7387 train_current_loss = 0 train_current_acc = 0 valid_current_loss = 0 valid_current_acc = 0 # \u521d\u59cb\u5316\u76db\u88c5\u6bcf\u6b21\u6253\u5370\u95f4\u9694\u7684\u5e73\u5747\u635f\u5931\u548c\u51c6\u786e\u7387 all_train_losses = [] all_train_acc = [] all_valid_losses = [] all_valid_acc = [] # \u83b7\u53d6\u5f00\u59cb\u65f6\u95f4\u6233 start = time . time () # \u5faa\u73af\u904d\u5386n_iters\u6b21 for iter in range ( 1 , n_iters + 1 ): # \u8c03\u7528\u4e24\u6b21\u968f\u673a\u51fd\u6570\u5206\u522b\u751f\u6210\u4e00\u6761\u8bad\u7ec3\u548c\u9a8c\u8bc1\u6570\u636e category , line , category_tensor , line_tensor = randomTrainingExample ( train_data [: 9000 ]) category_ , line_ , category_tensor_ , line_tensor_ = randomTrainingExample ( train_data [ 9000 :]) # \u5206\u522b\u8c03\u7528\u8bad\u7ec3\u548c\u9a8c\u8bc1\u51fd\u6570\uff0c\u83b7\u5f97\u8f93\u51fa\u548c\u635f\u5931 train_output , train_loss = train ( category_tensor , line_tensor ) valid_output , valid_loss = valid ( category_tensor_ , line_tensor_ ) # \u8fdb\u884c\u8bad\u7ec3\u635f\u5931\uff0c\u9a8c\u8bc1\u635f\u5931\uff0c\u8bad\u7ec3\u51c6\u786e\u7387\u548c\u9a8c\u8bc1\u51c6\u786e\u7387\u5206\u522b\u7d2f\u52a0 train_current_loss += train_loss train_current_acc += ( train_output . argmax ( 1 ) == category_tensor ) . sum () . item () valid_current_loss += valid_loss valid_current_acc += ( valid_output . argmax ( 1 ) == category_tensor_ ) . sum () . item () # \u5f53\u8fed\u4ee3\u6b21\u6570\u662f\u6307\u5b9a\u6253\u5370\u95f4\u9694\u7684\u6574\u6570\u500d\u65f6 if iter % plot_every == 0 : # \u7528\u521a\u521a\u7d2f\u52a0\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u9664\u4ee5\u95f4\u9694\u6b65\u6570\u5f97\u5230\u5e73\u5747\u503c train_average_loss = train_current_loss / plot_every train_average_acc = train_current_acc / plot_every valid_average_loss = valid_current_loss / plot_every valid_average_acc = valid_current_acc / plot_every # \u6253\u5370\u8fed\u4ee3\u6b65\uff0c\u8017\u65f6\uff0c\u8bad\u7ec3\u635f\u5931\u548c\u51c6\u786e\u7387\uff0c\u9a8c\u8bc1\u635f\u5931\u548c\u51c6\u786e\u7387 print ( \"Iter:\" , iter , \"|\" , \"TimeSince:\" , timeSince ( start )) print ( \"Train Loss:\" , train_average_loss , \"|\" , \"Train Acc:\" , train_average_acc ) print ( \"Valid Loss:\" , valid_average_loss , \"|\" , \"Valid Acc:\" , valid_average_acc ) # \u5c06\u7ed3\u679c\u5b58\u5165\u5bf9\u5e94\u7684\u5217\u8868\u4e2d\uff0c\u65b9\u4fbf\u540e\u7eed\u5236\u56fe all_train_losses . append ( train_average_loss ) all_train_acc . append ( train_average_acc ) all_valid_losses . append ( valid_average_loss ) all_valid_acc . append ( valid_average_acc ) # \u5c06\u8be5\u95f4\u9694\u7684\u8bad\u7ec3\u548c\u9a8c\u8bc1\u635f\u5931\u53ca\u5176\u51c6\u786e\u7387\u5f520 train_current_loss = 0 train_current_acc = 0 valid_current_loss = 0 valid_current_acc = 0 \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_offline/review_model/train.py \u8f93\u51fa\u6548\u679c\uff1a Iter: 1000 | TimeSince: 0m 56s Train Loss: 0.6127021567507527 | Train Acc: 0.747 Valid Loss: 0.6702297774022868 | Valid Acc: 0.7 Iter: 2000 | TimeSince: 1m 52s Train Loss: 0.5190641692602076 | Train Acc: 0.789 Valid Loss: 0.5217500487511397 | Valid Acc: 0.784 Iter: 3000 | TimeSince: 2m 48s Train Loss: 0.5398398997281778 | Train Acc: 0.8 Valid Loss: 0.5844468013737023 | Valid Acc: 0.777 Iter: 4000 | TimeSince: 3m 43s Train Loss: 0.4700755337187358 | Train Acc: 0.822 Valid Loss: 0.5140456306522071 | Valid Acc: 0.802 Iter: 5000 | TimeSince: 4m 38s Train Loss: 0.5260879981063878 | Train Acc: 0.804 Valid Loss: 0.5924804099237979 | Valid Acc: 0.796 Iter: 6000 | TimeSince: 5m 33s Train Loss: 0.4702717279043861 | Train Acc: 0.825 Valid Loss: 0.6675750375208704 | Valid Acc: 0.78 Iter: 7000 | TimeSince: 6m 27s Train Loss: 0.4734503294042624 | Train Acc: 0.833 Valid Loss: 0.6329268293256277 | Valid Acc: 0.784 Iter: 8000 | TimeSince: 7m 23s Train Loss: 0.4258338176879665 | Train Acc: 0.847 Valid Loss: 0.5356959595441066 | Valid Acc: 0.82 Iter: 9000 | TimeSince: 8m 18s Train Loss: 0.45773495503464817 | Train Acc: 0.843 Valid Loss: 0.5413714128659645 | Valid Acc: 0.798 Iter: 10000 | TimeSince: 9m 14s Train Loss: 0.4856756244019302 | Train Acc: 0.835 Valid Loss: 0.5450502399195044 | Valid Acc: 0.813 \u7b2c\u4e94\u6b65\uff1a\u7ed8\u5236\u8bad\u7ec3\u548c\u9a8c\u8bc1\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf import matplotlib.pyplot as plt plt . figure ( 0 ) plt . plot ( all_train_losses , label = \"Train Loss\" ) plt . plot ( all_valid_losses , color = \"red\" , label = \"Valid Loss\" ) plt . legend ( loc = 'upper left' ) plt . savefig ( \"./loss.png\" ) plt . figure ( 1 ) plt . plot ( all_train_acc , label = \"Train Acc\" ) plt . plot ( all_valid_acc , color = \"red\" , label = \"Valid Acc\" ) plt . legend ( loc = 'upper left' ) plt . savefig ( \"./acc.png\" ) \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/doctor_offline/review_model/train.py \u8bad\u7ec3\u548c\u9a8c\u8bc1\u635f\u5931\u5bf9\u7167\u66f2\u7ebf\uff1a \u8bad\u7ec3\u548c\u9a8c\u8bc1\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf\uff1a \u5206\u6790\uff1a \u635f\u5931\u5bf9\u7167\u66f2\u7ebf\u4e00\u76f4\u4e0b\u964d\uff0c\u8bf4\u660e\u6a21\u578b\u80fd\u591f\u4ece\u6570\u636e\u4e2d\u83b7\u53d6\u89c4\u5f8b\uff0c\u6b63\u5728\u6536\u655b\uff0c\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf\u4e2d\u9a8c\u8bc1\u51c6\u786e\u7387\u4e00\u76f4\u4e0a\u5347\uff0c\u6700\u7ec8\u7ef4\u6301\u57280.98\u5de6\u53f3\u3002 \u7b2c\u516d\u6b65\uff1a\u6a21\u578b\u4fdd\u5b58 # \u4fdd\u5b58\u8def\u5f84 MODEL_PATH = './BERT_RNN.pth' # \u4fdd\u5b58\u6a21\u578b\u53c2\u6570 torch.save(rnn.state_dict(), MODEL_PATH) \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/doctor_offline/review_model/train.py \u8f93\u51fa\u6548\u679c\uff1a \u5728/data/doctor_offline/review_model/\u8def\u5f84\u4e0b\u751f\u6210BERT_RNN.pth\u6587\u4ef6\u3002 \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u7684\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u6784\u5efa\u968f\u673a\u9009\u53d6\u6570\u636e\u51fd\u6570\u3002 \u7b2c\u4e8c\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570\u3002 \u7b2c\u4e09\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u9a8c\u8bc1\u51fd\u6570\u3002 \u7b2c\u56db\u6b65\uff1a\u8c03\u7528\u8bad\u7ec3\u548c\u9a8c\u8bc1\u51fd\u6570\u3002 \u7b2c\u4e94\u6b65\uff1a\u7ed8\u5236\u8bad\u7ec3\u548c\u9a8c\u8bc1\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf\u3002 \u7b2c\u516d\u6b65\uff1a\u6a21\u578b\u4fdd\u5b58\u3002","title":"5.5 \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3"},{"location":"5.html#56","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u638c\u63e1\u6a21\u578b\u9884\u6d4b\u7684\u5b9e\u73b0\u8fc7\u7a0b\u3002 \u638c\u63e1\u6a21\u578b\u6279\u91cf\u9884\u6d4b\u7684\u5b9e\u73b0\u8fc7\u7a0b\u3002 \u6a21\u578b\u9884\u6d4b\u7684\u5b9e\u73b0\u8fc7\u7a0b\uff1a import os import torch import torch.nn as nn # \u5bfc\u5165RNN\u6a21\u578b\u7ed3\u6784 from RNN_MODEL import RNN # \u5bfc\u5165bert\u9884\u8bad\u7ec3\u6a21\u578b\u7f16\u7801\u51fd\u6570 from bert_chinese_encode import get_bert_encode_for_single # \u9884\u52a0\u8f7d\u7684\u6a21\u578b\u53c2\u6570\u8def\u5f84 MODEL_PATH = './BERT_RNN.pth' # \u9690\u5c42\u8282\u70b9\u6570\uff0c\u8f93\u5165\u5c42\u5c3a\u5bf8\uff0c\u7c7b\u522b\u6570\u90fd\u548c\u8bad\u7ec3\u65f6\u76f8\u540c\u5373\u53ef n_hidden = 128 input_size = 768 n_categories = 2 # \u5b9e\u4f8b\u5316RNN\u6a21\u578b\uff0c\u5e76\u52a0\u8f7d\u4fdd\u5b58\u6a21\u578b\u53c2\u6570 rnn = RNN ( input_size , n_hidden , n_categories ) rnn . load_state_dict ( torch . load ( MODEL_PATH )) def _test ( line_tensor ): \"\"\"\u6a21\u578b\u6d4b\u8bd5\u51fd\u6570\uff0c\u5b83\u5c06\u7528\u5728\u6a21\u578b\u9884\u6d4b\u51fd\u6570\u4e2d\uff0c\u7528\u4e8e\u8c03\u7528RNN\u6a21\u578b\u5e76\u8fd4\u56de\u7ed3\u679c\u3002 \u5b83\u7684\u53c2\u6570line_tensor\u4ee3\u8868\u8f93\u5165\u6587\u672c\u7684\u5f20\u91cf\u8868\u793a\"\"\" # \u521d\u59cb\u5316\u9690\u5c42\u5f20\u91cf hidden = rnn . initHidden () # \u4e0e\u8bad\u7ec3\u65f6\u76f8\u540c\uff0c\u904d\u5386\u8f93\u5165\u6587\u672c\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26 for i in range ( line_tensor . size ()[ 1 ]): # \u5c06\u5176\u9010\u6b21\u8f93\u9001\u7ed9rnn\u6a21\u578b output , hidden = rnn ( line_tensor [ 0 ][ i ] . unsqueeze ( 0 ), hidden ) # \u83b7\u5f97rnn\u6a21\u578b\u6700\u7ec8\u7684\u8f93\u51fa return output def predict ( input_line ): \"\"\"\u6a21\u578b\u9884\u6d4b\u51fd\u6570\uff0c\u8f93\u5165\u53c2\u6570input_line\u4ee3\u8868\u9700\u8981\u9884\u6d4b\u7684\u6587\u672c\"\"\" # \u4e0d\u81ea\u52a8\u6c42\u89e3\u68af\u5ea6 with torch . no_grad (): # \u5c06input_line\u4f7f\u7528bert\u6a21\u578b\u8fdb\u884c\u7f16\u7801 output = _test ( get_bert_encode_for_single ( input_line )) # \u4eceoutput\u4e2d\u53d6\u51fa\u6700\u5927\u503c\u5bf9\u5e94\u7684\u7d22\u5f15\uff0c\u6bd4\u8f83\u7684\u7ef4\u5ea6\u662f1 _ , topi = output . topk ( 1 , 1 ) # \u8fd4\u56de\u7ed3\u679c\u6570\u503c return topi . item () tensor.topk\u6f14\u793a\uff1a >>> tr = torch.randn(1, 2) >>> tr tensor([[-0.1808, -1.4170]]) >>> tr.topk(1, 1) torch.return_types.topk(values=tensor([[-0.1808]]), indices=tensor([[0]])) \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_offline/review_model/predict.py \u8f93\u5165\u53c2\u6570\uff1a input_line = \"\u70b9\u7600\u6837\u5c16\u9488\u6027\u53d1\u591a\" \u8c03\u7528\uff1a result = predict(input_line) print(\"result:\", result) \u8f93\u51fa\u6548\u679c\uff1a result: 0 \u6a21\u578b\u6279\u91cf\u9884\u6d4b\u7684\u5b9e\u73b0\u8fc7\u7a0b\uff1a def batch_predict ( input_path , output_path ): \"\"\"\u6279\u91cf\u9884\u6d4b\u51fd\u6570\uff0c\u4ee5\u539f\u59cb\u6587\u672c(\u5f85\u8bc6\u522b\u7684\u547d\u540d\u5b9e\u4f53\u7ec4\u6210\u7684\u6587\u4ef6)\u8f93\u5165\u8def\u5f84 \u548c\u9884\u6d4b\u8fc7\u6ee4\u540e(\u53bb\u9664\u6389\u975e\u547d\u540d\u5b9e\u4f53\u7684\u6587\u4ef6)\u7684\u8f93\u51fa\u8def\u5f84\u4e3a\u53c2\u6570\"\"\" # \u5f85\u8bc6\u522b\u7684\u547d\u540d\u5b9e\u4f53\u7ec4\u6210\u7684\u6587\u4ef6\u662f\u4ee5\u75be\u75c5\u540d\u79f0\u4e3acsv\u6587\u4ef6\u540d\uff0c # \u6587\u4ef6\u4e2d\u7684\u6bcf\u4e00\u884c\u662f\u8be5\u75be\u75c5\u5bf9\u5e94\u7684\u75c7\u72b6\u547d\u540d\u5b9e\u4f53 # \u8bfb\u53d6\u8def\u5f84\u4e0b\u7684\u6bcf\u4e00\u4e2acsv\u6587\u4ef6\u540d\uff0c\u88c5\u5165csv\u5217\u8868\u4e4b\u4e2d csv_list = os . listdir ( input_path ) # \u904d\u5386\u6bcf\u4e00\u4e2acsv\u6587\u4ef6 for csv in csv_list : # \u4ee5\u8bfb\u7684\u65b9\u5f0f\u6253\u5f00\u6bcf\u4e00\u4e2acsv\u6587\u4ef6 with open ( os . path . join ( input_path , csv ), \"r\" ) as fr : # \u518d\u4ee5\u5199\u7684\u65b9\u5f0f\u6253\u5f00\u8f93\u51fa\u8def\u5f84\u7684\u540c\u540dcsv\u6587\u4ef6 with open ( os . path . join ( output_path , csv ), \"w\" ) as fw : input_lines = fr . readlines () # \u8bfb\u53d6csv\u6587\u4ef6\u7684\u6bcf\u4e00\u884c for input_line in input_lines : print ( csv , input_line ) # \u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u9884\u6d4b res = predict ( input_line ) if res : # \u7ed3\u679c\u662f1\uff0c\u8bf4\u660e\u5ba1\u6838\u6210\u529f\uff0c\u628a\u6587\u672c\u5199\u5165\u5230\u6587\u4ef6\u4e2d fw . write ( input_line + ' \\n ' ) else : pass \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_offline/review_model/predict.py \u8f93\u5165\u53c2\u6570\uff1a input_path = \"/data/doctor_offline/structured/noreview/\" output_path = \"/data/doctor_offline/structured/reviewed/\" \u8c03\u7528\uff1a batch_predict(input_path, output_path) \u8f93\u51fa\u6548\u679c\uff1a \u5728\u8f93\u51fa\u8def\u5f84\u4e0b\u751f\u6210\u4e0e\u8f93\u5165\u8def\u5f84\u7b49\u6570\u91cf\u7684\u540c\u540dcsv\u6587\u4ef6\uff0c\u5185\u90e8\u7684\u75c7\u72b6\u5b9e\u4f53\u662f\u88ab\u5ba1\u6838\u7684\u53ef\u7528\u5b9e\u4f53\u3002","title":"5.6 \u6a21\u578b\u4f7f\u7528"},{"location":"5.html#57","text":"\u5b66\u4e60\u5e76\u5b9e\u73b0\u4e86\u6a21\u578b\u9884\u6d4b\u7684\u51fd\u6570\uff1apredict(input_line). \u5b66\u4e60\u5e76\u5b9e\u73b0\u4e86\u6a21\u578b\u6279\u91cf\u9884\u6d4b\u7684\u51fd\u6570\uff1abatch_predict(input_path, output_path)","title":"5.7 \u5c0f\u7ed3"},{"location":"6.html","text":"6.1 \u5e8f\u5217\u6807\u6ce8 \u00b6 \u5b66\u4e60\u76ee\u6807 \u77e5\u9053\u5e8f\u5217\u6807\u6ce8\u95ee\u9898\u4e3b\u8981\u4efb\u52a1 \u638c\u63e1\u6761\u4ef6\u968f\u673a\u573a\u6a21\u578b\u6982\u5ff5 \u80fd\u591f\u4f7f\u7528\u6761\u4ef6\u968f\u673a\u573a\u8fdb\u884c\u8bcd\u6027\u6807\u6ce8 \u5e8f\u5217\u6807\u6ce8\u95ee\u9898 \u5e8f\u5217\u6807\u6ce8**\u6307\u7684\u662f\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 x=x_1x_2\\cdots x_n x=x_1x_2\\cdots x_n \uff0c\u627e\u51fa\u5e8f\u5217\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u6807\u7b7e y=y_1y_2\\cdots y_n y=y_1y_2\\cdots y_n \u7684\u95ee\u9898\u3002\u5176\u4e2d\uff0c y y \u6240\u6709\u53ef\u80fd\u7684\u53d6\u503c\u96c6\u5408\u79f0\u4e3a**\u6807\u6ce8\u96c6 \u3002\u6bd4\u5982\uff0c\u524d\u4e00\u5c0f\u8282\u4e2d\u201c\u66f4 \u9ad8 \u5730 \u4e3e\u8d77 \u9093\u5c0f\u5e73\u7406\u8bba \u7684 \u4f1f\u5927 \u65d7\u5e1c\u201d\uff0c\u5bf9\u5e94\u7684\u72b6\u6001\u5e8f\u5217\u662f\u201cSSSBEBMMMESBEBE\u201d\uff0c\u5176\u4e2d\u6807\u6ce8\u96c6\u662f{B, M, S, E}\u3002\u6c42\u89e3\u5e8f\u5217\u6807\u6ce8\u95ee\u9898\u7684\u6a21\u578b\u4e00\u822c\u79f0\u4e3a**\u5e8f\u5217\u6807\u6ce8\u5668**\uff0c\u901a\u5e38\u7531\u6a21\u578b\u4ece\u4e00\u4e2a\u6807\u6ce8\u6570\u636e\u96c6\u4e2d\u5b66\u4e60\u76f8\u5173\u77e5\u8bc6\u540e\u518d\u8fdb\u884c\u9884\u6d4b\u3002\u5728NLP\u95ee\u9898\u4e2d\uff0c x x \u901a\u5e38\u662f\u5b57\u7b26\u6216\u8bcd\u8bed\uff0c\u800c y y \u5219\u662f\u5f85\u9884\u6d4b\u7684\u7ec4\u8bcd\u89d2\u8272\u6216\u8bcd\u6027\u7b49\u6807\u7b7e\u3002\u4e2d\u6587\u5206\u8bcd\u3001\u8bcd\u6027\u6807\u6ce8\u3001\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u90fd\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5e8f\u5217\u6807\u6ce8\u95ee\u9898\u3002 \u5e8f\u5217\u6807\u6ce8\u4e0e\u4e2d\u6587\u5206\u8bcd \u8003\u8651\u4e00\u4e2a\u5b57\u7b26\u5e8f\u5217 x x \uff0c\u60f3\u8c61\u5207\u8bcd\u5668\u771f\u7684\u662f\u62ff\u5200\u5207\u5272\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5728\u5206\u8bcd\u662f\u65e0\u975e\u7531\u4e24\u79cd\u89d2\u8272\uff0c\u8981\u4e48\u5728\u5219\u4e2a\u5b57\u7b26\u540e\u9762\u5207\u5f00\uff0c\u8981\u4e48\u8df3\u8fc7\u4e0d\u5207\u3002\u8fd9\u6837\uff0c\u4e2d\u6587\u5206\u8bcd\u5c31\u8f6c\u5316\u4e3a\u6807\u6ce8\u96c6\u4e3a{\u5207\uff0c\u8fc7}\u5e8f\u5217\u6807\u6ce8\u95ee\u9898\u3002\u53ea\u8981\u6807\u6ce8\u96c6\u6b63\u786e\u6807\u6ce8\u6bcf\u4e2a\u5b57\u7b26\u5207\u4e0e\u4e0d\u5207\uff0c\u5206\u8bcd\u5668\u5c31\u80fd\u591f\u6309\u7167\u6307\u793a\u5207\u5272\u51fa\u6b63\u786e\u7684\u7ed3\u679c\u3002\u53ef\u4ee5\u5c06\u5e8f\u5217\u6807\u6ce8\u770b\u4f5c\u4e2d\u6587\u5206\u8bcd\u7684\u4e2d\u95f4\u7ed3\u679c\uff0c\u5f80\u540e\u5219\u662f\u5b58\u7cb9\u7684\u5b57\u7b26\u4e32\u5206\u5272\u3002 \u5f53\u7136\u5206\u8bcd\u6807\u6ce8\u96c6\u5e76\u975e\u53ea\u6709\u4e00\u79cd\uff0c\u524d\u9762\u4ecb\u7ecd\u7684{B, M, S, E}\u5219\u662f\u66f4\u5e38\u7528\u7684\u4e00\u79cd\u5206\u8bcd\u6807\u6ce8\u96c6\u3002 \u5e8f\u5217\u6807\u6ce8\u4e0e\u8bcd\u6027\u6807\u6ce8 \u8bcd\u6027\u6807\u6ce8\u4efb\u52a1\u662f\u4e00\u4e2a\u5929\u7136\u7684\u5e8f\u5217\u6807\u6ce8\u95ee\u9898\uff1a x x \u662f\u5355\u8bcd\u5e8f\u5217\uff0c y y \u662f\u76f8\u5e94\u7684\u8bcd\u6027\u5e8f\u5217\u3002\u4f8b\u5982\uff1a\u53c2\u89c2/\u52a8\u8bcd \u4e86/\u52a9\u8bcd \u5317\u4eac/\u5730\u540d \u5929\u5b89\u95e8/\u5730\u540d\u3002\u8bcd\u6027\u6807\u6ce8\u96c6\u540c\u6837\u4e0d\u662f\u552f\u4e00\u7684\uff0c\u4eba\u4eec\u6839\u636e\u9700\u8981\u5236\u5b9a\u4e86\u4e0d\u540c\u7684\u6807\u6ce8\u96c6\u3002\u5176\u4e2d\u6700\u8457\u540d\u7684\u5f53\u6570863\u6807\u6ce8\u96c6\u548c\u5317\u5927\u6807\u6ce8\u96c6\uff0c\u524d\u8005\u8bcd\u6027\u6570\u91cf\u8981\u5c11\u4e00\u4e9b\uff0c\u9897\u7c92\u5ea6\u8981\u5927\u4e00\u4e9b\u3002\u8bcd\u6027\u6807\u6ce8\u9700\u8981\u7efc\u5408\u8003\u8651\u524d\u540e\u7684\u5355\u8bcd\u4e0e\u8bcd\u6027\u624d\u80fd\u51b3\u5b9a\u5f53\u524d\u5355\u8bcd\u7684\u8bcd\u6027\u3002\u6bd4\u5982\u526f\u8bcd\u5bb9\u6613\u63a5\u7eed\u52a8\u8bcd\uff0c\u201c\u7684\u201d\u5b57\u4e4b\u540e\u5bb9\u6613\u51fa\u73b0\u540d\u8bcd\u3002\u8fd9\u91cc\u7684\u201c\u5bb9\u6613\u201d\u5176\u5b9e\u610f\u5473\u7740\u8f83\u5927\u7684\u6982\u7387\uff0c\u9700\u8981\u4f7f\u7528\u6982\u7387\u6a21\u578b\u53bb\u6a21\u62df\u3002 \u5e8f\u5217\u6807\u6ce8\u4e0e\u547d\u540d\u5b9e\u4f53\u8bc6\u522b \u6240\u8c13\u547d\u540d\u5b9e\u4f53\uff0c\u6307\u7684\u662f\u73b0\u5b9e\u5b58\u5728\u7684\u5b9e\u4f53\uff0c\u6bd4\u5982\u4eba\u540d\u3001\u5730\u540d\u548c\u673a\u6784\u540d\u3002\u547d\u540d\u5b9e\u4f53\u662fOOV\u7684\u4e3b\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u5f80\u5f80\u4e5f\u662f\u53e5\u5b50\u4e2d\u6700\u4ee4\u4eba\u5173\u6ce8\u7684\u6210\u5206\u3002\u547d\u540d\u5b9e\u4f53\u7684\u6570\u91cf\u662f\u65e0\u7a77\u7684\uff0c\u56e0\u4e3a\u4e16\u754c\u4e0a\u6bcf\u79cd\u4e8b\u7269\u90fd\u9700\u8981\u4e00\u4e2a\u540d\u5b57\u4ee3\u8868\u81ea\u8eab\u3002\u6bd4\u5982\u6bcf\u9897\u661f\u661f\u3001\u6bcf\u79cd\u86cb\u767d\u8d28\u90fd\u6709\u81ea\u5df1\u7684\u540d\u79f0\uff0c\u5b87\u5b99\u4e2d\u7684\u661f\u661f\u548c\u86cb\u767d\u8d28\u663e\u7136\u4e0d\u53ef\u6570\u3002 \u7b80\u77ed\u7684\u4eba\u540d\u548c\u5730\u540d\u53ef\u4ee5\u901a\u8fc7\u4e2d\u6587\u5206\u8bcd\u5207\u5206\uff0c\u7136\u540e\u901a\u8fc7\u8bcd\u6027\u6807\u6ce8\u6765\u786e\u5b9a\u6240\u5c5e\u7c7b\u522b\u3002\u4f46\u5730\u540d\u548c\u673a\u6784\u540d\u5e38\u5e38\u7531\u591a\u4e2a\u5355\u8bcd\u7ec4\u6210\uff08\u79f0\u4e3a\u590d\u5408\u8bcd\uff09\uff0c\u8f83\u96be\u8bc6\u5225\u3002\u4f8b\u5982\uff0c\u201c\u8054\u5408\u56fd\u53d9\u5229\u4e9a\u95ee\u9898\u72ec\u7acb\u56fd\u9645\u8c03\u67e5\u59d4\u5458\u4f1a\u201d\u3002\u7531\u4e8e\u590d\u5408\u8bcd\u7684\u4e30\u5ea6\u8f83\u5c0f\uff0c\u5bfc\u81f4\u5206\u8bcd\u5668\u548c\u8bcd\u6027\u6807\u6ce8\u5668\u5f88\u96be\u4e00\u6b65\u5230\u4f4d\u5730\u5c06\u5176\u8bc6\u522b\u51fa\u6765\uff0c\u8fd9\u65f6\u5e38\u5e38\u5728\u5206\u8bcd\u548c\u8bcd\u6027\u6807\u6ce8\u7684\u4e2d\u95f4\u7ed3\u679c\u4e4b\u4e0a\u8fdb\u884c\u53ec\u56de\u3002 \u8003\u8651\u5230\u5b57\u7b26\u7ea7\u522b\u4e2d\u6587\u5206\u8bcd\u548c\u8bcd\u8bed\u7ea7\u522b\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u6709\u7740\u7c7b\u4f3c\u7684\u7279\u70b9\uff0c\u90fd\u662f\u7ec4\u5408\u77ed\u5355\u4f4d\u5f62\u6210\u957f\u5355\u4f4d\u7684\u95ee\u9898\u3002\u6240\u4ee5\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u53ef\u4ee5\u590d\u7528 BMES \u6807\u6ce8\u96c6\uff0c\u5e76\u6cbf\u7528\u4e2d\u6587\u5206\u8bcd\u7684\u903b\u8f91\uff0c\u53ea\u4e0d\u8fc7\u6807\u6ce8\u7684\u5bf9\u8c61\u7531\u5b57\u7b26\u53d8\u4e3a\u5355\u8bcd\u800c\u5df2\u3002\u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u8fd8\u9700\u8981\u786e\u5b9a\u5b9e\u4f53\u6240\u5c5e\u7684\u7c7b\u522b\u3002\u8fd9\u4e2a\u989d\u5916\u7684\u8981\u6c42\u4f9d\u7136\u662f\u4e2a\u6807\u6ce8\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u547d\u540d\u5b9e\u4f53\u7c7b\u522b\u9644\u7740\u5230 BMES \u6807\u7b7e\u6765\u8fbe\u5230\u76ee\u7684\u3002\u6bd4\u5982\uff0c\u6784\u6210\u5730\u540d\u7684\u5355\u8bcd\u6807\u6ce8\u4e3a\u201cB/M/E/S\u4e00\u5730\u540d\u201d\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u6784\u6210\u547d\u540d\u5b9e\u4f53\u7684\u5355\u8bcd\uff0c\u5219\u7edf\u4e00\u6807\u6ce8\u4e3aO\uff08Outside \uff09\uff0c\u5373\u590d\u5408\u8bcd\u4e4b\u5916\u3002\u4f8b\u5982\uff1a\u53c2\u89c2/O \u4e86/O \u5317\u4eac/B-\u5730\u540d \u5929\u5b89\u95e8/E-\u5730\u540d\u3002\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u6a21\u5757\u6839\u636e\u6807\u6ce8\u7ed3\u679c\uff0c\u5c06\u201c\u5317\u4eac\u201d\u548c\u201c\u5929\u5b89\u95e8\u201d\u4f5c\u4e3a\u9996\u5c3e\u7ec4\u5408\u6210\u8bcd\uff0c\u5e76\u4e14\u6807\u6ce8\u4e3a\u5730\u540d\u3002 \u603b\u4e4b\uff0c\u5e8f\u5217\u6807\u6ce8\u95ee\u9898\u662f NLP \u4e2d\u6700\u5e38\u89c1\u7684\u95ee\u9898\u4e4b\u4e00\u3002\u8bb8\u591a\u5e94\u7528\u4efb\u52a1\u90fd\u53ef\u4ee5\u53d8\u6362\u601d\u8def\uff0c\u8f6c\u5316\u4e3a\u5e8f\u5217\u6807\u6ce8\u6765\u89e3\u51b3\u3002\u6240\u4ee5\u4e00\u4e2a\u51c6\u786e\u7684\u5e8f\u5217\u6807\u6ce8\u6a21\u578b\u975e\u5e38\u91cd\u8981\uff0c\u76f4\u63a5\u5173\u7cfb\u5230 NLP \u7cfb\u7edf\u7684\u51c6\u786e\u7387\u3002 6.2 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u4ecb\u7ecd \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u4ec0\u4e48\u662f\u547d\u540d\u5b9e\u4f53\u8bc6\u522b \u4e86\u89e3\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u4f5c\u7528 \u4e86\u89e3\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u5e38\u7528\u65b9\u6cd5 \u4e86\u89e3\u533b\u5b66\u6587\u672c\u7279\u5f81 \u4ec0\u4e48\u662f\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff1a \u547d\u540d\u5b9e\u4f53\u8bc6\u522b(Named Entity Recognition\uff0cNER)\u5c31\u662f\u4ece\u4e00\u6bb5\u81ea\u7136\u8bed\u8a00\u6587\u672c\u4e2d\u627e\u51fa\u76f8\u5173\u5b9e\u4f53\uff0c\u5e76\u6807\u6ce8\u51fa\u5176\u4f4d\u7f6e\u4ee5\u53ca\u7c7b\u578b\u3002\u662f\u4fe1\u606f\u63d0\u53d6\uff0c\u95ee\u7b54\u7cfb\u7edf\uff0c\u53e5\u6cd5\u5206\u6790\uff0c\u673a\u5668\u7ffb\u8bd1\u7b49\u5e94\u7528\u9886\u57df\u7684\u91cd\u8981\u57fa\u7840\u5de5\u5177\uff0c\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\u6280\u672f\u8d70\u5411\u5b9e\u7528\u5316\u7684\u8fc7\u7a0b\u4e2d\u5360\u6709\u91cd\u8981\u5730\u4f4d\u3002\u5305\u542b\u884c\u4e1a\uff0c\u9886\u57df\u4e13\u6709\u540d\u8bcd\uff0c\u5982\u4eba\u540d\uff0c\u5730\u540d\uff0c\u516c\u53f8\u540d\uff0c\u673a\u6784\u540d\uff0c\u65e5\u671f\uff0c\u65f6\u95f4\uff0c\u75be\u75c5\u540d\uff0c\u75c7\u72b6\u540d\uff0c\u624b\u672f\u540d\u79f0\uff0c\u8f6f\u4ef6\u540d\u79f0\u7b49\u3002\u5177\u4f53\u53ef\u53c2\u770b\u5982\u4e0b\u793a\u4f8b\u56fe\uff1a \u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u4f5c\u7528\uff1a \u8bc6\u522b\u4e13\u6709\u540d\u8bcd\uff0c\u4e3a\u6587\u672c\u7ed3\u6784\u5316\u63d0\u4f9b\u652f\u6301\u3002 \u4e3b\u4f53\u8bc6\u522b\uff0c\u8f85\u52a9\u53e5\u6cd5\u5206\u6790\u3002 \u5b9e\u4f53\u5173\u7cfb\u62bd\u53d6\uff0c\u6709\u5229\u4e8e\u77e5\u8bc6\u63a8\u7406\u3002 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u5e38\u7528\u65b9\u6cd5\uff1a \u57fa\u4e8e\u89c4\u5219\uff1a\u9488\u5bf9\u6709\u7279\u6b8a\u4e0a\u4e0b\u6587\u7684\u5b9e\u4f53\uff0c\u6216\u5b9e\u4f53\u672c\u8eab\u6709\u5f88\u591a\u7279\u5f81\u7684\u6587\u672c\uff0c\u4f7f\u7528\u89c4\u5219\u7684\u65b9\u6cd5\u7b80\u5355\u4e14\u6709\u6548\u3002\u6bd4\u5982\u62bd\u53d6\u6587\u672c\u4e2d\u7269\u54c1\u4ef7\u683c\uff0c\u5982\u679c\u6587\u672c\u4e2d\u6240\u6709\u5546\u54c1\u4ef7\u683c\u90fd\u662f\u201c\u6570\u5b57+\u5143\u201d\u7684\u5f62\u5f0f\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u6b63\u5219\u8868\u8fbe\u5f0f\u201d\\d*.?\\d+\u5143\u201d\u8fdb\u884c\u62bd\u53d6\u3002\u4f46\u5982\u679c\u5f85\u62bd\u53d6\u6587\u672c\u4e2d\u4ef7\u683c\u7684\u8868\u8fbe\u65b9\u5f0f\u591a\u79cd\u591a\u6837\uff0c\u4f8b\u5982\u201c\u4e00\u5343\u516b\u767e\u4e07\u201d\uff0c\u201c\u4f0d\u4f70\u8d30\u62fe\u5706\u201d\uff0c\u201c2000\u4e07\u5143\u201d\uff0c\u9047\u5230\u8fd9\u4e9b\u60c5\u51b5\u5c31\u8981\u4fee\u6539\u89c4\u5219\u6765\u6ee1\u8db3\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u3002\u968f\u7740\u8bed\u6599\u6570\u91cf\u7684\u589e\u52a0\uff0c\u9762\u5bf9\u7684\u60c5\u51b5\u4e5f\u8d8a\u6765\u8d8a\u590d\u6742\uff0c\u89c4\u5219\u4e4b\u95f4\u4e5f\u53ef\u80fd\u53d1\u751f\u51b2\u7a81\uff0c\u6574\u4e2a\u7cfb\u7edf\u4e5f\u53ef\u80fd\u53d8\u5f97\u4e0d\u53ef\u7ef4\u62a4\u3002\u56e0\u6b64\u57fa\u4e8e\u89c4\u5219\u7684\u65b9\u5f0f\u6bd4\u8f83\u9002\u5408\u534a\u7ed3\u6784\u5316\u6216\u6bd4\u8f83\u89c4\u8303\u7684\u6587\u672c\u4e2d\u7684\u8fdb\u884c\u62bd\u53d6\u4efb\u52a1\uff0c\u7ed3\u5408\u4e1a\u52a1\u9700\u6c42\u80fd\u591f\u8fbe\u5230\u4e00\u5b9a\u7684\u6548\u679c\u3002 \u4f18\u70b9\uff1a\u7b80\u5355\uff0c\u5feb\u901f\u3002 \u7f3a\u70b9\uff1a\u9002\u7528\u6027\u5dee\uff0c\u7ef4\u62a4\u6210\u672c\u9ad8\u540e\u671f\u751a\u81f3\u4e0d\u80fd\u7ef4\u62a4\u3002 \u57fa\u4e8e\u6a21\u578b\uff1a\u4ece\u6a21\u578b\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u95ee\u9898\u5b9e\u9645\u4e0a\u662f\u5e8f\u5217\u6807\u6ce8\u95ee\u9898\u3002\u5e8f\u5217\u6807\u6ce8\u95ee\u9898\u6307\u7684\u662f\u6a21\u578b\u7684\u8f93\u5165\u662f\u4e00\u4e2a\u5e8f\u5217\uff0c\u5305\u62ec\u6587\u5b57\uff0c\u65f6\u95f4\u7b49\uff0c\u8f93\u51fa\u4e5f\u662f\u4e00\u4e2a\u5e8f\u5217\u3002\u9488\u5bf9\u8f93\u5165\u5e8f\u5217\u7684\u6bcf\u4e00\u4e2a\u5355\u5143\uff0c\u8f93\u51fa\u4e00\u4e2a\u7279\u5b9a\u7684\u6807\u7b7e\u3002\u4ee5\u4e2d\u6587\u5206\u8bcd\u4efb\u52a1\u8fdb\u884c\u4e3e\u4f8b\uff0c\u4f8b\u5982\u8f93\u5165\u5e8f\u5217\u662f\u4e00\u4e32\u6587\u5b57\uff1a\"\u6211\u662f\u4e2d\u56fd\u4eba\", \u8f93\u51fa\u5e8f\u5217\u662f\u4e00\u4e32\u6807\u7b7e\uff1a\"OOBII\", \u5176\u4e2d\"BIO\"\u7ec4\u6210\u4e86\u4e00\u79cd\u4e2d\u6587\u5206\u8bcd\u7684\u6807\u7b7e\u4f53\u7cfb\uff1aB\u8868\u793a\u8fd9\u4e2a\u5b57\u662f\u8bcd\u7684\u5f00\u59cb\uff0cI\u8868\u793a\u8bcd\u7684\u4e2d\u95f4\u5230\u7ed3\u5c3e\uff0cO\u8868\u793a\u5176\u4ed6\u7c7b\u578b\u8bcd\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8f93\u51fa\u5e8f\u5217\"OOBII\"\u8fdb\u884c\u89e3\u7801\uff0c\u5f97\u5230\u5206\u8bcd\u7ed3\u679c\"\u6211\\\u662f\\\u4e2d\u56fd\u4eba\"\u3002 \u5e8f\u5217\u6807\u6ce8\u95ee\u9898\u6db5\u76d6\u4e86\u81ea\u7136\u8bed\u8a00\u5904\u7406\u4e2d\u7684\u5f88\u591a\u4efb\u52a1\uff0c\u5305\u62ec\u8bed\u97f3\u8bc6\u522b\uff0c\u4e2d\u6587\u5206\u8bcd\uff0c\u673a\u5668\u7ffb\u8bd1\uff0c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7b49\uff0c\u800c\u5e38\u89c1\u7684\u5e8f\u5217\u6807\u6ce8\u6a21\u578b\u5305\u62ecHMM, CRF, RNN, LSTM, GRU\u7b49\u6a21\u578b\u3002 \u5176\u4e2d\u5728\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u6280\u672f\u4e0a\uff0c\u76ee\u524d\u4e3b\u6d41\u7684\u6280\u672f\u662f\u901a\u8fc7BiLSTM+CRF\u6a21\u578b\u8fdb\u884c\u5e8f\u5217\u6807\u6ce8\uff0c\u4e5f\u662f\u9879\u76ee\u4e2d\u8981\u7528\u5230\u7684\u6a21\u578b\u3002 \u533b\u5b66\u6587\u672c\u7279\u5f81\uff1a \u7b80\u77ed\u7cbe\u70bc \u5f62\u5bb9\u8bcd\u76f8\u5bf9\u8f83\u5c11 \u6cdb\u5316\u6027\u76f8\u5bf9\u8f83\u5c0f \u533b\u5b66\u540d\u8bcd\u9519\u5b57\u7387\u6bd4\u8f83\u9ad8 \u540c\u4e49\u8bcd\u3001\u7b80\u79f0\u6bd4\u8f83\u591a \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u547d\u540d\u5b9e\u4f53\u8bc6\u522b \u5b66\u4e60\u4e86\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u4f5c\u7528 \u5b66\u4e60\u4e86\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u5e38\u7528\u65b9\u6cd5 \u5b66\u4e60\u4e86\u533b\u5b66\u6587\u672c\u7279\u5f81 6.3 CRF\u4ecb\u7ecd \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3CRF\u7684\u6982\u5ff5\u548c\u4f5c\u7528 \u4e86\u89e3\u8f6c\u79fb\u6982\u7387\u77e9\u9635 \u4e86\u89e3\u53d1\u5c04\u6982\u7387\u77e9\u9635 CRF\u7684\u6982\u5ff5\u548c\u4f5c\u7528\uff1a CRF(\u5168\u79f0Conditional Random Fields), \u6761\u4ef6\u968f\u673a\u573a\u3002\u662f\u7ed9\u5b9a\u8f93\u5165\u5e8f\u5217\u7684\u6761\u4ef6\u4e0b\uff0c\u6c42\u89e3\u8f93\u51fa\u5e8f\u5217\u7684\u6761\u4ef6\u6982\u7387\u5206\u5e03\u6a21\u578b\u3002 \u4e0b\u9762\u4e3e\u4e24\u4e2a\u5e94\u7528\u573a\u666f\u7684\u4f8b\u5b50\uff1a \u573a\u666f\u4e00\uff1a\u5047\u8bbe\u6709\u4e00\u5806\u65e5\u5e38\u751f\u6d3b\u7684\u7ed9\u5c0f\u670b\u53cb\u6392\u62cd\u7684\u89c6\u9891\u7247\u6bb5\uff0c\u53ef\u80fd\u7684\u72b6\u6001\u6709\u7761\u89c9\u3001\u5403\u996d\u3001\u559d\u6c34\u3001\u6d17\u6fa1\u3001\u5237\u7259\u3001\u73a9\u800d\u7b49\uff0c\u5927\u90e8\u5206\u60c5\u51b5\uff0c\u6211\u4eec\u662f\u80fd\u591f\u8bc6\u522b\u51fa\u89c6\u9891\u7247\u6bb5\u7684\u72b6\u6001\u3002\u4f46\u5982\u679c\u4f60\u53ea\u662f\u770b\u5230\u4e00\u5c0f\u6bb5\u62ff\u676f\u5b50\u7684\u89c6\u9891\uff0c\u5728\u6ca1\u6709\u524d\u540e\u76f8\u8fde\u7684\u89c6\u9891\u4f5c\u4e3a\u524d\u540e\u6587\u53c2\u7167\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5f88\u96be\u77e5\u9053\u62ff\u676f\u5b50\u662f\u8981\u5237\u7259\u8fd8\u662f\u559d\u6c34\u3002\u8fd9\u65f6\uff0c\u53ef\u4ee5\u7528\u5230CRF\u6a21\u578b\u3002 \u573a\u666f\u4e8c\uff1a\u5047\u8bbe\u6709\u5206\u597d\u8bcd\u7684\u53e5\u5b50\uff0c\u6211\u4eec\u8981\u5224\u65ad\u6bcf\u4e2a\u8bcd\u7684\u8bcd\u6027\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e9b\u8bcd\u6765\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u77e5\u9053\u76f8\u90bb\u8bcd\u7684\u8bcd\u6027\u7684\u60c5\u51b5\u4e0b\uff0c\u662f\u5f88\u96be\u51c6\u786e\u5224\u65ad\u6bcf\u4e2a\u8bcd\u7684\u8bcd\u6027\u7684\u3002\u8fd9\u65f6\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u5230CRF. \u57fa\u672c\u5b9a\u4e49\uff1a\u6211\u4eec\u5c06\u968f\u673a\u53d8\u91cf\u7684\u96c6\u5408\u79f0\u4e3a\u968f\u673a\u8fc7\u7a0b\u3002\u7531\u4e00\u4e2a\u7a7a\u95f4\u53d8\u91cf\u7d22\u5f15\u7684\u968f\u673a\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u5176\u79f0\u4e3a\u968f\u673a\u573a\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u505a\u8bcd\u6027\u6807\u6ce8\u65f6\uff0c\u53ef\u4ee5\u5c06{\u540d\u8bcd\u3001\u52a8\u8bcd\u3001\u5f62\u5bb9\u8bcd\u3001\u526f\u8bcd}\u8fd9\u4e9b\u8bcd\u6027\u5b9a\u4e49\u4e3a\u968f\u673a\u53d8\u91cf\uff0c\u7136\u540e\u4ece\u4e2d\u9009\u62e9\u76f8\u5e94\u7684\u8bcd\u6027\uff0c\u800c\u8fd9\u7ec4\u968f\u673a\u53d8\u91cf\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u9075\u5faa\u67d0\u79cd\u6982\u7387\u5206\u5e03\uff0c\u5c06\u8fd9\u4e9b\u8bcd\u6027\u6309\u7167\u5bf9\u5e94\u7684\u6982\u7387\u8d4b\u503c\u7ed9\u76f8\u5e94\u7684\u8bcd\uff0c\u5c31\u5b8c\u6210\u4e86\u53e5\u5b50\u7684\u8bcd\u6027\u6807\u6ce8\u3002 \u5173\u4e8e\u6761\u4ef6\u968f\u673a\u573a\u4e0e\u9a6c\u5c14\u79d1\u592b\u5047\u8bbe\uff1a \u524d\u9762\u8bfe\u7a0b\u6211\u4eec\u4ecb\u7ecd\u8fc7\u9a6c\u5c14\u79d1\u592b\u5047\u8bbe\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u4f4d\u7f6e\u7684\u53d6\u503c\u53ea\u548c\u4e0e\u5b83\u76f8\u90bb\u7684\u4f4d\u7f6e\u7684\u503c\u6709\u5173\uff0c\u548c\u5b83\u4e0d\u76f8\u90bb\u7684\u4f4d\u7f6e\u7684\u503c\u65e0\u5173\u3002 \u5e94\u7528\u5230\u6211\u4eec\u4e0a\u9762\u7684\u8bcd\u6027\u6807\u6ce8\u4f8b\u5b50\u4e2d\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5f53\u524d\u8bcd\u7684\u8bcd\u6027\u662f\u6839\u636e\u524d\u4e00\u4e2a\u8bcd\u548c\u540e\u4e00\u4e2a\u8bcd\u7684\u8bcd\u6027\u6765\u51b3\u5b9a\u7684\uff0c\u7b49\u6548\u4e8e\u4ece\u8bcd\u6027\u524d\u540e\u6587\u7684\u6982\u7387\u6765\u7ed9\u51fa\u5f53\u524d\u8bcd\u7684\u8bcd\u6027\u5224\u65ad\u7ed3\u679c\u3002 \u73b0\u5b9e\u4e2d\u53ef\u4ee5\u505a\u5982\u4e0b\u5047\u8bbe\uff1a\u5047\u8bbe\u4e00\u4e2a\u52a8\u8bcd\u6216\u8005\u526f\u8bcd\u540e\u9762\u4e0d\u4f1a\u8fde\u63a5\u540c\u6837\u7684\u52a8\u8bcd\u6216\u8005\u526f\u8bcd\uff0c\u8fd9\u6837\u7684\u6982\u7387\u5f88\u9ad8\u3002\u90a3\u4e48\uff0c\u53ef\u4ee5\u5047\u5b9a\u8fd9\u79cd\u7ed9\u5b9a\u9690\u85cf\u72b6\u6001(\u4e5f\u5c31\u662f\u8bcd\u6027\u5e8f\u5217)\u7684\u60c5\u51b5\u4e0b\uff0c\u6765\u8ba1\u7b97\u89c2\u6d4b\u72b6\u6001\u7684\u8ba1\u7b97\u8fc7\u7a0b\u3002\u672c\u8d28\u4e0aCRF\u6a21\u578b\u8003\u8651\u5230\u4e86\u89c2\u6d4b\u72b6\u6001\u8fd9\u4e2a\u5148\u9a8c\u6761\u4ef6\uff0c\u8fd9\u4e5f\u662f\u6761\u4ef6\u968f\u673a\u573a\u4e2d\u7684\u6761\u4ef6\u4e00\u8bcd\u7684\u542b\u4e49\u3002 \u8f6c\u79fb\u6982\u7387\u77e9\u9635\uff1a \u9996\u5148\u5047\u8bbe\u6211\u4eec\u9700\u8981\u6807\u6ce8\u7684\u5b9e\u4f53\u7c7b\u578b\u6709\u4e00\u4e0b\u51e0\u7c7b\uff1a {\"O\": 0, \"B-dis\": 1, \"I-dis\": 2, \"B-sym\": 3, \"I-sym\": 4} # \u5176\u4e2ddis\u8868\u793a\u75be\u75c5(disease), sym\u8868\u793a\u75c7\u72b6(symptom), B\u8868\u793a\u547d\u540d\u5b9e\u4f53\u5f00\u5934\uff0cI\u8868\u793a\u547d\u540d\u5b9e\u4f53\u4e2d\u95f4\u5230\u7ed3\u5c3e\uff0cO\u8868\u793a\u5176\u4ed6\u7c7b\u578b\u3002 \u56e0\u6b64\u6211\u4eec\u5f88\u5bb9\u6613\u77e5\u9053\u6bcf\u4e2a\u5b57\u7684\u53ef\u80fd\u6807\u6ce8\u7c7b\u578b\u6709\u4ee5\u4e0a\u4e94\u79cd\u53ef\u80fd\u6027\uff0c\u90a3\u4e48\u5728\u4e00\u4e2a\u53e5\u5b50\u4e2d\uff0c\u7531\u4e0a\u4e00\u4e2a\u5b57\u5230\u4e0b\u4e00\u4e2a\u5b57\u7684\u6982\u7387\u4e58\u79ef\u5c31\u67095 \u00d7 5\u79cd\u53ef\u80fd\u6027\uff0c\u5177\u4f53\u89c1\u4e0b\u56fe\u6240\u793a\uff1a \u6700\u7ec8\u8bad\u7ec3\u51fa\u6765\u7ed3\u679c\u5927\u81f4\u4f1a\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5176\u4e2d\u4e0b\u6807\u7d22\u5f15\u4e3a(i, j)\u7684\u65b9\u683c\u4ee3\u8868\u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f\u7b2ci\u884c\u8868\u793a\u7684\u6807\u7b7e\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2a\u5b57\u7b26\u8868\u793a\u7b2cj\u5217\u8868\u793a\u7684\u6807\u7b7e\u6240\u5bf9\u5e94\u7684\u6982\u7387\u503c\u3002\u4ee5\u7b2c\u4e8c\u884c\u4e3a\u4f8b\uff0c\u5047\u8bbe\u5f53\u524d\u7b2ci\u4e2a\u5b57\u7684\u6807\u7b7e\u4e3aB-dis, \u90a3\u4e48\u7b2ci+1\u4e2a\u5b57\u6700\u5927\u53ef\u80fd\u51fa\u73b0\u7684\u6982\u7387\u5e94\u8be5\u662fI-dis. \u53d1\u5c04\u6982\u7387\u77e9\u9635\uff1a \u53d1\u5c04\u6982\u7387\uff0c\u662f\u6307\u5df2\u77e5\u5f53\u524d\u6807\u7b7e\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u5e94\u6240\u51fa\u73b0\u5b57\u7b26\u7684\u6982\u7387\u3002\u901a\u4fd7\u7406\u89e3\u5c31\u662f\u5f53\u524d\u6807\u7b7e\u6bd4\u8f83\u53ef\u80fd\u51fa\u73b0\u7684\u6587\u5b57\u6709\u54ea\u4e9b\uff0c\u53ca\u5176\u5bf9\u5e94\u51fa\u73b0\u7684\u6982\u7387\u3002 \u4e0b\u9762\u662f\u51e0\u6bb5\u533b\u7597\u6587\u672c\u6570\u636e\u7684\u6807\u6ce8\u7ed3\u679c\uff1a \u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0a\u53e5\u5b50\u7684\u8f6c\u79fb\u77e9\u9635\u6982\u7387\u5982\u4e0b\uff1a \u5bf9\u5e94\u7684\u53d1\u5c04\u77e9\u9635\u53ef\u4ee5\u7406\u89e3\u4e3a\u5982\u4e0b\u56fe\u6240\u793a\u7ed3\u679c\uff1a \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86CRF\u7684\u6982\u5ff5\u548c\u4f5c\u7528 \u6982\u5ff5\uff1a\u6761\u4ef6\u968f\u673a\u573a\uff0c\u4e00\u79cd\u6761\u4ef6\u6982\u7387\u5206\u5e03\u6a21\u578b \u4f5c\u7528\uff1a\u589e\u52a0\u4e86\u5148\u9a8c\u6761\u4ef6\uff0c\u53ef\u4ee5\u66f4\u597d\u7684\u5b8c\u6210\u5b9e\u4f53\u5e8f\u5217\u7684\u8bc6\u522b \u5b66\u4e60\u4e86\u8f6c\u79fb\u6982\u7387\u77e9\u9635 \u5b66\u4e60\u4e86\u53d1\u5c04\u6982\u7387\u77e9\u9635 6.4 BiLSTM\u4ecb\u7ecd \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3BiLSTM\u7f51\u7edc\u7ed3\u6784\u3002 \u638c\u63e1BiLSTM\u6a21\u578b\u5b9e\u73b0\u3002 BiLSTM\u7f51\u7edc\u7ed3\u6784\uff1a \u6240\u8c13\u7684BiLSTM\uff0c\u5c31\u662f(Bidirectional LSTM)\u53cc\u5411LSTM. \u5355\u5411\u7684LSTM\u6a21\u578b\u53ea\u80fd\u6355\u6349\u5230\u4ece\u524d\u5411\u540e\u4f20\u9012\u7684\u4fe1\u606f\uff0c\u800c\u53cc\u5411\u7684\u7f51\u7edc\u53ef\u4ee5\u540c\u65f6\u6355\u6349\u6b63\u5411\u4fe1\u606f\u548c\u53cd\u5411\u4fe1\u606f\uff0c\u4f7f\u5f97\u5bf9\u6587\u672c\u4fe1\u606f\u7684\u5229\u7528\u66f4\u5168\u9762\uff0c\u6548\u679c\u4e5f\u66f4\u597d\u3002 \u5728BiLSTM\u7f51\u7edc\u6700\u7ec8\u7684\u8f93\u51fa\u5c42\u540e\u9762\u589e\u52a0\u4e86\u4e00\u4e2a\u7ebf\u6027\u5c42\uff0c\u7528\u6765\u5c06BiLSTM\u4ea7\u751f\u7684\u9690\u85cf\u5c42\u8f93\u51fa\u7ed3\u679c\u6295\u5c04\u5230\u5177\u6709\u67d0\u79cd\u8868\u8fbe\u6807\u7b7e\u7279\u5f81\u610f\u4e49\u7684\u533a\u95f4\uff0c\u5177\u4f53\u5982\u4e0b\u56fe\u6240\u793a\uff1a BiLSTM\u6a21\u578b\u5b9e\u73b0\uff1a \u7b2c\u4e00\u6b65\uff1a\u5b9e\u73b0\u7c7b\u7684\u521d\u59cb\u5316\u548c\u7f51\u7edc\u7ed3\u6784\u7684\u642d\u5efa\u3002 \u7b2c\u4e8c\u6b65\uff1a\u5b9e\u73b0\u7f51\u7edc\u7684\u524d\u5411\u8ba1\u7b97\u3002 \u7b2c\u4e09\u6b65\uff1a\u5b9e\u73b0\u7f51\u7edc\u7684\u9884\u6d4b\u51fd\u6570\u3002 \u7b2c\u4e00\u6b65\uff1a\u5b9e\u73b0\u7c7b\u7684\u521d\u59cb\u5316\u548c\u7f51\u7edc\u7ed3\u6784\u7684\u642d\u5efa\u3002 # \u672c\u6bb5\u4ee3\u7801\u6784\u5efa\u7c7bBiLSTM, \u5b8c\u6210\u521d\u59cb\u5316\u548c\u7f51\u7edc\u7ed3\u6784\u7684\u642d\u5efa # \u603b\u51713\u5c42\uff1a\u8bcd\u5d4c\u5165\u5c42\uff0c\u53cc\u5411LSTM\u5c42\uff0c\u5168\u8fde\u63a5\u7ebf\u6027\u5c42 import torch import torch.nn as nn class BiLSTM ( nn . Module ): def __init__ ( self , vocab_size , label_num ): super ( BiLSTM , self ) . __init__ () # \u7528\u4e8e\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u8bcd\u5411\u91cf self . embed = nn . Embedding ( num_embeddings = vocab_size , embedding_dim = 256 ) # \u7528\u4e8e\u63d0\u53d6\u8f93\u5165\u7684\u53cc\u5411\u8bed\u4e49\u8868\u793a\u5411\u91cf self . blstm = nn . LSTM ( input_size = 256 , hidden_size = 512 , bidirectional = True , num_layers = 1 ) # \u7528\u4e8e\u5c06 self.blstm \u7684\u8f93\u51fa\u5411\u91cf\u6620\u5c04\u4e3a\u6807\u7b7e logits self . liner = nn . Linear ( in_features = 1024 , out_features = label_num ) \u8f93\u5165\u53c2\u6570\uff1a # \u53c2\u65701:\u7801\u8868\u4e0eid\u5bf9\u7167 char_to_id = { \"\u53cc\" : 0 , \"\u80ba\" : 1 , \"\u89c1\" : 2 , \"\u591a\" : 3 , \"\u53d1\" : 4 , \"\u6591\" : 5 , \"\u7247\" : 6 , \"\u72b6\" : 7 , \"\u7a0d\" : 8 , \"\u9ad8\" : 9 , \"\u5bc6\" : 10 , \"\u5ea6\" : 11 , \"\u5f71\" : 12 , \"\u3002\" : 13 } # \u53c2\u65702:\u6807\u7b7e\u7801\u8868\u5bf9\u7167 tag_to_id = { \"O\" : 0 , \"B-dis\" : 1 , \"I-dis\" : 2 , \"B-sym\" : 3 , \"I-sym\" : 4 } # \u53c2\u6570\uff1a\u5b57\u5411\u91cf\u7ef4\u5ea6 # EMBEDDING_DIM = 256 # \u53c2\u6570\uff1a\u9690\u5c42\u7ef4\u5ea6 # HIDDEN_DIM = 512 # \u53c2\u6570\uff1a\u5806\u53e0 LSTM \u5c42\u6570 # NUM_LAYERS = 1 \u8c03\u7528\uff1a # \u521d\u59cb\u5316\u6a21\u578b model = BiLSTM ( vocab_size = len ( char_to_id ), label_num = len ( tag_to_id ),) print ( model ) \u8f93\u51fa\u6548\u679c\uff1a BiLSTM( (embed): Embedding(14, 256) (blstm): LSTM(256, 512, bidirectional=True) (liner): Linear(in_features=1024, out_features=5, bias=True) ) \u7b2c\u4e8c\u6b65\uff1a\u5b9e\u73b0\u7f51\u7edc\u7684\u524d\u5411\u8ba1\u7b97\u3002 # \u53c2\u6570\uff1a\u53e5\u5b50\u957f\u5ea6 # SENTENCE_LENGTH = 20 def forward ( self , inputs , length ): # \u5c06\u8f93\u5165\u7684 token \u7d22\u5f15\u8f6c\u6362\u4e3a\u8bcd\u5411\u91cf outputs_embed = self . embed ( inputs ) # \u7531\u4e8e\u586b\u5145\u4e86\u5f88\u591a0\uff0c\u6b64\u5904\u5c060\u8fdb\u884c\u538b\u7f29 outputs_packd = pack_padded_sequence ( outputs_embed , length ) # BiLSTM \u7528\u4e8e\u63d0\u53d6\u53cc\u5411\u8bed\u4e49\uff0c\u63d0\u53d6\u6bcf\u4e2a\u53e5\u5b50\u4e2d\u7684 token \u8868\u793a outputs_blstm , ( hn , cn ) = self . blstm ( outputs_packd ) # outputs_paded \u8868\u793a\u586b\u5145\u540e\u7684 BiLSTM \u5bf9\u6bcf\u4e2a token \u7684\u8f93\u51fa # outputs_length \u8868\u793a\u6bcf\u4e2a\u53e5\u5b50\u5b9e\u9645\u7684\u957f\u5ea6 outputs_paded , output_lengths = pad_packed_sequence ( outputs_blstm ) outputs_paded = outputs_paded . transpose ( 0 , 1 ) # \u7ebf\u6027\u5c42\u8ba1\u7b97\uff0c\u8ba1\u7b97\u51fa\u53d1\u5c04\u77e9\u9635\uff0c\u5f62\u72b6\uff1a(16, 57, 7) output_logits = self . liner ( outputs_paded ) outputs = [] for output_logit , outputs_length in zip ( output_logits , output_lengths ): outputs . append ( output_logit [: outputs_length ]) return outputs \u7b2c\u4e09\u6b65\uff1a\u5b9e\u73b0\u7f51\u7edc\u7684\u9884\u6d4b\u51fd\u6570\u3002 def predict ( self , inputs ): # \u5c06\u8f93\u5165\u7684 token \u7d22\u5f15\u8f6c\u6362\u4e3a\u8bcd\u5411\u91cf outputs_embed = self . embed ( inputs ) # \u589e\u52a0\u4e00\u4e2a batch \u7ef4\u5ea6\u5728 1 \u4f4d\u7f6e outputs_embed = outputs_embed . unsqueeze ( 1 ) # \u5bf9\u6bcf\u4e2a Token \u8fdb\u884c\u8bed\u4e49\u8868\u793a outputs_blstm , ( hn , cn ) = self . blstm ( outputs_embed ) # \u628a 1 \u4f4d\u7f6e\u7684 batch \u503c\u53bb\u6389 outputs_blstm = outputs_blstm . squeeze ( 1 ) # \u8ba1\u7b97\u6bcf\u4e2a Token \u7684\u53d1\u5c04\u5206\u6570 output_liner = self . liner ( outputs_blstm ) return output_liner \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/bilstm_crf.py \u5c0f\u8282\u603b\u7ed3\uff1a \u4e86\u89e3\u4e86BiLSTM\u7f51\u7edc\u7ed3\u6784 \u8bbe\u7f6e\u9690\u85cf\u5c42\u7ef4\u5ea6\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06hidden_size // 2 \u603b\u5171\u67093\u5c42\u9700\u8981\u6784\u5efa\uff0c\u5206\u522b\u662f\u8bcd\u5d4c\u5165\u5c42\uff0c\u53cc\u5411LSTM\u5c42\uff0c\u5168\u8fde\u63a5\u7ebf\u6027\u5c42 \u5728\u4ee3\u7801\u5c42\u9762\uff0c\u53cc\u5411LSTM\u5c31\u662f\u5c06nn.LSTM()\u4e2d\u7684\u53c2\u6570bidirectional\u8bbe\u7f6e\u4e3aTrue \u638c\u63e1\u4e86BiLSTM\u7f51\u7edc\u7684\u4ee3\u7801\u5b9e\u73b0 \u6784\u5efa\u7c7bBiLSTM\u7684\u521d\u59cb\u5316\u51fd\u6570 \u6dfb\u52a0\u6587\u672c\u5411\u91cf\u5316\u7684\u8f85\u52a9\u51fd\u6570\uff0c\u6ce8\u610fpadding\u586b\u5145\u4e3a\u76f8\u540c\u957f\u5ea6\u7684Tensor \u8981\u6ce8\u610fforward\u51fd\u6570\u4e2d\u4e0d\u540c\u5f20\u91cf\u7684\u5f62\u72b6\u7ea6\u5b9a 6.5 BiLSTM+CRF\u6a21\u578b \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u638c\u63e1BiLSTM+CRF\u6a21\u578b\u7ed3\u6784 \u638c\u63e1\u635f\u5931\u51fd\u6570\u7684\u5b9a\u4e49 \u638c\u63e1BiLSTM_CRF\u6a21\u578b\u7684\u4ee3\u7801\u5b9e\u73b0 BiLSTM+CRF\u6a21\u578b\u7ed3\u6784\uff1a 1, \u6a21\u578b\u7684\u6807\u7b7e\u5b9a\u4e49\u4e0e\u6574\u4f53\u67b6\u6784 2, \u6a21\u578b\u5185\u90e8\u7684\u5206\u5c42\u5c55\u5f00 3, CRF\u5c42\u7684\u4f5c\u7528 1, \u6a21\u578b\u7684\u6807\u7b7e\u5b9a\u4e49\u4e0e\u6574\u4f53\u67b6\u6784\uff1a\u5047\u8bbe\u6211\u4eec\u7684\u6570\u636e\u96c6\u4e2d\u6709\u4e24\u7c7b\u5b9e\u4f53-\u4eba\u540d\uff0c\u5730\u540d\uff0c\u4e0e\u4e4b\u5bf9\u5e94\u7684\u5728\u8bad\u7ec3\u96c6\u4e2d\u67095\u7c7b\u6807\u7b7e\u5982\u4e0b\u6240\u793a\uff1a B-Person, I-Person, B-Organization, I-Organization, O # B-Person: \u4eba\u540d\u7684\u5f00\u59cb # I-Person: \u4eba\u540d\u7684\u4e2d\u95f4\u90e8\u5206 # B-Organization: \u5730\u540d\u7684\u5f00\u59cb # I-Organization: \u5730\u540d\u7684\u4e2d\u95f4\u90e8\u5206 # O: \u5176\u4ed6\u975e\u4eba\u540d\uff0c\u975e\u5730\u540d\u7684\u6807\u7b7e \u5047\u8bbe\u4e00\u4e2a\u53e5\u5b50\u67095\u4e2a\u5355\u8bcd\u6784\u6210\uff0c(w0, w1, w2, w3, w4), \u6bcf\u4e00\u4e2a\u5355\u5143\u90fd\u4ee3\u8868\u7740\u7531\u5b57\u5d4c\u5165\u6784\u6210\u7684\u5411\u91cf\u3002 \u5176\u4e2d\u5b57\u5d4c\u5165\u662f\u968f\u673a\u521d\u59cb\u5316\u7684\uff0c\u8bcd\u5d4c\u5165\u662f\u901a\u8fc7\u6570\u636e\u8bad\u7ec3\u5f97\u5230\u7684\uff0c\u6240\u6709\u7684\u5d4c\u5165\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u90fd\u4f1a\u8c03\u6574\u5230\u6700\u4f18\u89e3\u3002 \u8fd9\u4e9b\u5b57\u5d4c\u5165\u6216\u8bcd\u5d4c\u5165\u4f5c\u4e3aBiLSTM+CRF\u6a21\u578b\u7684\u8f93\u5165\uff0c\u800c\u8f93\u51fa\u7684\u662f\u53e5\u5b50\u4e2d\u6bcf\u4e2a\u5355\u5143\u7684\u6807\u7b7e\u3002 2, \u6a21\u578b\u5185\u90e8\u7684\u5206\u5c42\u5c55\u5f00\uff1a\u6574\u4e2a\u6a21\u578b\u660e\u663e\u6709\u4e24\u5c42\uff0c\u7b2c\u4e00\u5c42\u662fBiLSTM\u5c42\uff0c\u7b2c\u4e8c\u5c42\u662fCRF\u5c42\uff0c\u5c06\u5c42\u7684\u5185\u90e8\u5c55\u5f00\u5982\u4e0b\u56fe\u6240\u793a\uff1a BiLSTM\u5c42\u7684\u8f93\u51fa\u4e3a\u6bcf\u4e00\u4e2a\u6807\u7b7e\u7684\u9884\u6d4b\u5206\u503c\uff0c\u4f8b\u5982\u5bf9\u4e8e\u5355\u8bcdw0, BiLSTM\u5c42\u8f93\u51fa\u662f 1.5 (B-Person), 0.9 (I-Person), 0.1 (B-Organization), 0.08 (I-Organization), 0.05 (O) \u8fd9\u4e9b\u5206\u503c\u5c06\u4f5c\u4e3aCRF\u5c42\u7684\u8f93\u5165\u3002 3, CRF\u5c42\u7684\u4f5c\u7528\uff1a\u5982\u679c\u6ca1\u6709CRF\u5c42\uff0c\u4e5f\u53ef\u4ee5\u8bad\u7ec3\u4e00\u4e2aBiLSTM\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u6a21\u578b\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7531\u4e8eBiLSTM\u7684\u8f93\u51fa\u4e3a\u5355\u5143\u7684\u6bcf\u4e00\u4e2a\u6807\u7b7e\u5206\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u6311\u9009\u5206\u503c\u6700\u9ad8\u7684\u4e00\u4e2a\u4f5c\u4e3a\u8be5\u5355\u5143\u7684\u6807\u7b7e\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u5355\u8bcdw0, \"B-Person\"\u7684\u5206\u503c-1.5\u662f\u6240\u6709\u6807\u7b7e\u5f97\u5206\u4e2d\u6700\u9ad8\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u6311\u9009\"B-Person\"\u4f5c\u4e3a\u5355\u8bcdw0\u7684\u9884\u6d4b\u6807\u7b7e\u3002\u540c\u7406\uff0c\u53ef\u4ee5\u5f97\u5230w1 - \"I-Person\", w2 - \"O\", w3 - \"B-Organization\", w4 - \"O\" \u867d\u7136\u6309\u7167\u4e0a\u8ff0\u65b9\u6cd5\uff0c\u5728\u6ca1\u6709CRF\u5c42\u7684\u6761\u4ef6\u4e0b\u6211\u4eec\u4e5f\u53ef\u4ee5\u5f97\u5230x\u4e2d\u6bcf\u4e2a\u5355\u5143\u7684\u9884\u6d4b\u6807\u7b7e\uff0c\u4f46\u662f\u4e0d\u80fd\u4fdd\u8bc1\u6807\u7b7e\u7684\u9884\u6d4b\u6bcf\u6b21\u90fd\u662f\u6b63\u786e\u7684\u3002\u5982\u679c\u51fa\u73b0\u4e0b\u56fe\u7684BiLSTM\u5c42\u8f93\u51fa\u7ed3\u679c\uff0c\u5219\u660e\u663e\u9884\u6d4b\u662f\u9519\u8bef\u7684\u3002 CRF\u5c42\u80fd\u4ece\u8bad\u7ec3\u6570\u636e\u4e2d\u83b7\u5f97\u7ea6\u675f\u6027\u7684\u89c4\u5219\u3002 CRF\u5c42\u53ef\u4ee5\u4e3a\u6700\u540e\u9884\u6d4b\u7684\u6807\u7b7e\u6dfb\u52a0\u4e00\u4e9b\u7ea6\u675f\u6765\u4fdd\u8bc1\u9884\u6d4b\u7684\u6807\u7b7e\u662f\u5408\u6cd5\u7684\u3002\u5728\u8bad\u7ec3\u6570\u636e\u8bad\u7ec3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e9b\u7ea6\u675f\u53ef\u4ee5\u901a\u8fc7CRF\u5c42\u81ea\u52a8\u5b66\u4e60\u5230\u3002 1: \u53e5\u5b50\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8bcd\u603b\u662f\u4ee5\u6807\u7b7e\"B-\"\u6216\u8005\"O\"\u5f00\u59cb\uff0c\u800c\u4e0d\u662f\"I-\"\u5f00\u59cb\u3002 2: \u6807\u7b7e\"B-label1 I-label2 I-label3 ......\", \u5176\u4e2d\u7684label1, label2, label3\u5e94\u8be5\u5c5e\u4e8e\u540c\u4e00\u7c7b\u5b9e\u4f53\u3002 \u6bd4\u5982\uff0c\"B-Person I-Person\"\u662f\u5408\u6cd5\u7684\u5e8f\u5217\uff0c\u4f46\u662f\"B-Person I-Organization\"\u662f\u975e\u6cd5\u7684\u5e8f\u5217\u3002 3: \u6807\u7b7e\u5e8f\u5217\"O I-label\"\u662f\u975e\u6cd5\u5e8f\u5217\uff0c\u4efb\u610f\u5b9e\u4f53\u6807\u7b7e\u7684\u9996\u4e2a\u6807\u7b7e\u5e94\u8be5\u662f\"B-\", \u800c\u4e0d\u662f\"I-\". \u6bd4\u5982\uff0c\"O B-label\"\u624d\u662f\u5408\u6cd5\u7684\u5e8f\u5217 \u6709\u4e86\u4e0a\u8ff0\u8fd9\u4e9b\u7ea6\u675f\uff0c\u6807\u7b7e\u5e8f\u5217\u7684\u9884\u6d4b\u4e2d\u975e\u6cd5\u5e8f\u5217\u51fa\u73b0\u7684\u6982\u7387\u5c06\u4f1a\u5927\u5927\u964d\u4f4e\u3002 \u635f\u5931\u51fd\u6570\u7684\u5b9a\u4e49\uff1a BiLSTM\u5c42\u7684\u8f93\u51fa\u7ef4\u5ea6\u662ftag_size, \u4e5f\u5c31\u662f\u6bcf\u4e2a\u5355\u8bcdw_i\u6620\u5c04\u5230tag\u7684\u53d1\u5c04\u6982\u7387\u503c\uff0c\u5047\u8bbeBiLSTM\u7684\u8f93\u51fa\u77e9\u9635\u662fP, \u5176\u4e2dP(i,j)\u4ee3\u8868\u5355\u8bcdw_i\u6620\u5c04\u5230tag_j\u7684\u975e\u5f52\u4e00\u5316\u6982\u7387\u3002\u5bf9\u4e8eCRF\u5c42\uff0c\u5047\u8bbe\u5b58\u5728\u4e00\u4e2a\u8f6c\u79fb\u77e9\u9635A, \u5176\u4e2dA(i,j)\u4ee3\u8868tag_j\u8f6c\u79fb\u5230tag_i\u7684\u6982\u7387\u3002 \u5bf9\u4e8e\u8f93\u5165\u5e8f\u5217X\u5bf9\u5e94\u7684\u8f93\u51fatag\u5e8f\u5217y, \u5b9a\u4e49\u5206\u6570\u5982\u4e0b(\u672c\u8d28\u4e0a\u5c31\u662f\u53d1\u5c04\u6982\u7387\u548c\u8f6c\u79fb\u6982\u7387\u7684\u7d2f\u52a0\u548c): S(X,y)=\\sum_{i=0}^{n}A_{y_i,y_{i+1}}+\\sum_{i=1}^nP_{i,y_i} S(X,y)=\\sum_{i=0}^{n}A_{y_i,y_{i+1}}+\\sum_{i=1}^nP_{i,y_i} \u5229\u7528softmax\u51fd\u6570\uff0c\u4e3a\u6bcf\u4e00\u4e2a\u6b63\u786e\u7684tag\u5e8f\u5217y\u5b9a\u4e49\u4e00\u4e2a\u6982\u7387\u503c\uff0c\u5728\u771f\u5b9e\u7684\u8bad\u7ec3\u4e2d\uff0c\u53ea\u9700\u8981\u6700\u5927\u5316\u4f3c\u7136\u6982\u7387p(y|X)\u5373\u53ef\uff0c\u5177\u4f53\u4f7f\u7528\u5bf9\u6570\u4f3c\u7136\u5982\u4e0b\uff1a -\\log(p(y|X)) = -\\log(\\frac{e^{S(X,y)}}{\\sum_{\\hat{y}\\in Y_X } e^{S(X,\\hat{y})}})\\\\ = \\log(\\sum_{\\hat{y}\\in Y_X} e^{S(X, \\hat{y})})-S(X, y) -\\log(p(y|X)) = -\\log(\\frac{e^{S(X,y)}}{\\sum_{\\hat{y}\\in Y_X } e^{S(X,\\hat{y})}})\\\\ = \\log(\\sum_{\\hat{y}\\in Y_X} e^{S(X, \\hat{y})})-S(X, y) BiLSTM+CRF\u6a21\u578b\u7684\u5b9e\u73b0\uff1a \u7b2c\u4e00\u6b65\uff1a\u6784\u5efaCRF\u6a21\u578b \u7b2c\u4e8c\u6b65\uff1a\u8ba1\u7b97\u5355\u6761\u8def\u5f84\u7684\u5206\u6570 \u7b2c\u4e09\u6b65\uff1a\u8ba1\u7b97\u5168\u90e8\u8def\u5f84\u7684\u5206\u6570 \u7b2c\u56db\u6b65\uff1a\u8ba1\u7b97\u635f\u5931\u503c \u7b2c\u4e94\u6b65\uff1a\u7ef4\u7279\u6bd4\u7b97\u6cd5\u7684\u5b9e\u73b0 \u7b2c\u516d\u6b65\uff1a\u6784\u9020NER\u6a21\u578b\u7ec4\u5408\u5168\u90e8\u529f\u80fd \u7b2c\u4e00\u6b65\uff1a\u6784\u5efaCRF\u6a21\u578b # \u5bfc\u5165\u76f8\u5173\u5305\u4e0e\u6a21\u5757 import torch import torch.nn as nn from torch.nn.utils.rnn import pack_padded_sequence from torch.nn.utils.rnn import pad_packed_sequence # \u5b9a\u4e49\u8ba1\u7b97\u8bbe\u5907 device = torch . device ( 'cuda' if torch . cuda . is_available () else 'cpu' ) class CRF ( nn . Module ): def __init__ ( self , label_num ): super ( CRF , self ) . __init__ () # \u8f6c\u79fb\u77e9\u9635\u7684\u6807\u7b7e\u6570\u91cf self . label_num = label_num # [TAG1, TAG2, TAG3...STAR, END] params = torch . randn ( self . label_num + 2 , self . label_num + 2 ) self . transition_scores = nn . Parameter ( params ) # \u5f00\u59cb\u548c\u7ed3\u675f\u6807\u7b7e START_TAG , ENG_TAG = self . label_num , self . label_num + 1 self . transition_scores . data [:, START_TAG ] = - 1000 self . transition_scores . data [ ENG_TAG , :] = - 1000 # \u5b9a\u4e49\u4e00\u4e2a\u8f83\u5c0f\u503c\u7528\u4e8e\u6269\u5c55\u53d1\u5c04\u548c\u8f6c\u79fb\u77e9\u9635\u65f6\u586b\u5145 self . fill_value = - 1000.0 \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/bilstm_crf.py \u7b2c\u4e8c\u6b65\uff1a\u8ba1\u7b97\u5355\u6761\u8def\u5f84\u7684\u5206\u6570 def _get_real_path_score ( self , emission_score , sequence_label ): # \u8ba1\u7b97\u6807\u7b7e\u7684\u6570\u91cf seq_length = len ( sequence_label ) # \u8ba1\u7b97\u771f\u5b9e\u8def\u5f84\u53d1\u5c04\u5206\u6570 real_emission_score = torch . sum ( emission_score [ list ( range ( seq_length )), sequence_label ]) # \u5728\u771f\u5b9e\u6807\u7b7e\u5e8f\u5217\u524d\u540e\u589e\u52a0\u4e00\u4e2a start \u548c end b_id = torch . tensor ([ self . label_num ], dtype = torch . int32 , device = device ) e_id = torch . tensor ([ self . label_num + 1 ], dtype = torch . int32 , device = device ) sequence_label_expand = torch . cat ([ b_id , sequence_label , e_id ]) # \u8ba1\u7b97\u771f\u5b9e\u8def\u5f84\u8f6c\u79fb\u5206\u6570 pre_tag = sequence_label_expand [ list ( range ( seq_length + 1 ))] now_tag = sequence_label_expand [ list ( range ( 1 , seq_length + 2 ))] real_transition_score = torch . sum ( self . transition_scores [ pre_tag , now_tag ]) # \u8ba1\u7b97\u771f\u5b9e\u8def\u5f84\u5206\u6570 real_path_score = real_emission_score + real_transition_score return real_path_score \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/bilstm_crf.py \u7b2c\u4e09\u6b65\uff1a\u8ba1\u7b97\u5168\u90e8\u8def\u5f84\u7684\u5206\u6570 def _log_sum_exp ( self , score ): # \u8ba1\u7b97 e \u7684\u6307\u6570\u65f6\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u51cf\u53bb\u6700\u5927\u503c\uff0c\u907f\u514d\u6570\u503c\u6ea2\u51fa max_score , _ = torch . max ( score , dim = 0 ) max_score_expand = max_score . expand ( score . shape ) return max_score + torch . log ( torch . sum ( torch . exp ( score - max_score_expand ), dim = 0 )) def _expand_emission_matrix ( self , emission_score ): # \u8ba1\u7b97\u6807\u7b7e\u7684\u6570\u91cf sequence_length = emission_score . shape [ 0 ] # \u6269\u5c55\u65f6\u4f1a\u589e\u52a0 START \u548c END \u6807\u7b7e\uff0c\u5b9a\u4e49\u8be5\u6807\u7b7e\u7684\u503c b_s = torch . tensor ([[ self . fill_value ] * self . label_num + [ 0 , self . fill_value ]], device = device ) e_s = torch . tensor ([[ self . fill_value ] * self . label_num + [ self . fill_value , 0 ]], device = device ) # \u6269\u5c55\u53d1\u5c04\u77e9\u9635\u4e3a (self.label_num + 2, self.label_num + 2) expand_matrix = self . fill_value * torch . ones ([ sequence_length , 2 ], dtype = torch . float32 , device = device ) emission_score_expand = torch . cat ([ emission_score , expand_matrix ], dim = 1 ) emission_score_expand = torch . cat ([ b_s , emission_score_expand , e_s ], dim = 0 ) return emission_score_expand def _get_total_path_score ( self , emission_score ): # \u6269\u5c55\u53d1\u5c04\u5206\u6570\u77e9\u9635 emission_score_expand = self . _expand_emission_matrix ( emission_score ) # \u8ba1\u7b97\u6240\u6709\u8def\u5f84\u5206\u6570 pre = emission_score_expand [ 0 ] for obs in emission_score_expand [ 1 :]: # \u6269\u5c55 pre \u7ef4\u5ea6 pre_expand = pre . reshape ( - 1 , 1 ) . expand ([ self . label_num + 2 , self . label_num + 2 ]) # \u6269\u5c55 obs \u7ef4\u5ea6 obs_expand = obs . expand ([ self . label_num + 2 , self . label_num + 2 ]) # \u6269\u5c55\u4e4b\u540e obs pre \u548c self.transition_scores \u7ef4\u5ea6\u76f8\u540c score = obs_expand + pre_expand + self . transition_scores # \u8ba1\u7b97\u5bf9\u6570\u5206\u6570 pre = self . _log_sum_exp ( score ) return self . _log_sum_exp ( pre ) \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/bilstm_crf.py \u7b2c\u56db\u6b65\uff1a\u8ba1\u7b97\u635f\u5931\u503c def forward ( self , emission_scores , sequence_labels ): total_loss = 0.0 for emission_score , sequence_label in zip ( emission_scores , sequence_labels ): # \u8ba1\u7b97\u771f\u5b9e\u8def\u5f84\u5f97\u5206 real_path_score = self . _get_real_path_score ( emission_score , sequence_label ) # \u8ba1\u7b97\u6240\u6709\u8def\u5f84\u5206\u6570 total_path_score = self . _get_total_path_score ( emission_score ) # \u6700\u7ec8\u635f\u5931 finish_loss = total_path_score - real_path_score # \u7d2f\u52a0\u4e0d\u540c\u53e5\u5b50\u7684\u635f\u5931 total_loss += finish_loss return total_loss \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/bilstm_crf.py \u7b2c\u4e94\u6b65\uff1a\u7ef4\u7279\u6bd4\u7b97\u6cd5\u7684\u5b9e\u73b0 def predict ( self , emission_score ): \"\"\"\u4f7f\u7528\u7ef4\u7279\u6bd4\u7b97\u6cd5\uff0c\u7ed3\u5408\u53d1\u5c04\u77e9\u9635+\u8f6c\u79fb\u77e9\u9635\u8ba1\u7b97\u6700\u4f18\u8def\u5f84\"\"\" # \u6269\u5c55\u53d1\u5c04\u5206\u6570\u77e9\u9635 emission_score_expand = self . _expand_emission_matrix ( emission_score ) # \u8ba1\u7b97\u5206\u6570 ids = torch . zeros ( 1 , self . label_num + 2 , dtype = torch . long , device = device ) val = torch . zeros ( 1 , self . label_num + 2 , device = device ) pre = emission_score_expand [ 0 ] for obs in emission_score_expand [ 1 :]: # \u6269\u5c55 pre \u7ef4\u5ea6 pre_expand = pre . reshape ( - 1 , 1 ) . expand ([ self . label_num + 2 , self . label_num + 2 ]) # \u6269\u5c55 obs \u7ef4\u5ea6 obs_expand = obs . expand ([ self . label_num + 2 , self . label_num + 2 ]) # \u6269\u5c55\u4e4b\u540e obs pre \u548c self.transition_scores \u7ef4\u5ea6\u76f8\u540c score = obs_expand + pre_expand + self . transition_scores # \u83b7\u5f97\u5f53\u524d\u591a\u5206\u652f\u4e2d\u6700\u5927\u503c\u7684\u5206\u652f\u7d22\u5f15 value , index = score . max ( dim = 0 ) # \u62fc\u63a5\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u7ed3\u679c ids = torch . cat ([ ids , index . unsqueeze ( 0 )], dim = 0 ) val = torch . cat ([ val , value . unsqueeze ( 0 )], dim = 0 ) # \u8ba1\u7b97\u5206\u6570 pre = value # \u5148\u53d6\u51fa\u6700\u540e\u4e00\u4e2a\u7684\u6700\u5927\u503c index = torch . argmax ( val [ - 1 ]) best_path = [ index ] # \u518d\u56de\u6eaf\u524d\u4e00\u4e2a\u6700\u5927\u503c # \u7531\u4e8e\u4e3a\u4e86\u65b9\u4fbf\u62fc\u63a5\uff0c\u6211\u4eec\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u9ed8\u8ba4\u586b\u5145\u4e860 for i in reversed ( ids [ 1 :]): # \u83b7\u5f97\u5206\u6570\u6700\u5927\u7684\u7d22\u5f15 # index = torch.argmax(v) # \u83b7\u5f97\u7d22\u5f15\u5bf9\u5e94\u7684\u6807\u7b7eID index = i [ index ] . item () best_path . append ( index ) best_path = best_path [:: - 1 ][ 1 : - 1 ] return best_path \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e/data/doctor_offline/ner_model/bilstm_crf.py \u7b2c\u516d\u6b65\uff1a\u6784\u9020NER\u6a21\u578b\u7ec4\u5408\u5168\u90e8\u529f\u80fd class NER ( nn . Module ): def __init__ ( self , vocab_size , label_num ): super ( NER , self ) . __init__ () self . vocab_size = vocab_size self . label_num = label_num # \u53cc\u5411\u957f\u77ed\u8bb0\u5fc6\u7f51\u7edc self . bilstm = BiLSTM ( vocab_size = self . vocab_size , label_num = self . label_num ) # \u6761\u4ef6\u968f\u673a\u573a\u7f51\u7edc\u5c42 self . crf = CRF ( label_num = self . label_num ) def forward ( self , inputs , labels , length ): # \u8ba1\u7b97\u8f93\u5165\u6279\u6b21\u6837\u672c\u7684\u6bcf\u4e2a Token \u7684\u5206\u6570\uff0c\u5373\uff1a\u6bcf\u4e2a\u53e5\u5b50\u7684\u53d1\u5c04\u77e9\u9635 emission_scores = self . bilstm ( inputs , length ) # \u8ba1\u7b97\u6279\u6b21\u6837\u672c\u7684\u603b\u635f\u5931 batch_loss = self . crf ( emission_scores , labels ) # \u8fd4\u56de\u603b\u635f\u5931 return batch_loss def save_model ( self , save_apth ): save_info = { 'init' : { 'vocab_size' : self . vocab_size , 'label_num' : self . label_num }, 'state' : self . state_dict () } torch . save ( save_info , save_apth ) def predict ( self , inputs ): # \u8ba1\u7b97\u8f93\u5165\u6279\u6b21\u6837\u672c\u7684\u6bcf\u4e2a Token \u7684\u5206\u6570\uff0c\u5373\uff1a\u6bcf\u4e2a\u53e5\u5b50\u7684\u53d1\u5c04\u77e9\u9635 emission_scores = self . bilstm . predict ( inputs ) # viterbi_decode \u51fd\u6570\u63a5\u6536\u7684\u53d1\u5c04\u77e9\u9635\u4e3a\u4e8c\u7ef4\u7684 (seq_len, scores) logits = self . crf . predict ( emission_scores ) return logits \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/bilstm_crf.py 6.6 \u6a21\u578b\u8bad\u7ec3 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u638c\u63e1\u6570\u636e\u7684\u9884\u5904\u7406\u6d41\u7a0b \u638c\u63e1\u751f\u6210\u6279\u91cf\u8bad\u7ec3\u6570\u636e\u7684\u65b9\u6cd5 \u638c\u63e1\u6a21\u578b\u8bad\u7ec3\u4ee3\u7801 \u6a21\u578b\u8bad\u7ec3\u7684\u6d41\u7a0b \u7b2c\u4e00\u6b65\uff1a\u719f\u6089\u5b57\u7b26\u5230\u6570\u5b57\u7f16\u7801\u7684\u7801\u8868 \u7b2c\u4e8c\u6b65\uff1a\u719f\u6089\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u5f0f\u548c\u542b\u4e49\u89e3\u91ca \u7b2c\u4e09\u6b65\uff1a\u751f\u6210\u6279\u91cf\u8bad\u7ec3\u6570\u636e \u7b2c\u56db\u6b65\uff1a\u5b8c\u6210\u8bad\u7ec3\u6a21\u578b\u7684\u4ee3\u7801\u3002 \u7b2c\u4e94\u6b65\uff1a\u5b8c\u6210\u51c6\u786e\u7387\u548c\u53ec\u56de\u7387\u7684\u8bc4\u4f30\u4ee3\u7801 \u7b2c\u516d\u6b65\uff1a\u7ed8\u5236\u635f\u5931\u66f2\u7ebf\u548c\u8bc4\u4f30\u66f2\u7ebf\u56fe \u7b2c\u4e00\u6b65\uff1a\u719f\u6089\u5b57\u7b26\u5230\u6570\u5b57\u7f16\u7801\u7684\u7801\u8868\u3002 # \u4ee3\u8868\u4e86\u6570\u636e\u96c6\u4e2d\u6240\u6709\u5b57\u7b26\u5230\u6570\u5b57\u7f16\u7801\u7684\u5b57\u5178\u6620\u5c04 # \u7801\u8868\u53ef\u4ee5\u5305\u542b\u4e2d\u6587\u7b80\u4f53\u3001\u7e41\u4f53\u3001\u82f1\u6587\u5927\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e2d\u82f1\u6587\u6807\u70b9\u7b26\u53f7\u7b49\u7b49 # <PAD>\u4e3a\u586b\u5145\u6807\u8bc6\uff0c\u8bad\u7ec3\u65f6\u9700\u8981\u5c06\u53e5\u5b50\u8f6c\u5316\u6210\u77e9\u9635\uff0c\u800c\u53e5\u5b50\u957f\u77ed\u4e0d\u4e00\uff0c\u9700\u8981\u505apadding\u5904\u7406 { \"<PAD>\": 0, \"\u5391\": 1, \"\u5416\": 2, \"\u5475\": 3, \"\u554a\": 4, \"\u55c4\": 5, \"\u5b36\": 6, ... } \u7801\u8868\u6240\u5728\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/data/char_to_id.json # \u8fd9\u91cc\u4e0d\u4f7f\u7528\u7801\u8868\u539f\u59cb\u7f16\u7801\uff0c\u540e\u7eed\u4f7f\u7528BertTokenizer\u8fdb\u884c\u7f16\u7801 def build_vocab (): chat_to_id = json . load ( open ( 'data/char_to_id.json' , mode = 'r' , encoding = 'utf8' )) unique_words = list ( chat_to_id . keys ())[ 1 : - 1 ] unique_words . insert ( 0 , '[UNK]' ) unique_words . insert ( 0 , '[PAD]' ) # \u5c06\u5b57\u5199\u5165\u5230 data/bilstm_crf_vocab_aidoc.txt \u8bcd\u5178\u6587\u4ef6\u4e2d with open ( 'data/bilstm_crf_vocab_aidoc.txt' , 'w' ) as file : for word in unique_words : file . write ( word + ' \\n ' ) \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/build_vocab.py \u7b2c\u4e8c\u6b65\uff1a\u719f\u6089\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u5f0f\u548c\u542b\u4e49\u89e3\u91ca\u3002 { \"text\" : [ \"\u5973\" , \"\u6027\" , \"\uff0c\" , \"8\" , \"8\" , \"\u5c81\" , \"\uff0c\" , \"\u519c\" , \"\u6c11\" , \"\uff0c\" , \"\u53cc\" , \"\u6ee6\" , \"\u533a\" , \"\u5e94\" , \"\u8425\" , \"\u5b50\" , \"\u6751\" , \"\u4eba\" , \"\uff0c\" , \"\u4e3b\" , \"\u56e0\" , \"\u53f3\" , \"\u9acb\" , \"\u90e8\" , \"\u6454\" , \"\u4f24\" , \"\u540e\" , \"\u75bc\" , \"\u75db\" , \"\u80bf\" , \"\u80c0\" , \"\uff0c\" , \"\u6d3b\" , \"\u52a8\" , \"\u53d7\" , \"\u9650\" , \"5\" , \"\u5c0f\" , \"\u65f6\" , \"\u4e8e\" , \"2\" , \"0\" , \"1\" , \"6\" , \"-\" , \"1\" , \"0\" , \"-\" , \"2\" , \"9\" , \"\uff1b\" , \"1\" , \"1\" , \"\uff1a\" , \"1\" , \"2\" , \"\u5165\" , \"\u9662\" , \"\u3002\" ], \"label\" : [ \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"B-sym\" , \"I-sym\" , \"B-sym\" , \"I-sym\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" ]} \u8bad\u7ec3\u6570\u636e\u96c6\u7684\u542b\u4e49\u89e3\u91ca\uff1a \u6bcf\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u5b57\u4ee5\u53ca\u4e0e\u4e4b\u5bf9\u5e94\u7684\u6807\u7b7e json\u683c\u5f0f \u6807\u7b7e\u8bf4\u660e\uff1a B-dis: \u75be\u75c5\u5b9e\u4f53\u540d\u8bcd\u8d77\u59cb\u6807\u8bc6 I-dis: \u75be\u75c5\u5b9e\u4f53\u540d\u8bcd\u4e2d\u95f4\u5230\u7ed3\u5c3e\u6807\u8bc6 B-sym: \u75c7\u72b6\u5b9e\u4f53\u540d\u8bcd\u8d77\u59cb\u6807\u8bc6 I-sym: \u75c7\u72b6\u5b9e\u4f53\u540d\u8bcd\u4e2d\u95f4\u5230\u7ed3\u5c3e\u6807\u8bc6 O: \u5176\u4ed6\u975e\u5b9e\u4f53\u90e8\u5206\u6807\u8bc6 \u6570\u636e\u96c6\u6240\u5728\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/data/train.txt /data/doctor_offline/ner_model/data/valid.txt \u5c06\u8bad\u7ec3\u6570\u636e\u96c6\u8f6c\u6362\u4e3acsv\u683c\u5f0f\uff1a import pandas as pd import json def load_corpus (): # \u5b9a\u4e49\u8bad\u7ec3\u6570\u636e\u96c6\u548c\u9a8c\u8bc1\u6570\u636e\u96c6\u7684\u8def\u5f84 train_data_file_path = 'ai_doc_data/train.txt' validate_file_path = 'ai_doc_data/validate.txt' data_inputs , data_labels = [], [] # \u56e0\u4e3a\u6bcf\u884c\u90fd\u662f\u4e00\u4e2a\u6837\u672c\uff0c\u6240\u4ee5\u6309\u884c\u904d\u5386\u5373\u53ef for line in open ( train_data_file_path , mode = 'r' , encoding = 'utf8' ): # \u6bcf\u884c\u6837\u672c\u6570\u636e\u90fd\u662fjson\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884cloads, \u7136\u540e\u8ffd\u52a0\u8fdb\u7ed3\u679c\u5217\u8868\u4e2d data = json . loads ( line ) # print(type(data)) data_inputs . append ( ' ' . join ( data [ 'text' ])) data_labels . append ( ' ' . join ( data [ 'label' ])) train_data_df = pd . DataFrame () train_data_df [ 'data_inputs' ] = data_inputs train_data_df [ 'data_labels' ] = data_labels train_data_df . to_csv ( 'data/01-\u8bad\u7ec3\u96c6_aidoc.csv' ) print ( '\u8bad\u7ec3\u96c6\u6570\u636e\u91cf\uff1a' , len ( train_data_df )) data_inputs , data_labels = [], [] for line in open ( validate_file_path , mode = 'r' , encoding = 'utf8' ): data = json . loads ( line ) data_inputs . append ( ' ' . join ( data [ 'text' ])) data_labels . append ( ' ' . join ( data [ 'label' ])) # \u5b58\u50a8\u6d4b\u8bd5\u96c6\u6570\u636e test_data_df = pd . DataFrame () test_data_df [ 'data_inputs' ] = data_inputs test_data_df [ 'data_labels' ] = data_labels test_data_df . to_csv ( 'data/02-\u6d4b\u8bd5\u96c6_aidoc.csv' ) print ( '\u6d4b\u8bd5\u96c6\u6570\u636e\u91cf\uff1a' , len ( test_data_df )) \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/load_corpus.py \u7b2c\u4e09\u6b65\uff1a\u518d\u5c06csv\u6587\u4ef6\u8f6c\u6210DatasetDict\u683c\u5f0f\uff0c\u751f\u6210\u6279\u91cf\u8bad\u7ec3\u6570\u636e\u3002 import pandas as pd from datasets import Dataset , DatasetDict def encode_label (): label_to_index = { \"O\" : 0 , \"B-dis\" : 1 , \"I-dis\" : 2 , \"B-sym\" : 3 , \"I-sym\" : 4 } # \u5c06 csv \u6570\u636e\u8f6c\u6362\u6210 Dataset \u7c7b\u578b train_data = pd . read_csv ( 'data/01-\u8bad\u7ec3\u96c6_aidoc.csv' ) valid_data = pd . read_csv ( 'data/02-\u6d4b\u8bd5\u96c6_aidoc.csv' ) train_data = Dataset . from_pandas ( train_data ) valid_data = Dataset . from_pandas ( valid_data ) corpus_data = DatasetDict ({ 'train' : train_data , 'valid' : valid_data }) # \u5c06\u6807\u7b7e\u6570\u636e\u8f6c\u6362\u4e3a\u7d22\u5f15\u8868\u793a def data_handler ( data_labels , data_inputs ): data_label_ids = [] for labels in data_labels : label_ids = [] for label in labels . split (): label_ids . append ( label_to_index [ label ]) data_label_ids . append ( label_ids ) return { 'data_labels' : data_label_ids , 'data_inputs' : data_inputs } corpus_data = corpus_data . map ( data_handler , input_columns = [ 'data_labels' , 'data_inputs' ], batched = True ) # \u6570\u636e\u5b58\u50a8 corpus_data . save_to_disk ( 'data/bilstm_crf_data_aidoc' ) \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/encode_label.py \u751f\u6210\u4e86\u65b0\u7684\u6570\u636e\u96c6\u6587\u4ef6\uff1a/data/doctor_offline/ner_model/data/bilstm_crf_data_aidoc \u7b2c\u56db\u6b65\uff1a\u5b8c\u6210\u8bad\u7ec3\u6a21\u578b\u7684\u4ee3\u7801\u3002 import torch import torch.optim as optim import numpy as np import pandas as pd from torch.nn.utils.rnn import pad_sequence from datasets import load_from_disk from transformers import BertTokenizer import matplotlib.pyplot as plt from bilstm_crf import NER from evaluate import evaluate device = torch . device ( \"cuda:0\" if torch . cuda . is_available () else \"cpu\" ) def pad_batch_inputs ( data , labels , tokenizer ): # \u51fd\u6570\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u6309\u7167\u5185\u5bb9\u957f\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u8fc7\u7684\uff0csentence \u548c label, \u8fd8\u8981\u8fd4\u56de sentence \u957f\u5ea6 # \u5c06\u6279\u6b21\u6570\u636e\u7684\u8f93\u5165\u548c\u6807\u7b7e\u503c\u5206\u5f00\uff0c\u5e76\u8ba1\u7b97\u6279\u6b21\u7684\u8f93\u5165\u957f\u5ea6 data_inputs , data_length , data_labels = [], [], [] for data_input , data_label in zip ( data , labels ): # \u5bf9\u8f93\u5165\u53e5\u5b50\u8fdb\u884c\u7f16\u7801 data_input_encode = tokenizer . encode ( data_input , return_tensors = 'pt' , add_special_tokens = False ) data_input_encode = data_input_encode . to ( device ) data_inputs . append ( data_input_encode . squeeze ()) # \u53bb\u9664\u591a\u4f59\u7a7a\u683c\uff0c\u8ba1\u7b97\u53e5\u5b50\u957f\u5ea6 data_input = '' . join ( data_input . split ()) data_length . append ( len ( data_input )) # \u5c06\u6807\u7b7e\u8f6c\u6362\u4e3a\u5f20\u91cf data_labels . append ( torch . tensor ( data_label , device = device )) # \u5bf9\u4e00\u4e2a\u6279\u6b21\u7684\u5185\u5bb9\u6309\u7167\u957f\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7b26\u53f7\u8868\u793a\u964d\u5e8f sorted_index = np . argsort ( - np . asarray ( data_length )) # \u6839\u636e\u957f\u5ea6\u7684\u7d22\u5f15\u8fdb\u884c\u6392\u5e8f sorted_inputs , sorted_labels , sorted_length = [], [], [] for index in sorted_index : sorted_inputs . append ( data_inputs [ index ]) sorted_labels . append ( data_labels [ index ]) sorted_length . append ( data_length [ index ]) # \u5bf9\u5f20\u91cf\u8fdb\u884c\u586b\u5145\uff0c\u4f7f\u5176\u53d8\u6210\u957f\u5ea6\u4e00\u6837\u7684\u5f20\u91cf pad_inputs = pad_sequence ( sorted_inputs ) return pad_inputs , sorted_labels , sorted_length label_to_index = { \"O\" : 0 , \"B-dis\" : 1 , \"I-dis\" : 2 , \"B-sym\" : 3 , \"I-sym\" : 4 } def train (): # \u8bfb\u53d6\u6570\u636e\u96c6 train_data = load_from_disk ( 'data/bilstm_crf_data_aidoc' )[ 'train' ] # \u6784\u5efa\u5206\u8bcd\u5668 tokenizer = BertTokenizer ( vocab_file = 'data/bilstm_crf_vocab_aidoc.txt' ) # \u6784\u5efa\u6a21\u578b model = NER ( vocab_size = tokenizer . vocab_size , label_num = len ( label_to_index )) . cuda ( device ) # model_param = torch.load('data/BiLSTM-CRF-final.bin') # model = NER(**model_param['init']).cuda(device) # model.load_state_dict(model_param['state']) # \u6279\u6b21\u5927\u5c0f batch_size = 16 # \u4f18\u5316\u5668 optimizer = optim . AdamW ( model . parameters (), lr = 3e-5 ) # \u8bad\u7ec3\u8f6e\u6570 num_epoch = 700 # train history train_history_list = [] # valid history valid_history_list = [] # \u5f00\u59cb\u8bad\u7ec3 def start_train ( data_inputs , data_labels , tokenizer ): # \u5bf9\u6279\u91cf\u6570\u636e\u8fdb\u884c\u586b\u5145\u5bf9\u9f50 pad_inputs , sorted_labels , sorted_length = \\ pad_batch_inputs ( data_inputs , data_labels , tokenizer ) # \u8ba1\u7b97\u635f\u5931 loss = model ( pad_inputs , sorted_labels , sorted_length ) # \u68af\u5ea6\u6e05\u96f6 optimizer . zero_grad () # \u53cd\u5411\u4f20\u64ad loss . backward () # \u53c2\u6570\u66f4\u65b0 optimizer . step () # \u7edf\u8ba1\u635f\u5931 nonlocal total_loss total_loss += loss . item () for epoch in range ( 0 , num_epoch ): # \u7edf\u8ba1\u635f\u5931 total_loss = 0.0 # \u5f00\u59cb\u8bad\u7ec3 train_data . map ( start_train , input_columns = [ 'data_inputs' , 'data_labels' ], batched = True , batch_size = batch_size , fn_kwargs = { 'tokenizer' : tokenizer }, desc = 'epoch: %d ' % ( epoch + 1 )) # \u6253\u5370\u635f\u5931 print ( 'epoch: %d loss: %.3f ' % ( epoch + 1 , total_loss )) # evaluate train data # train_eval_result = evaluate(model, tokenizer, train_data) # train_eval_result.append(total_loss) # train_history_list.append(train_eval_result) # evaluate valid data # valid_history_list.append(evaluate(model, tokenizer)) # \u5b58\u50a8\u6a21\u578b if ( epoch + 1 ) % 10 == 0 : model . save_model ( 'data/BiLSTM-CRF- %d .bin' % ( epoch + 1 )) # plot history curve # save_train_history_image(train_history_list, valid_history_list, \"log/bilstm_crf_train_plot.png\") if __name__ == '__main__' : train () \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/train.py \u7b2c\u4e94\u6b65\uff1a\u5b8c\u6210\u51c6\u786e\u7387\u548c\u53ec\u56de\u7387\u7684\u8bc4\u4f30\u4ee3\u7801\u3002 import torch from datasets import load_from_disk from transformers import BertTokenizer from bilstm_crf import NER device = torch . device ( \"cuda:0\" if torch . cuda . is_available () else \"cpu\" ) def evaluate ( model = None , tokenizer = None , data = None ): if data is None : # \u8bfb\u53d6\u6d4b\u8bd5\u6570\u636e data = load_from_disk ( 'data/bilstm_crf_data_aidoc' )[ 'valid' ] # 1. \u8ba1\u7b97\u5404\u4e2a\u4e0d\u540c\u7c7b\u522b\u603b\u5b9e\u4f53\u6570\u91cf # \u8ba1\u7b97\u6d4b\u8bd5\u96c6\u5b9e\u4f53\u6570\u91cf total_entities = { 'DIS' : [], 'SYM' : []} # indicators indicators = [] def calculate_handler ( data_inputs , data_labels ): # \u5c06 data_inputs \u8f6c\u6362\u4e3a\u6ca1\u6709\u7a7a\u683c\u9694\u5f00\u7684\u53e5\u5b50 data_inputs = '' . join ( data_inputs . split ()) # \u63d0\u53d6\u53e5\u5b50\u4e2d\u7684\u5b9e\u4f53 extract_entities = extract_decode ( data_labels , data_inputs ) # \u7edf\u8ba1\u6bcf\u79cd\u5b9e\u4f53\u7684\u6570\u91cf nonlocal total_entities for key , value in extract_entities . items (): total_entities [ key ] . extend ( value ) # \u7edf\u8ba1\u4e0d\u540c\u5b9e\u4f53\u7684\u6570\u91cf data . map ( calculate_handler , input_columns = [ 'data_inputs' , 'data_labels' ]) # print(total_entities) # 2. \u8ba1\u7b97\u6a21\u578b\u9884\u6d4b\u7684\u5404\u4e2a\u7c7b\u522b\u5b9e\u4f53\u6570\u91cf if model is None : model_param = torch . load ( 'data/BiLSTM-CRF-final.bin' ) model = NER ( ** model_param [ 'init' ]) . cuda ( device ) model . load_state_dict ( model_param [ 'state' ]) # \u6784\u5efa\u5206\u8bcd\u5668 if tokenizer is None : tokenizer = BertTokenizer ( vocab_file = 'data/bilstm_crf_vocab_aidoc.txt' ) model_entities = { 'DIS' : [], 'SYM' : [], } def start_evaluate ( data_inputs ): # \u5bf9\u8f93\u5165\u6587\u672c\u8fdb\u884c\u5206\u8bcd model_inputs = tokenizer . encode ( data_inputs , add_special_tokens = False , return_tensors = 'pt' )[ 0 ] model_inputs = model_inputs . to ( device ) # \u6587\u672c\u9001\u5165\u6a21\u578b\u8fdb\u884c\u8ba1\u7b97 with torch . no_grad (): label_list = model . predict ( model_inputs ) # \u7edf\u8ba1\u9884\u6d4b\u7684\u5b9e\u4f53\u6570\u91cf text = '' . join ( data_inputs . split ()) # \u4ece\u9884\u6d4b\u7ed3\u679c\u63d0\u53d6\u5b9e\u4f53\u540d\u5b57 extract_entities = extract_decode ( label_list , text ) nonlocal model_entities for key , value in extract_entities . items (): model_entities [ key ] . extend ( value ) # \u7edf\u8ba1\u9884\u6d4b\u4e0d\u540c\u5b9e\u4f53\u7684\u6570\u91cf data . map ( start_evaluate , input_columns = [ 'data_inputs' ], batched = False ) # print(model_entities) # 3. \u7edf\u8ba1\u6bcf\u4e2a\u7c7b\u522b\u7684\u53ec\u56de\u7387 total_pred_correct = 0 total_true_correct = 0 for key in total_entities . keys (): # \u83b7\u5f97\u5f53\u524d key \u7c7b\u522b\u771f\u5b9e\u548c\u6a21\u578b\u9884\u6d4b\u5b9e\u4f53\u5217\u8868 true_entities = total_entities [ key ] true_entities_num = len ( true_entities ) pred_entities = model_entities [ key ] pred_entities_num = len ( pred_entities ) # \u5206\u89e3\u9884\u6d4b\u5b9e\u4f53\u4e2d\uff0cpred_correct \u8868\u793a\u9884\u6d4b\u6b63\u786e\uff0cpred_incorrect \u8868\u793a\u9884\u6d4b\u9519\u8bef pred_correct , pred_incorrect = 0 , 0 for pred_entity in pred_entities : if pred_entity in true_entities : pred_correct += 1 continue pred_incorrect += 1 # \u8ba1\u7b97\u5171\u9884\u6d4b\u6b63\u786e\u591a\u5c11\u4e2a\u5b9e\u4f53 total_pred_correct += pred_correct # \u8ba1\u7b97\u5171\u6709\u591a\u5c11\u4e2a\u771f\u5b9e\u7684\u5b9e\u4f53 total_true_correct += true_entities_num # \u8ba1\u7b97\u7cbe\u5ea6 # \u7cbe\u786e\u7387\uff1a\u9884\u6d4b\u7ed3\u679c\u4e3a\u6b63\u4f8b\u6837\u672c\u4e2d\u771f\u5b9e\u4e3a\u6b63\u4f8b\u7684\u6bd4\u4f8b # \u53ec\u56de\u7387\uff1a\u771f\u5b9e\u4e3a\u6b63\u4f8b\u7684\u6837\u672c\u4e2d\u9884\u6d4b\u7ed3\u679c\u4e3a\u6b63\u4f8b\u7684\u6bd4\u4f8b recall = pred_correct / true_entities_num precision = pred_correct / pred_entities_num f1 = 0 if recall != 0 or precision != 0 : f1 = 2 * precision * recall / ( precision + recall ) print ( key , '\u67e5\u5168\u7387\uff1a %.3f ' % recall ) print ( key , '\u67e5\u51c6\u7387\uff1a %.3f ' % precision ) print ( key , 'f1: %.3f ' % f1 ) print ( '-' * 50 ) indicators . extend ([ recall , precision , f1 ]) print ( '\u51c6\u786e\u7387\uff1a %.3f ' % ( total_pred_correct / total_true_correct )) indicators . append ( total_pred_correct / total_true_correct ) return indicators def extract_decode ( label_list , text ): \"\"\" :param label_list: \u6a21\u578b\u8f93\u51fa\u7684\u5305\u542b\u6807\u7b7e\u5e8f\u5217\u7684\u4e00\u7ef4\u5217\u8868 :param text: \u6a21\u578b\u8f93\u5165\u7684\u53e5\u5b50 :return: \u63d0\u53d6\u5230\u7684\u5b9e\u4f53\u540d\u5b57 \"\"\" label_to_index = { \"O\" : 0 , \"B-dis\" : 1 , \"I-dis\" : 2 , \"B-sym\" : 3 , \"I-sym\" : 4 } B_DIS , I_DIS = label_to_index [ 'B-dis' ], label_to_index [ 'I-dis' ] B_SYM , I_SYM = label_to_index [ 'B-sym' ], label_to_index [ 'I-sym' ] # \u63d0\u53d6\u8fde\u7eed\u7684\u6807\u7b7e\u4ee3\u8868\u7684\u5b9e\u4f53 def extract_word ( start_index , next_label ): # index \u8868\u793a\u6700\u540e\u7d22\u5f15\u7684\u4f4d\u7f6e index , entity = start_index + 1 , [ text [ start_index ]] for index in range ( start_index + 1 , len ( label_list )): if label_list [ index ] != next_label : break entity . append ( text [ index ]) return index , '' . join ( entity ) # \u5b58\u50a8\u63d0\u53d6\u7684\u547d\u540d\u5b9e\u4f53 extract_entites , index = { 'DIS' : [], 'SYM' : []}, 0 # \u6620\u5c04\u4e0b\u4e00\u4e2a\u6301\u7eed\u7684\u6807\u7b7e next_label = { B_DIS : I_DIS , B_SYM : I_SYM } # \u6620\u5c04\u8bcd\u7684\u6240\u5c5e\u7c7b\u522b word_class = { B_DIS : 'DIS' , B_SYM : 'SYM' } while index < len ( label_list ): # \u83b7\u5f97\u5f53\u524d\u4f4d\u7f6e\u7684\u6807\u7b7e label = label_list [ index ] if label in next_label . keys (): # \u5c06\u5f53\u524d\u4f4d\u7f6e\u548c\u5bf9\u5e94\u7684\u4e0b\u4e00\u4e2a\u6301\u7eed\u6807\u7b7e\u4f20\u9012\u5230 extract_word \u51fd\u6570 index , word = extract_word ( index , next_label [ label ]) extract_entites [ word_class [ label ]] . append ( word ) continue index += 1 return extract_entites if __name__ == '__main__' : evaluate () \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/evaluate.py \u7b2c\u516d\u6b65\uff1a\u7ed8\u5236\u635f\u5931\u66f2\u7ebf\u548c\u8bc4\u4f30\u66f2\u7ebf\u56fe \u8bad\u7ec3\u548c\u9a8c\u8bc1\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf\uff1a \u5206\u6790\uff1a \u9996\u5148\uff0c\u51c6\u786e\u7387\u662f\u6307\u8bc6\u522b**\u6b63\u786e\u7684\u5b9e\u4f53**\u5360**\u8bc6\u522b\u51fa\u7684\u5b9e\u4f53**\u4e2d\u7684\u6bd4\u4f8b\u3002 \u6839\u636e\u5bf9\u7167\u66f2\u7ebf\u6765\u770b\uff0c\u6574\u4f53\u5b66\u4e60\u7ed3\u679c\u90fd\u5728\u8d8b\u4e8e\u51c6\u786e\u7387\u4e0a\u5347\u65b9\u5411\u589e\u52a0\uff0c\u800c\u4e14\u968f\u7740\u6279\u6b21\u7684\u589e\u52a0\u66f2\u7ebf\u9707\u52a8\u76f8\u5bf9\u5e73\u7a33\uff0c\u4e0d\u8fc7\u53ef\u80fd\u7531\u4e8e\u8bad\u7ec3\u4e0e\u9a8c\u8bc1\u6837\u672c\u5206\u5e03\u4e0d\u5747\u8861\u6216\u8005\u566a\u58f0\u7b49\u539f\u56e0\uff0c\u5bfc\u81f4\u6700\u7ec8\u9a8c\u8bc1\u96c6\u7684\u51c6\u786e\u5ea6\u6ca1\u6709\u8fbe\u5230\u4e0e\u8bad\u7ec3\u96c6\u76f8\u540c\u7684\u60c5\u51b5\u3002 \u6700\u7ec8\u7684\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u7684\u53ec\u56de\u7387\u5206\u522b\u5728\uff1a0.85\u548c0.78\u5de6\u53f3\u3002 \u8bad\u7ec3\u548c\u9a8c\u8bc1\u53ec\u56de\u7387\u5bf9\u7167\u66f2\u7ebf\uff1a \u5206\u6790\uff1a \u5728\u6b64\u53ec\u56de\u7387\u662f\u6307**\u8bc6\u522b\u6b63\u786e\u7684\u5b9e\u4f53**\u5360\u5f53\u524d\u6279\u6b21\u6240\u5305\u542b\u7684**\u6240\u6709\u5b9e\u4f53\u603b\u6570**\u7684\u6bd4\u4f8b\u3002 \u5173\u4e8e\u8bad\u7ec3\u548c\u9a8c\u8bc1\u53ec\u56de\u7387\u5bf9\u7167\u66f2\u7ebf\uff0c\u53ef\u4ee5\u770b\u51fa\u53ec\u56de\u7387\u7684\u53d8\u5316\u76f8\u5bf9\u6bd4\u8f83\u5e73\u6ed1\uff0c\u57fa\u672c\u4e0a\u4e5f\u572840\u6b65\u5de6\u53f3\u8d8b\u4e8e\u7a33\u5b9a\u3002 \u6700\u7ec8\u7684\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u7684\u53ec\u56de\u7387\u5206\u522b\u5728\uff1a0.83\u548c0.75\u5de6\u53f3\u3002 \u8bad\u7ec3\u548c\u9a8c\u8bc1F1\u503c\u5bf9\u7167\u66f2\u7ebf\uff1a \u5206\u6790\uff1a F1\u503c\u4e3b\u8981\u662f\u6307\u8bad\u7ec3\u6548\u679c\u800c\u8a00\uff0c\u5728\u4e0d\u591a\u8bc6\u522b\u5b9e\u4f53\u7684\u60c5\u51b5\u4e0b\u540c\u65f6\u63d0\u9ad8\u51c6\u786e\u5ea6\u7684\u8861\u91cf\u6307\u6807\u3002 \u5176\u516c\u5f0f\u4e3a\uff1a2\u00d7\u51c6\u786e\u7387\u00d7\u53ec\u56de\u7387 / (\u51c6\u786e\u7387**+**\u53ec\u56de\u7387) \u4ece\u66f2\u7ebf\u53ef\u89c1\u6574\u4f53F1\u503c\u4e0a\u5347\u4e0e\u635f\u5931\u3001\u53ec\u56de\u7387\u7684\u66f2\u7ebf\u6bd4\u8f83\u63a5\u8fd1\uff0c\u8bf4\u660e\u5728\u8bc6\u522b\u51fa\u7684\u5b9e\u4f53\u4e2d\uff0c\u6b63\u786e\u7387\u6bd4\u8f83\u95ee\u9898\uff0c\u4e0d\u8fc7\u6839\u636e\u524d\u9762\u7684\u51c6\u786e\u5ea6\u6765\u5206\u6790\uff0c\u53ef\u80fd\u5728\u8bc6\u522b\u8fc7\u7a0b\u4e2d\uff0c\u589e\u52a0\u4e86\u8bc6\u522b\u51fa\u7684\u5b9e\u4f53\u4e2a\u6570\u800c\u5bfc\u81f4\u4e0d\u7a33\u5b9a\u3002\u4ece\u8fd9\u65b9\u9762\u6765\u8bf4\uff0c\u53ef\u4ee5\u9a8c\u8bc1\u6837\u672c\u4e0d\u5747\u8861\u95ee\u9898\u4ee5\u53ca\u566a\u58f0\u5bf9\u6a21\u578b\u7684\u5f71\u54cd\u8fd8\u662f\u6bd4\u8f83\u5927\u7684\u3002 \u4ece\u6574\u4f53\u800c\u8a00\uff0cF1\u503c\u57fa\u672c\u4e5f\u5728\u7b2c40\u6b65\u4e4b\u540e\u8d8b\u4e8e\u7a33\u5b9a\uff0c\u6700\u7ec8\u7684\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u7684\u7ed3\u679c\u5728\uff1a0.85\u548c0.75\u5de6\u53f3\u3002 \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86\u6570\u636e\u9884\u5904\u7406\u7684\u76f8\u5173\u65b9\u6cd5 \u5b66\u4e60\u751f\u6210\u6279\u91cf\u8bad\u7ec3\u6570\u636e\u7684\u65b9\u6cd5 \u5b66\u4e60\u4e86\u6a21\u578b\u8bad\u7ec3\u76f8\u5173\u4ee3\u7801\u7684\u5b9e\u73b0 \u7cbe\u786e\u7387\u548c\u53ec\u56de\u7387\u8bc4\u4f30\u7684\u4ee3\u7801 \u6a21\u578b\u6784\u5efa\u7c7b\u7684\u5168\u90e8\u5185\u90e8\u51fd\u6570\u4ee3\u7801 \u542f\u52a8\u8bad\u7ec3\u6d41\u7a0b\u7684\u4ee3\u7801 6.7 \u6a21\u578b\u4f7f\u7528 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u5b9e\u4f53\u62bd\u53d6 \u5b9e\u4f53\u62bd\u53d6 import torch from transformers import BertTokenizer from bilstm_crf import NER from evaluate import extract_decode from tqdm import tqdm import os device = torch . device ( \"cuda:0\" if torch . cuda . is_available () else \"cpu\" ) def entity_extract ( text ): # \u6784\u5efa\u5206\u8bcd\u5668 tokenizer = BertTokenizer ( vocab_file = 'data/bilstm_crf_vocab_aidoc.txt' ) # \u521d\u59cb\u5316\u6a21\u578b model_param = torch . load ( 'data/BiLSTM-CRF-final.bin' ) model = NER ( ** model_param [ 'init' ]) . cuda ( device ) model . load_state_dict ( model_param [ 'state' ]) # \u6211\u4eec\u5148\u6309\u5b57\u5c06\u5176\u5206\u5f00\uff0c\u5e76\u5728\u5b57\u4e4b\u95f4\u6dfb\u52a0\u7a7a\u683c\uff0c\u4fbf\u4e8e Bert \u5206\u8bcd\u5668\u80fd\u591f\u51c6\u786e\u6309\u5b57\u5206\u5272 input_text = ' ' . join ( list ( text )) model_inputs = tokenizer . encode ( input_text , add_special_tokens = False , return_tensors = 'pt' )[ 0 ] model_inputs = model_inputs . to ( device ) with torch . no_grad (): outputs = model . predict ( model_inputs ) return extract_decode ( outputs , '' . join ( input_text . split ())) def batch_entity_extract ( data_path ): for fn in tqdm ( os . listdir ( data_path )): # \u62fc\u88c5\u5168\u8def\u5f84 fullpath = os . path . join ( data_path , fn ) # \u5b9a\u4e49\u8f93\u51fa\u7ed3\u679c\u6587\u4ef6 entities_file = open ( os . path . join ( prediction_result_path , fn . replace ( 'txt' , 'csv' )), mode = 'w' , encoding = 'utf8' ) with open ( fullpath , mode = 'r' , encoding = 'utf8' ) as f : # \u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9 text = f . readline () # \u8c03\u7528\u5355\u4e2a\u9884\u6d4b\u6a21\u578b\uff0c\u8f93\u51fa\u4e3a\u76ee\u6807\u52b3\u7d2f\u578b\u5b9e\u4f53\u6587\u672c\u5217\u8868 entities = entity_extract ( text ) print ( entities ) # \u5199\u5165\u8bc6\u522b\u7ed3\u679c\u6587\u4ef6 entities_file . write ( \" \\n \" . join ( entities )) print ( 'batch_predict Finished' . center ( 100 , '-' )) if __name__ == '__main__' : batch_entity_extract ( 'data/unstructured/norecognite' ) # text = \"\u672c\u75c5\u662f\u7531DNA\u75c5\u6bd2\u7684\u5355\u7eaf\u75b1\u75b9\u75c5\u6bd2\u6240\u81f4\u3002\u4eba\u7c7b\u5355\u7eaf\u75b1\u75b9\u75c5\u6bd2\u5206\u4e3a\u4e24\u578b\uff0c\" \\ # \"\u5373\u5355\u7eaf\u75b1\u75b9\u75c5\u6bd2\u2160\u578b\uff08HSV-\u2160\uff09\u548c\u5355\u7eaf\u75b1\u75b9\u75c5\u6bd2\u2161\u578b\uff08HSV-\u2161\uff09\u3002\" \\ # \"\u2160\u578b\u4e3b\u8981\u5f15\u8d77\u751f\u6b96\u5668\u4ee5\u5916\u7684\u76ae\u80a4\u9ecf\u819c\uff08\u53e3\u8154\u9ecf\u819c\uff09\u548c\u5668\u5b98\uff08\u8111\uff09\u7684\u611f\u67d3\u3002\" \\ # \"\u2161\u578b\u4e3b\u8981\u5f15\u8d77\u751f\u6b96\u5668\u90e8\u4f4d\u76ae\u80a4\u9ecf\u819c\u611f\u67d3\u3002\" \\ # \"\u75c5\u6bd2\u7ecf\u547c\u5438\u9053\u3001\u53e3\u8154\u3001\u751f\u6b96\u5668\u9ecf\u819c\u4ee5\u53ca\u7834\u635f\u76ae\u80a4\u8fdb\u5165\u4f53\u5185\uff0c\" \\ # \"\u6f5c\u5c45\u4e8e\u4eba\u4f53\u6b63\u5e38\u9ecf\u819c\u3001\u8840\u6db2\u3001\u553e\u6db2\u53ca\u611f\u89c9\u795e\u7ecf\u8282\u7ec6\u80de\u5185\u3002\" \\ # \"\u5f53\u673a\u4f53\u62b5\u6297\u529b\u4e0b\u964d\u65f6\uff0c\u5982\u53d1\u70ed\u80c3\u80a0\u529f\u80fd\u7d0a\u4e71\u3001\u6708\u7ecf\u3001\u75b2\u52b3\u7b49\u65f6\uff0c\" \\ # \"\u4f53\u5185\u6f5c\u4f0f\u7684HSV\u88ab\u6fc0\u6d3b\u800c\u53d1\u75c5\u3002\" # result = entity_extract(text) # print(result) \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/entity_extract.py \u8f93\u51fa\u6548\u679c\uff1a\u5c06\u8bc6\u522b\u7ed3\u679c\u4fdd\u5b58\u81f3prediction_result_path\u6307\u5b9a\u7684\u76ee\u5f55\u4e0b\uff0c\u540d\u79f0\u4e0e\u6e90\u6587\u4ef6\u4e00\u81f4\uff0c\u5185\u5bb9\u4e3a\u6bcf\u884c\u5b58\u50a8\u8bc6\u522b\u5b9e\u4f53\u540d\u79f0","title":"\u7b2c\u516d\u7ae0:\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u4efb\u52a1"},{"location":"6.html#61","text":"\u5b66\u4e60\u76ee\u6807 \u77e5\u9053\u5e8f\u5217\u6807\u6ce8\u95ee\u9898\u4e3b\u8981\u4efb\u52a1 \u638c\u63e1\u6761\u4ef6\u968f\u673a\u573a\u6a21\u578b\u6982\u5ff5 \u80fd\u591f\u4f7f\u7528\u6761\u4ef6\u968f\u673a\u573a\u8fdb\u884c\u8bcd\u6027\u6807\u6ce8 \u5e8f\u5217\u6807\u6ce8\u95ee\u9898 \u5e8f\u5217\u6807\u6ce8**\u6307\u7684\u662f\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 x=x_1x_2\\cdots x_n x=x_1x_2\\cdots x_n \uff0c\u627e\u51fa\u5e8f\u5217\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u6807\u7b7e y=y_1y_2\\cdots y_n y=y_1y_2\\cdots y_n \u7684\u95ee\u9898\u3002\u5176\u4e2d\uff0c y y \u6240\u6709\u53ef\u80fd\u7684\u53d6\u503c\u96c6\u5408\u79f0\u4e3a**\u6807\u6ce8\u96c6 \u3002\u6bd4\u5982\uff0c\u524d\u4e00\u5c0f\u8282\u4e2d\u201c\u66f4 \u9ad8 \u5730 \u4e3e\u8d77 \u9093\u5c0f\u5e73\u7406\u8bba \u7684 \u4f1f\u5927 \u65d7\u5e1c\u201d\uff0c\u5bf9\u5e94\u7684\u72b6\u6001\u5e8f\u5217\u662f\u201cSSSBEBMMMESBEBE\u201d\uff0c\u5176\u4e2d\u6807\u6ce8\u96c6\u662f{B, M, S, E}\u3002\u6c42\u89e3\u5e8f\u5217\u6807\u6ce8\u95ee\u9898\u7684\u6a21\u578b\u4e00\u822c\u79f0\u4e3a**\u5e8f\u5217\u6807\u6ce8\u5668**\uff0c\u901a\u5e38\u7531\u6a21\u578b\u4ece\u4e00\u4e2a\u6807\u6ce8\u6570\u636e\u96c6\u4e2d\u5b66\u4e60\u76f8\u5173\u77e5\u8bc6\u540e\u518d\u8fdb\u884c\u9884\u6d4b\u3002\u5728NLP\u95ee\u9898\u4e2d\uff0c x x \u901a\u5e38\u662f\u5b57\u7b26\u6216\u8bcd\u8bed\uff0c\u800c y y \u5219\u662f\u5f85\u9884\u6d4b\u7684\u7ec4\u8bcd\u89d2\u8272\u6216\u8bcd\u6027\u7b49\u6807\u7b7e\u3002\u4e2d\u6587\u5206\u8bcd\u3001\u8bcd\u6027\u6807\u6ce8\u3001\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u90fd\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5e8f\u5217\u6807\u6ce8\u95ee\u9898\u3002 \u5e8f\u5217\u6807\u6ce8\u4e0e\u4e2d\u6587\u5206\u8bcd \u8003\u8651\u4e00\u4e2a\u5b57\u7b26\u5e8f\u5217 x x \uff0c\u60f3\u8c61\u5207\u8bcd\u5668\u771f\u7684\u662f\u62ff\u5200\u5207\u5272\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5728\u5206\u8bcd\u662f\u65e0\u975e\u7531\u4e24\u79cd\u89d2\u8272\uff0c\u8981\u4e48\u5728\u5219\u4e2a\u5b57\u7b26\u540e\u9762\u5207\u5f00\uff0c\u8981\u4e48\u8df3\u8fc7\u4e0d\u5207\u3002\u8fd9\u6837\uff0c\u4e2d\u6587\u5206\u8bcd\u5c31\u8f6c\u5316\u4e3a\u6807\u6ce8\u96c6\u4e3a{\u5207\uff0c\u8fc7}\u5e8f\u5217\u6807\u6ce8\u95ee\u9898\u3002\u53ea\u8981\u6807\u6ce8\u96c6\u6b63\u786e\u6807\u6ce8\u6bcf\u4e2a\u5b57\u7b26\u5207\u4e0e\u4e0d\u5207\uff0c\u5206\u8bcd\u5668\u5c31\u80fd\u591f\u6309\u7167\u6307\u793a\u5207\u5272\u51fa\u6b63\u786e\u7684\u7ed3\u679c\u3002\u53ef\u4ee5\u5c06\u5e8f\u5217\u6807\u6ce8\u770b\u4f5c\u4e2d\u6587\u5206\u8bcd\u7684\u4e2d\u95f4\u7ed3\u679c\uff0c\u5f80\u540e\u5219\u662f\u5b58\u7cb9\u7684\u5b57\u7b26\u4e32\u5206\u5272\u3002 \u5f53\u7136\u5206\u8bcd\u6807\u6ce8\u96c6\u5e76\u975e\u53ea\u6709\u4e00\u79cd\uff0c\u524d\u9762\u4ecb\u7ecd\u7684{B, M, S, E}\u5219\u662f\u66f4\u5e38\u7528\u7684\u4e00\u79cd\u5206\u8bcd\u6807\u6ce8\u96c6\u3002 \u5e8f\u5217\u6807\u6ce8\u4e0e\u8bcd\u6027\u6807\u6ce8 \u8bcd\u6027\u6807\u6ce8\u4efb\u52a1\u662f\u4e00\u4e2a\u5929\u7136\u7684\u5e8f\u5217\u6807\u6ce8\u95ee\u9898\uff1a x x \u662f\u5355\u8bcd\u5e8f\u5217\uff0c y y \u662f\u76f8\u5e94\u7684\u8bcd\u6027\u5e8f\u5217\u3002\u4f8b\u5982\uff1a\u53c2\u89c2/\u52a8\u8bcd \u4e86/\u52a9\u8bcd \u5317\u4eac/\u5730\u540d \u5929\u5b89\u95e8/\u5730\u540d\u3002\u8bcd\u6027\u6807\u6ce8\u96c6\u540c\u6837\u4e0d\u662f\u552f\u4e00\u7684\uff0c\u4eba\u4eec\u6839\u636e\u9700\u8981\u5236\u5b9a\u4e86\u4e0d\u540c\u7684\u6807\u6ce8\u96c6\u3002\u5176\u4e2d\u6700\u8457\u540d\u7684\u5f53\u6570863\u6807\u6ce8\u96c6\u548c\u5317\u5927\u6807\u6ce8\u96c6\uff0c\u524d\u8005\u8bcd\u6027\u6570\u91cf\u8981\u5c11\u4e00\u4e9b\uff0c\u9897\u7c92\u5ea6\u8981\u5927\u4e00\u4e9b\u3002\u8bcd\u6027\u6807\u6ce8\u9700\u8981\u7efc\u5408\u8003\u8651\u524d\u540e\u7684\u5355\u8bcd\u4e0e\u8bcd\u6027\u624d\u80fd\u51b3\u5b9a\u5f53\u524d\u5355\u8bcd\u7684\u8bcd\u6027\u3002\u6bd4\u5982\u526f\u8bcd\u5bb9\u6613\u63a5\u7eed\u52a8\u8bcd\uff0c\u201c\u7684\u201d\u5b57\u4e4b\u540e\u5bb9\u6613\u51fa\u73b0\u540d\u8bcd\u3002\u8fd9\u91cc\u7684\u201c\u5bb9\u6613\u201d\u5176\u5b9e\u610f\u5473\u7740\u8f83\u5927\u7684\u6982\u7387\uff0c\u9700\u8981\u4f7f\u7528\u6982\u7387\u6a21\u578b\u53bb\u6a21\u62df\u3002 \u5e8f\u5217\u6807\u6ce8\u4e0e\u547d\u540d\u5b9e\u4f53\u8bc6\u522b \u6240\u8c13\u547d\u540d\u5b9e\u4f53\uff0c\u6307\u7684\u662f\u73b0\u5b9e\u5b58\u5728\u7684\u5b9e\u4f53\uff0c\u6bd4\u5982\u4eba\u540d\u3001\u5730\u540d\u548c\u673a\u6784\u540d\u3002\u547d\u540d\u5b9e\u4f53\u662fOOV\u7684\u4e3b\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u5f80\u5f80\u4e5f\u662f\u53e5\u5b50\u4e2d\u6700\u4ee4\u4eba\u5173\u6ce8\u7684\u6210\u5206\u3002\u547d\u540d\u5b9e\u4f53\u7684\u6570\u91cf\u662f\u65e0\u7a77\u7684\uff0c\u56e0\u4e3a\u4e16\u754c\u4e0a\u6bcf\u79cd\u4e8b\u7269\u90fd\u9700\u8981\u4e00\u4e2a\u540d\u5b57\u4ee3\u8868\u81ea\u8eab\u3002\u6bd4\u5982\u6bcf\u9897\u661f\u661f\u3001\u6bcf\u79cd\u86cb\u767d\u8d28\u90fd\u6709\u81ea\u5df1\u7684\u540d\u79f0\uff0c\u5b87\u5b99\u4e2d\u7684\u661f\u661f\u548c\u86cb\u767d\u8d28\u663e\u7136\u4e0d\u53ef\u6570\u3002 \u7b80\u77ed\u7684\u4eba\u540d\u548c\u5730\u540d\u53ef\u4ee5\u901a\u8fc7\u4e2d\u6587\u5206\u8bcd\u5207\u5206\uff0c\u7136\u540e\u901a\u8fc7\u8bcd\u6027\u6807\u6ce8\u6765\u786e\u5b9a\u6240\u5c5e\u7c7b\u522b\u3002\u4f46\u5730\u540d\u548c\u673a\u6784\u540d\u5e38\u5e38\u7531\u591a\u4e2a\u5355\u8bcd\u7ec4\u6210\uff08\u79f0\u4e3a\u590d\u5408\u8bcd\uff09\uff0c\u8f83\u96be\u8bc6\u5225\u3002\u4f8b\u5982\uff0c\u201c\u8054\u5408\u56fd\u53d9\u5229\u4e9a\u95ee\u9898\u72ec\u7acb\u56fd\u9645\u8c03\u67e5\u59d4\u5458\u4f1a\u201d\u3002\u7531\u4e8e\u590d\u5408\u8bcd\u7684\u4e30\u5ea6\u8f83\u5c0f\uff0c\u5bfc\u81f4\u5206\u8bcd\u5668\u548c\u8bcd\u6027\u6807\u6ce8\u5668\u5f88\u96be\u4e00\u6b65\u5230\u4f4d\u5730\u5c06\u5176\u8bc6\u522b\u51fa\u6765\uff0c\u8fd9\u65f6\u5e38\u5e38\u5728\u5206\u8bcd\u548c\u8bcd\u6027\u6807\u6ce8\u7684\u4e2d\u95f4\u7ed3\u679c\u4e4b\u4e0a\u8fdb\u884c\u53ec\u56de\u3002 \u8003\u8651\u5230\u5b57\u7b26\u7ea7\u522b\u4e2d\u6587\u5206\u8bcd\u548c\u8bcd\u8bed\u7ea7\u522b\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u6709\u7740\u7c7b\u4f3c\u7684\u7279\u70b9\uff0c\u90fd\u662f\u7ec4\u5408\u77ed\u5355\u4f4d\u5f62\u6210\u957f\u5355\u4f4d\u7684\u95ee\u9898\u3002\u6240\u4ee5\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u53ef\u4ee5\u590d\u7528 BMES \u6807\u6ce8\u96c6\uff0c\u5e76\u6cbf\u7528\u4e2d\u6587\u5206\u8bcd\u7684\u903b\u8f91\uff0c\u53ea\u4e0d\u8fc7\u6807\u6ce8\u7684\u5bf9\u8c61\u7531\u5b57\u7b26\u53d8\u4e3a\u5355\u8bcd\u800c\u5df2\u3002\u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u8fd8\u9700\u8981\u786e\u5b9a\u5b9e\u4f53\u6240\u5c5e\u7684\u7c7b\u522b\u3002\u8fd9\u4e2a\u989d\u5916\u7684\u8981\u6c42\u4f9d\u7136\u662f\u4e2a\u6807\u6ce8\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u547d\u540d\u5b9e\u4f53\u7c7b\u522b\u9644\u7740\u5230 BMES \u6807\u7b7e\u6765\u8fbe\u5230\u76ee\u7684\u3002\u6bd4\u5982\uff0c\u6784\u6210\u5730\u540d\u7684\u5355\u8bcd\u6807\u6ce8\u4e3a\u201cB/M/E/S\u4e00\u5730\u540d\u201d\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u6784\u6210\u547d\u540d\u5b9e\u4f53\u7684\u5355\u8bcd\uff0c\u5219\u7edf\u4e00\u6807\u6ce8\u4e3aO\uff08Outside \uff09\uff0c\u5373\u590d\u5408\u8bcd\u4e4b\u5916\u3002\u4f8b\u5982\uff1a\u53c2\u89c2/O \u4e86/O \u5317\u4eac/B-\u5730\u540d \u5929\u5b89\u95e8/E-\u5730\u540d\u3002\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u6a21\u5757\u6839\u636e\u6807\u6ce8\u7ed3\u679c\uff0c\u5c06\u201c\u5317\u4eac\u201d\u548c\u201c\u5929\u5b89\u95e8\u201d\u4f5c\u4e3a\u9996\u5c3e\u7ec4\u5408\u6210\u8bcd\uff0c\u5e76\u4e14\u6807\u6ce8\u4e3a\u5730\u540d\u3002 \u603b\u4e4b\uff0c\u5e8f\u5217\u6807\u6ce8\u95ee\u9898\u662f NLP \u4e2d\u6700\u5e38\u89c1\u7684\u95ee\u9898\u4e4b\u4e00\u3002\u8bb8\u591a\u5e94\u7528\u4efb\u52a1\u90fd\u53ef\u4ee5\u53d8\u6362\u601d\u8def\uff0c\u8f6c\u5316\u4e3a\u5e8f\u5217\u6807\u6ce8\u6765\u89e3\u51b3\u3002\u6240\u4ee5\u4e00\u4e2a\u51c6\u786e\u7684\u5e8f\u5217\u6807\u6ce8\u6a21\u578b\u975e\u5e38\u91cd\u8981\uff0c\u76f4\u63a5\u5173\u7cfb\u5230 NLP \u7cfb\u7edf\u7684\u51c6\u786e\u7387\u3002","title":"6.1 \u5e8f\u5217\u6807\u6ce8"},{"location":"6.html#62","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u4ec0\u4e48\u662f\u547d\u540d\u5b9e\u4f53\u8bc6\u522b \u4e86\u89e3\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u4f5c\u7528 \u4e86\u89e3\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u5e38\u7528\u65b9\u6cd5 \u4e86\u89e3\u533b\u5b66\u6587\u672c\u7279\u5f81 \u4ec0\u4e48\u662f\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff1a \u547d\u540d\u5b9e\u4f53\u8bc6\u522b(Named Entity Recognition\uff0cNER)\u5c31\u662f\u4ece\u4e00\u6bb5\u81ea\u7136\u8bed\u8a00\u6587\u672c\u4e2d\u627e\u51fa\u76f8\u5173\u5b9e\u4f53\uff0c\u5e76\u6807\u6ce8\u51fa\u5176\u4f4d\u7f6e\u4ee5\u53ca\u7c7b\u578b\u3002\u662f\u4fe1\u606f\u63d0\u53d6\uff0c\u95ee\u7b54\u7cfb\u7edf\uff0c\u53e5\u6cd5\u5206\u6790\uff0c\u673a\u5668\u7ffb\u8bd1\u7b49\u5e94\u7528\u9886\u57df\u7684\u91cd\u8981\u57fa\u7840\u5de5\u5177\uff0c\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\u6280\u672f\u8d70\u5411\u5b9e\u7528\u5316\u7684\u8fc7\u7a0b\u4e2d\u5360\u6709\u91cd\u8981\u5730\u4f4d\u3002\u5305\u542b\u884c\u4e1a\uff0c\u9886\u57df\u4e13\u6709\u540d\u8bcd\uff0c\u5982\u4eba\u540d\uff0c\u5730\u540d\uff0c\u516c\u53f8\u540d\uff0c\u673a\u6784\u540d\uff0c\u65e5\u671f\uff0c\u65f6\u95f4\uff0c\u75be\u75c5\u540d\uff0c\u75c7\u72b6\u540d\uff0c\u624b\u672f\u540d\u79f0\uff0c\u8f6f\u4ef6\u540d\u79f0\u7b49\u3002\u5177\u4f53\u53ef\u53c2\u770b\u5982\u4e0b\u793a\u4f8b\u56fe\uff1a \u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u4f5c\u7528\uff1a \u8bc6\u522b\u4e13\u6709\u540d\u8bcd\uff0c\u4e3a\u6587\u672c\u7ed3\u6784\u5316\u63d0\u4f9b\u652f\u6301\u3002 \u4e3b\u4f53\u8bc6\u522b\uff0c\u8f85\u52a9\u53e5\u6cd5\u5206\u6790\u3002 \u5b9e\u4f53\u5173\u7cfb\u62bd\u53d6\uff0c\u6709\u5229\u4e8e\u77e5\u8bc6\u63a8\u7406\u3002 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u5e38\u7528\u65b9\u6cd5\uff1a \u57fa\u4e8e\u89c4\u5219\uff1a\u9488\u5bf9\u6709\u7279\u6b8a\u4e0a\u4e0b\u6587\u7684\u5b9e\u4f53\uff0c\u6216\u5b9e\u4f53\u672c\u8eab\u6709\u5f88\u591a\u7279\u5f81\u7684\u6587\u672c\uff0c\u4f7f\u7528\u89c4\u5219\u7684\u65b9\u6cd5\u7b80\u5355\u4e14\u6709\u6548\u3002\u6bd4\u5982\u62bd\u53d6\u6587\u672c\u4e2d\u7269\u54c1\u4ef7\u683c\uff0c\u5982\u679c\u6587\u672c\u4e2d\u6240\u6709\u5546\u54c1\u4ef7\u683c\u90fd\u662f\u201c\u6570\u5b57+\u5143\u201d\u7684\u5f62\u5f0f\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u6b63\u5219\u8868\u8fbe\u5f0f\u201d\\d*.?\\d+\u5143\u201d\u8fdb\u884c\u62bd\u53d6\u3002\u4f46\u5982\u679c\u5f85\u62bd\u53d6\u6587\u672c\u4e2d\u4ef7\u683c\u7684\u8868\u8fbe\u65b9\u5f0f\u591a\u79cd\u591a\u6837\uff0c\u4f8b\u5982\u201c\u4e00\u5343\u516b\u767e\u4e07\u201d\uff0c\u201c\u4f0d\u4f70\u8d30\u62fe\u5706\u201d\uff0c\u201c2000\u4e07\u5143\u201d\uff0c\u9047\u5230\u8fd9\u4e9b\u60c5\u51b5\u5c31\u8981\u4fee\u6539\u89c4\u5219\u6765\u6ee1\u8db3\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u3002\u968f\u7740\u8bed\u6599\u6570\u91cf\u7684\u589e\u52a0\uff0c\u9762\u5bf9\u7684\u60c5\u51b5\u4e5f\u8d8a\u6765\u8d8a\u590d\u6742\uff0c\u89c4\u5219\u4e4b\u95f4\u4e5f\u53ef\u80fd\u53d1\u751f\u51b2\u7a81\uff0c\u6574\u4e2a\u7cfb\u7edf\u4e5f\u53ef\u80fd\u53d8\u5f97\u4e0d\u53ef\u7ef4\u62a4\u3002\u56e0\u6b64\u57fa\u4e8e\u89c4\u5219\u7684\u65b9\u5f0f\u6bd4\u8f83\u9002\u5408\u534a\u7ed3\u6784\u5316\u6216\u6bd4\u8f83\u89c4\u8303\u7684\u6587\u672c\u4e2d\u7684\u8fdb\u884c\u62bd\u53d6\u4efb\u52a1\uff0c\u7ed3\u5408\u4e1a\u52a1\u9700\u6c42\u80fd\u591f\u8fbe\u5230\u4e00\u5b9a\u7684\u6548\u679c\u3002 \u4f18\u70b9\uff1a\u7b80\u5355\uff0c\u5feb\u901f\u3002 \u7f3a\u70b9\uff1a\u9002\u7528\u6027\u5dee\uff0c\u7ef4\u62a4\u6210\u672c\u9ad8\u540e\u671f\u751a\u81f3\u4e0d\u80fd\u7ef4\u62a4\u3002 \u57fa\u4e8e\u6a21\u578b\uff1a\u4ece\u6a21\u578b\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u95ee\u9898\u5b9e\u9645\u4e0a\u662f\u5e8f\u5217\u6807\u6ce8\u95ee\u9898\u3002\u5e8f\u5217\u6807\u6ce8\u95ee\u9898\u6307\u7684\u662f\u6a21\u578b\u7684\u8f93\u5165\u662f\u4e00\u4e2a\u5e8f\u5217\uff0c\u5305\u62ec\u6587\u5b57\uff0c\u65f6\u95f4\u7b49\uff0c\u8f93\u51fa\u4e5f\u662f\u4e00\u4e2a\u5e8f\u5217\u3002\u9488\u5bf9\u8f93\u5165\u5e8f\u5217\u7684\u6bcf\u4e00\u4e2a\u5355\u5143\uff0c\u8f93\u51fa\u4e00\u4e2a\u7279\u5b9a\u7684\u6807\u7b7e\u3002\u4ee5\u4e2d\u6587\u5206\u8bcd\u4efb\u52a1\u8fdb\u884c\u4e3e\u4f8b\uff0c\u4f8b\u5982\u8f93\u5165\u5e8f\u5217\u662f\u4e00\u4e32\u6587\u5b57\uff1a\"\u6211\u662f\u4e2d\u56fd\u4eba\", \u8f93\u51fa\u5e8f\u5217\u662f\u4e00\u4e32\u6807\u7b7e\uff1a\"OOBII\", \u5176\u4e2d\"BIO\"\u7ec4\u6210\u4e86\u4e00\u79cd\u4e2d\u6587\u5206\u8bcd\u7684\u6807\u7b7e\u4f53\u7cfb\uff1aB\u8868\u793a\u8fd9\u4e2a\u5b57\u662f\u8bcd\u7684\u5f00\u59cb\uff0cI\u8868\u793a\u8bcd\u7684\u4e2d\u95f4\u5230\u7ed3\u5c3e\uff0cO\u8868\u793a\u5176\u4ed6\u7c7b\u578b\u8bcd\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8f93\u51fa\u5e8f\u5217\"OOBII\"\u8fdb\u884c\u89e3\u7801\uff0c\u5f97\u5230\u5206\u8bcd\u7ed3\u679c\"\u6211\\\u662f\\\u4e2d\u56fd\u4eba\"\u3002 \u5e8f\u5217\u6807\u6ce8\u95ee\u9898\u6db5\u76d6\u4e86\u81ea\u7136\u8bed\u8a00\u5904\u7406\u4e2d\u7684\u5f88\u591a\u4efb\u52a1\uff0c\u5305\u62ec\u8bed\u97f3\u8bc6\u522b\uff0c\u4e2d\u6587\u5206\u8bcd\uff0c\u673a\u5668\u7ffb\u8bd1\uff0c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7b49\uff0c\u800c\u5e38\u89c1\u7684\u5e8f\u5217\u6807\u6ce8\u6a21\u578b\u5305\u62ecHMM, CRF, RNN, LSTM, GRU\u7b49\u6a21\u578b\u3002 \u5176\u4e2d\u5728\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u6280\u672f\u4e0a\uff0c\u76ee\u524d\u4e3b\u6d41\u7684\u6280\u672f\u662f\u901a\u8fc7BiLSTM+CRF\u6a21\u578b\u8fdb\u884c\u5e8f\u5217\u6807\u6ce8\uff0c\u4e5f\u662f\u9879\u76ee\u4e2d\u8981\u7528\u5230\u7684\u6a21\u578b\u3002 \u533b\u5b66\u6587\u672c\u7279\u5f81\uff1a \u7b80\u77ed\u7cbe\u70bc \u5f62\u5bb9\u8bcd\u76f8\u5bf9\u8f83\u5c11 \u6cdb\u5316\u6027\u76f8\u5bf9\u8f83\u5c0f \u533b\u5b66\u540d\u8bcd\u9519\u5b57\u7387\u6bd4\u8f83\u9ad8 \u540c\u4e49\u8bcd\u3001\u7b80\u79f0\u6bd4\u8f83\u591a \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u547d\u540d\u5b9e\u4f53\u8bc6\u522b \u5b66\u4e60\u4e86\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u4f5c\u7528 \u5b66\u4e60\u4e86\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u5e38\u7528\u65b9\u6cd5 \u5b66\u4e60\u4e86\u533b\u5b66\u6587\u672c\u7279\u5f81","title":"6.2 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u4ecb\u7ecd"},{"location":"6.html#63-crf","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3CRF\u7684\u6982\u5ff5\u548c\u4f5c\u7528 \u4e86\u89e3\u8f6c\u79fb\u6982\u7387\u77e9\u9635 \u4e86\u89e3\u53d1\u5c04\u6982\u7387\u77e9\u9635 CRF\u7684\u6982\u5ff5\u548c\u4f5c\u7528\uff1a CRF(\u5168\u79f0Conditional Random Fields), \u6761\u4ef6\u968f\u673a\u573a\u3002\u662f\u7ed9\u5b9a\u8f93\u5165\u5e8f\u5217\u7684\u6761\u4ef6\u4e0b\uff0c\u6c42\u89e3\u8f93\u51fa\u5e8f\u5217\u7684\u6761\u4ef6\u6982\u7387\u5206\u5e03\u6a21\u578b\u3002 \u4e0b\u9762\u4e3e\u4e24\u4e2a\u5e94\u7528\u573a\u666f\u7684\u4f8b\u5b50\uff1a \u573a\u666f\u4e00\uff1a\u5047\u8bbe\u6709\u4e00\u5806\u65e5\u5e38\u751f\u6d3b\u7684\u7ed9\u5c0f\u670b\u53cb\u6392\u62cd\u7684\u89c6\u9891\u7247\u6bb5\uff0c\u53ef\u80fd\u7684\u72b6\u6001\u6709\u7761\u89c9\u3001\u5403\u996d\u3001\u559d\u6c34\u3001\u6d17\u6fa1\u3001\u5237\u7259\u3001\u73a9\u800d\u7b49\uff0c\u5927\u90e8\u5206\u60c5\u51b5\uff0c\u6211\u4eec\u662f\u80fd\u591f\u8bc6\u522b\u51fa\u89c6\u9891\u7247\u6bb5\u7684\u72b6\u6001\u3002\u4f46\u5982\u679c\u4f60\u53ea\u662f\u770b\u5230\u4e00\u5c0f\u6bb5\u62ff\u676f\u5b50\u7684\u89c6\u9891\uff0c\u5728\u6ca1\u6709\u524d\u540e\u76f8\u8fde\u7684\u89c6\u9891\u4f5c\u4e3a\u524d\u540e\u6587\u53c2\u7167\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5f88\u96be\u77e5\u9053\u62ff\u676f\u5b50\u662f\u8981\u5237\u7259\u8fd8\u662f\u559d\u6c34\u3002\u8fd9\u65f6\uff0c\u53ef\u4ee5\u7528\u5230CRF\u6a21\u578b\u3002 \u573a\u666f\u4e8c\uff1a\u5047\u8bbe\u6709\u5206\u597d\u8bcd\u7684\u53e5\u5b50\uff0c\u6211\u4eec\u8981\u5224\u65ad\u6bcf\u4e2a\u8bcd\u7684\u8bcd\u6027\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e9b\u8bcd\u6765\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u77e5\u9053\u76f8\u90bb\u8bcd\u7684\u8bcd\u6027\u7684\u60c5\u51b5\u4e0b\uff0c\u662f\u5f88\u96be\u51c6\u786e\u5224\u65ad\u6bcf\u4e2a\u8bcd\u7684\u8bcd\u6027\u7684\u3002\u8fd9\u65f6\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u5230CRF. \u57fa\u672c\u5b9a\u4e49\uff1a\u6211\u4eec\u5c06\u968f\u673a\u53d8\u91cf\u7684\u96c6\u5408\u79f0\u4e3a\u968f\u673a\u8fc7\u7a0b\u3002\u7531\u4e00\u4e2a\u7a7a\u95f4\u53d8\u91cf\u7d22\u5f15\u7684\u968f\u673a\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u5176\u79f0\u4e3a\u968f\u673a\u573a\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u505a\u8bcd\u6027\u6807\u6ce8\u65f6\uff0c\u53ef\u4ee5\u5c06{\u540d\u8bcd\u3001\u52a8\u8bcd\u3001\u5f62\u5bb9\u8bcd\u3001\u526f\u8bcd}\u8fd9\u4e9b\u8bcd\u6027\u5b9a\u4e49\u4e3a\u968f\u673a\u53d8\u91cf\uff0c\u7136\u540e\u4ece\u4e2d\u9009\u62e9\u76f8\u5e94\u7684\u8bcd\u6027\uff0c\u800c\u8fd9\u7ec4\u968f\u673a\u53d8\u91cf\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u9075\u5faa\u67d0\u79cd\u6982\u7387\u5206\u5e03\uff0c\u5c06\u8fd9\u4e9b\u8bcd\u6027\u6309\u7167\u5bf9\u5e94\u7684\u6982\u7387\u8d4b\u503c\u7ed9\u76f8\u5e94\u7684\u8bcd\uff0c\u5c31\u5b8c\u6210\u4e86\u53e5\u5b50\u7684\u8bcd\u6027\u6807\u6ce8\u3002 \u5173\u4e8e\u6761\u4ef6\u968f\u673a\u573a\u4e0e\u9a6c\u5c14\u79d1\u592b\u5047\u8bbe\uff1a \u524d\u9762\u8bfe\u7a0b\u6211\u4eec\u4ecb\u7ecd\u8fc7\u9a6c\u5c14\u79d1\u592b\u5047\u8bbe\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u4f4d\u7f6e\u7684\u53d6\u503c\u53ea\u548c\u4e0e\u5b83\u76f8\u90bb\u7684\u4f4d\u7f6e\u7684\u503c\u6709\u5173\uff0c\u548c\u5b83\u4e0d\u76f8\u90bb\u7684\u4f4d\u7f6e\u7684\u503c\u65e0\u5173\u3002 \u5e94\u7528\u5230\u6211\u4eec\u4e0a\u9762\u7684\u8bcd\u6027\u6807\u6ce8\u4f8b\u5b50\u4e2d\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5f53\u524d\u8bcd\u7684\u8bcd\u6027\u662f\u6839\u636e\u524d\u4e00\u4e2a\u8bcd\u548c\u540e\u4e00\u4e2a\u8bcd\u7684\u8bcd\u6027\u6765\u51b3\u5b9a\u7684\uff0c\u7b49\u6548\u4e8e\u4ece\u8bcd\u6027\u524d\u540e\u6587\u7684\u6982\u7387\u6765\u7ed9\u51fa\u5f53\u524d\u8bcd\u7684\u8bcd\u6027\u5224\u65ad\u7ed3\u679c\u3002 \u73b0\u5b9e\u4e2d\u53ef\u4ee5\u505a\u5982\u4e0b\u5047\u8bbe\uff1a\u5047\u8bbe\u4e00\u4e2a\u52a8\u8bcd\u6216\u8005\u526f\u8bcd\u540e\u9762\u4e0d\u4f1a\u8fde\u63a5\u540c\u6837\u7684\u52a8\u8bcd\u6216\u8005\u526f\u8bcd\uff0c\u8fd9\u6837\u7684\u6982\u7387\u5f88\u9ad8\u3002\u90a3\u4e48\uff0c\u53ef\u4ee5\u5047\u5b9a\u8fd9\u79cd\u7ed9\u5b9a\u9690\u85cf\u72b6\u6001(\u4e5f\u5c31\u662f\u8bcd\u6027\u5e8f\u5217)\u7684\u60c5\u51b5\u4e0b\uff0c\u6765\u8ba1\u7b97\u89c2\u6d4b\u72b6\u6001\u7684\u8ba1\u7b97\u8fc7\u7a0b\u3002\u672c\u8d28\u4e0aCRF\u6a21\u578b\u8003\u8651\u5230\u4e86\u89c2\u6d4b\u72b6\u6001\u8fd9\u4e2a\u5148\u9a8c\u6761\u4ef6\uff0c\u8fd9\u4e5f\u662f\u6761\u4ef6\u968f\u673a\u573a\u4e2d\u7684\u6761\u4ef6\u4e00\u8bcd\u7684\u542b\u4e49\u3002 \u8f6c\u79fb\u6982\u7387\u77e9\u9635\uff1a \u9996\u5148\u5047\u8bbe\u6211\u4eec\u9700\u8981\u6807\u6ce8\u7684\u5b9e\u4f53\u7c7b\u578b\u6709\u4e00\u4e0b\u51e0\u7c7b\uff1a {\"O\": 0, \"B-dis\": 1, \"I-dis\": 2, \"B-sym\": 3, \"I-sym\": 4} # \u5176\u4e2ddis\u8868\u793a\u75be\u75c5(disease), sym\u8868\u793a\u75c7\u72b6(symptom), B\u8868\u793a\u547d\u540d\u5b9e\u4f53\u5f00\u5934\uff0cI\u8868\u793a\u547d\u540d\u5b9e\u4f53\u4e2d\u95f4\u5230\u7ed3\u5c3e\uff0cO\u8868\u793a\u5176\u4ed6\u7c7b\u578b\u3002 \u56e0\u6b64\u6211\u4eec\u5f88\u5bb9\u6613\u77e5\u9053\u6bcf\u4e2a\u5b57\u7684\u53ef\u80fd\u6807\u6ce8\u7c7b\u578b\u6709\u4ee5\u4e0a\u4e94\u79cd\u53ef\u80fd\u6027\uff0c\u90a3\u4e48\u5728\u4e00\u4e2a\u53e5\u5b50\u4e2d\uff0c\u7531\u4e0a\u4e00\u4e2a\u5b57\u5230\u4e0b\u4e00\u4e2a\u5b57\u7684\u6982\u7387\u4e58\u79ef\u5c31\u67095 \u00d7 5\u79cd\u53ef\u80fd\u6027\uff0c\u5177\u4f53\u89c1\u4e0b\u56fe\u6240\u793a\uff1a \u6700\u7ec8\u8bad\u7ec3\u51fa\u6765\u7ed3\u679c\u5927\u81f4\u4f1a\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5176\u4e2d\u4e0b\u6807\u7d22\u5f15\u4e3a(i, j)\u7684\u65b9\u683c\u4ee3\u8868\u5982\u679c\u5f53\u524d\u5b57\u7b26\u662f\u7b2ci\u884c\u8868\u793a\u7684\u6807\u7b7e\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2a\u5b57\u7b26\u8868\u793a\u7b2cj\u5217\u8868\u793a\u7684\u6807\u7b7e\u6240\u5bf9\u5e94\u7684\u6982\u7387\u503c\u3002\u4ee5\u7b2c\u4e8c\u884c\u4e3a\u4f8b\uff0c\u5047\u8bbe\u5f53\u524d\u7b2ci\u4e2a\u5b57\u7684\u6807\u7b7e\u4e3aB-dis, \u90a3\u4e48\u7b2ci+1\u4e2a\u5b57\u6700\u5927\u53ef\u80fd\u51fa\u73b0\u7684\u6982\u7387\u5e94\u8be5\u662fI-dis. \u53d1\u5c04\u6982\u7387\u77e9\u9635\uff1a \u53d1\u5c04\u6982\u7387\uff0c\u662f\u6307\u5df2\u77e5\u5f53\u524d\u6807\u7b7e\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u5e94\u6240\u51fa\u73b0\u5b57\u7b26\u7684\u6982\u7387\u3002\u901a\u4fd7\u7406\u89e3\u5c31\u662f\u5f53\u524d\u6807\u7b7e\u6bd4\u8f83\u53ef\u80fd\u51fa\u73b0\u7684\u6587\u5b57\u6709\u54ea\u4e9b\uff0c\u53ca\u5176\u5bf9\u5e94\u51fa\u73b0\u7684\u6982\u7387\u3002 \u4e0b\u9762\u662f\u51e0\u6bb5\u533b\u7597\u6587\u672c\u6570\u636e\u7684\u6807\u6ce8\u7ed3\u679c\uff1a \u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0a\u53e5\u5b50\u7684\u8f6c\u79fb\u77e9\u9635\u6982\u7387\u5982\u4e0b\uff1a \u5bf9\u5e94\u7684\u53d1\u5c04\u77e9\u9635\u53ef\u4ee5\u7406\u89e3\u4e3a\u5982\u4e0b\u56fe\u6240\u793a\u7ed3\u679c\uff1a \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86CRF\u7684\u6982\u5ff5\u548c\u4f5c\u7528 \u6982\u5ff5\uff1a\u6761\u4ef6\u968f\u673a\u573a\uff0c\u4e00\u79cd\u6761\u4ef6\u6982\u7387\u5206\u5e03\u6a21\u578b \u4f5c\u7528\uff1a\u589e\u52a0\u4e86\u5148\u9a8c\u6761\u4ef6\uff0c\u53ef\u4ee5\u66f4\u597d\u7684\u5b8c\u6210\u5b9e\u4f53\u5e8f\u5217\u7684\u8bc6\u522b \u5b66\u4e60\u4e86\u8f6c\u79fb\u6982\u7387\u77e9\u9635 \u5b66\u4e60\u4e86\u53d1\u5c04\u6982\u7387\u77e9\u9635","title":"6.3 CRF\u4ecb\u7ecd"},{"location":"6.html#64-bilstm","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3BiLSTM\u7f51\u7edc\u7ed3\u6784\u3002 \u638c\u63e1BiLSTM\u6a21\u578b\u5b9e\u73b0\u3002 BiLSTM\u7f51\u7edc\u7ed3\u6784\uff1a \u6240\u8c13\u7684BiLSTM\uff0c\u5c31\u662f(Bidirectional LSTM)\u53cc\u5411LSTM. \u5355\u5411\u7684LSTM\u6a21\u578b\u53ea\u80fd\u6355\u6349\u5230\u4ece\u524d\u5411\u540e\u4f20\u9012\u7684\u4fe1\u606f\uff0c\u800c\u53cc\u5411\u7684\u7f51\u7edc\u53ef\u4ee5\u540c\u65f6\u6355\u6349\u6b63\u5411\u4fe1\u606f\u548c\u53cd\u5411\u4fe1\u606f\uff0c\u4f7f\u5f97\u5bf9\u6587\u672c\u4fe1\u606f\u7684\u5229\u7528\u66f4\u5168\u9762\uff0c\u6548\u679c\u4e5f\u66f4\u597d\u3002 \u5728BiLSTM\u7f51\u7edc\u6700\u7ec8\u7684\u8f93\u51fa\u5c42\u540e\u9762\u589e\u52a0\u4e86\u4e00\u4e2a\u7ebf\u6027\u5c42\uff0c\u7528\u6765\u5c06BiLSTM\u4ea7\u751f\u7684\u9690\u85cf\u5c42\u8f93\u51fa\u7ed3\u679c\u6295\u5c04\u5230\u5177\u6709\u67d0\u79cd\u8868\u8fbe\u6807\u7b7e\u7279\u5f81\u610f\u4e49\u7684\u533a\u95f4\uff0c\u5177\u4f53\u5982\u4e0b\u56fe\u6240\u793a\uff1a BiLSTM\u6a21\u578b\u5b9e\u73b0\uff1a \u7b2c\u4e00\u6b65\uff1a\u5b9e\u73b0\u7c7b\u7684\u521d\u59cb\u5316\u548c\u7f51\u7edc\u7ed3\u6784\u7684\u642d\u5efa\u3002 \u7b2c\u4e8c\u6b65\uff1a\u5b9e\u73b0\u7f51\u7edc\u7684\u524d\u5411\u8ba1\u7b97\u3002 \u7b2c\u4e09\u6b65\uff1a\u5b9e\u73b0\u7f51\u7edc\u7684\u9884\u6d4b\u51fd\u6570\u3002 \u7b2c\u4e00\u6b65\uff1a\u5b9e\u73b0\u7c7b\u7684\u521d\u59cb\u5316\u548c\u7f51\u7edc\u7ed3\u6784\u7684\u642d\u5efa\u3002 # \u672c\u6bb5\u4ee3\u7801\u6784\u5efa\u7c7bBiLSTM, \u5b8c\u6210\u521d\u59cb\u5316\u548c\u7f51\u7edc\u7ed3\u6784\u7684\u642d\u5efa # \u603b\u51713\u5c42\uff1a\u8bcd\u5d4c\u5165\u5c42\uff0c\u53cc\u5411LSTM\u5c42\uff0c\u5168\u8fde\u63a5\u7ebf\u6027\u5c42 import torch import torch.nn as nn class BiLSTM ( nn . Module ): def __init__ ( self , vocab_size , label_num ): super ( BiLSTM , self ) . __init__ () # \u7528\u4e8e\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u8bcd\u5411\u91cf self . embed = nn . Embedding ( num_embeddings = vocab_size , embedding_dim = 256 ) # \u7528\u4e8e\u63d0\u53d6\u8f93\u5165\u7684\u53cc\u5411\u8bed\u4e49\u8868\u793a\u5411\u91cf self . blstm = nn . LSTM ( input_size = 256 , hidden_size = 512 , bidirectional = True , num_layers = 1 ) # \u7528\u4e8e\u5c06 self.blstm \u7684\u8f93\u51fa\u5411\u91cf\u6620\u5c04\u4e3a\u6807\u7b7e logits self . liner = nn . Linear ( in_features = 1024 , out_features = label_num ) \u8f93\u5165\u53c2\u6570\uff1a # \u53c2\u65701:\u7801\u8868\u4e0eid\u5bf9\u7167 char_to_id = { \"\u53cc\" : 0 , \"\u80ba\" : 1 , \"\u89c1\" : 2 , \"\u591a\" : 3 , \"\u53d1\" : 4 , \"\u6591\" : 5 , \"\u7247\" : 6 , \"\u72b6\" : 7 , \"\u7a0d\" : 8 , \"\u9ad8\" : 9 , \"\u5bc6\" : 10 , \"\u5ea6\" : 11 , \"\u5f71\" : 12 , \"\u3002\" : 13 } # \u53c2\u65702:\u6807\u7b7e\u7801\u8868\u5bf9\u7167 tag_to_id = { \"O\" : 0 , \"B-dis\" : 1 , \"I-dis\" : 2 , \"B-sym\" : 3 , \"I-sym\" : 4 } # \u53c2\u6570\uff1a\u5b57\u5411\u91cf\u7ef4\u5ea6 # EMBEDDING_DIM = 256 # \u53c2\u6570\uff1a\u9690\u5c42\u7ef4\u5ea6 # HIDDEN_DIM = 512 # \u53c2\u6570\uff1a\u5806\u53e0 LSTM \u5c42\u6570 # NUM_LAYERS = 1 \u8c03\u7528\uff1a # \u521d\u59cb\u5316\u6a21\u578b model = BiLSTM ( vocab_size = len ( char_to_id ), label_num = len ( tag_to_id ),) print ( model ) \u8f93\u51fa\u6548\u679c\uff1a BiLSTM( (embed): Embedding(14, 256) (blstm): LSTM(256, 512, bidirectional=True) (liner): Linear(in_features=1024, out_features=5, bias=True) ) \u7b2c\u4e8c\u6b65\uff1a\u5b9e\u73b0\u7f51\u7edc\u7684\u524d\u5411\u8ba1\u7b97\u3002 # \u53c2\u6570\uff1a\u53e5\u5b50\u957f\u5ea6 # SENTENCE_LENGTH = 20 def forward ( self , inputs , length ): # \u5c06\u8f93\u5165\u7684 token \u7d22\u5f15\u8f6c\u6362\u4e3a\u8bcd\u5411\u91cf outputs_embed = self . embed ( inputs ) # \u7531\u4e8e\u586b\u5145\u4e86\u5f88\u591a0\uff0c\u6b64\u5904\u5c060\u8fdb\u884c\u538b\u7f29 outputs_packd = pack_padded_sequence ( outputs_embed , length ) # BiLSTM \u7528\u4e8e\u63d0\u53d6\u53cc\u5411\u8bed\u4e49\uff0c\u63d0\u53d6\u6bcf\u4e2a\u53e5\u5b50\u4e2d\u7684 token \u8868\u793a outputs_blstm , ( hn , cn ) = self . blstm ( outputs_packd ) # outputs_paded \u8868\u793a\u586b\u5145\u540e\u7684 BiLSTM \u5bf9\u6bcf\u4e2a token \u7684\u8f93\u51fa # outputs_length \u8868\u793a\u6bcf\u4e2a\u53e5\u5b50\u5b9e\u9645\u7684\u957f\u5ea6 outputs_paded , output_lengths = pad_packed_sequence ( outputs_blstm ) outputs_paded = outputs_paded . transpose ( 0 , 1 ) # \u7ebf\u6027\u5c42\u8ba1\u7b97\uff0c\u8ba1\u7b97\u51fa\u53d1\u5c04\u77e9\u9635\uff0c\u5f62\u72b6\uff1a(16, 57, 7) output_logits = self . liner ( outputs_paded ) outputs = [] for output_logit , outputs_length in zip ( output_logits , output_lengths ): outputs . append ( output_logit [: outputs_length ]) return outputs \u7b2c\u4e09\u6b65\uff1a\u5b9e\u73b0\u7f51\u7edc\u7684\u9884\u6d4b\u51fd\u6570\u3002 def predict ( self , inputs ): # \u5c06\u8f93\u5165\u7684 token \u7d22\u5f15\u8f6c\u6362\u4e3a\u8bcd\u5411\u91cf outputs_embed = self . embed ( inputs ) # \u589e\u52a0\u4e00\u4e2a batch \u7ef4\u5ea6\u5728 1 \u4f4d\u7f6e outputs_embed = outputs_embed . unsqueeze ( 1 ) # \u5bf9\u6bcf\u4e2a Token \u8fdb\u884c\u8bed\u4e49\u8868\u793a outputs_blstm , ( hn , cn ) = self . blstm ( outputs_embed ) # \u628a 1 \u4f4d\u7f6e\u7684 batch \u503c\u53bb\u6389 outputs_blstm = outputs_blstm . squeeze ( 1 ) # \u8ba1\u7b97\u6bcf\u4e2a Token \u7684\u53d1\u5c04\u5206\u6570 output_liner = self . liner ( outputs_blstm ) return output_liner \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/bilstm_crf.py \u5c0f\u8282\u603b\u7ed3\uff1a \u4e86\u89e3\u4e86BiLSTM\u7f51\u7edc\u7ed3\u6784 \u8bbe\u7f6e\u9690\u85cf\u5c42\u7ef4\u5ea6\u7684\u65f6\u5019\uff0c\u9700\u8981\u5c06hidden_size // 2 \u603b\u5171\u67093\u5c42\u9700\u8981\u6784\u5efa\uff0c\u5206\u522b\u662f\u8bcd\u5d4c\u5165\u5c42\uff0c\u53cc\u5411LSTM\u5c42\uff0c\u5168\u8fde\u63a5\u7ebf\u6027\u5c42 \u5728\u4ee3\u7801\u5c42\u9762\uff0c\u53cc\u5411LSTM\u5c31\u662f\u5c06nn.LSTM()\u4e2d\u7684\u53c2\u6570bidirectional\u8bbe\u7f6e\u4e3aTrue \u638c\u63e1\u4e86BiLSTM\u7f51\u7edc\u7684\u4ee3\u7801\u5b9e\u73b0 \u6784\u5efa\u7c7bBiLSTM\u7684\u521d\u59cb\u5316\u51fd\u6570 \u6dfb\u52a0\u6587\u672c\u5411\u91cf\u5316\u7684\u8f85\u52a9\u51fd\u6570\uff0c\u6ce8\u610fpadding\u586b\u5145\u4e3a\u76f8\u540c\u957f\u5ea6\u7684Tensor \u8981\u6ce8\u610fforward\u51fd\u6570\u4e2d\u4e0d\u540c\u5f20\u91cf\u7684\u5f62\u72b6\u7ea6\u5b9a","title":"6.4 BiLSTM\u4ecb\u7ecd"},{"location":"6.html#65-bilstmcrf","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u638c\u63e1BiLSTM+CRF\u6a21\u578b\u7ed3\u6784 \u638c\u63e1\u635f\u5931\u51fd\u6570\u7684\u5b9a\u4e49 \u638c\u63e1BiLSTM_CRF\u6a21\u578b\u7684\u4ee3\u7801\u5b9e\u73b0 BiLSTM+CRF\u6a21\u578b\u7ed3\u6784\uff1a 1, \u6a21\u578b\u7684\u6807\u7b7e\u5b9a\u4e49\u4e0e\u6574\u4f53\u67b6\u6784 2, \u6a21\u578b\u5185\u90e8\u7684\u5206\u5c42\u5c55\u5f00 3, CRF\u5c42\u7684\u4f5c\u7528 1, \u6a21\u578b\u7684\u6807\u7b7e\u5b9a\u4e49\u4e0e\u6574\u4f53\u67b6\u6784\uff1a\u5047\u8bbe\u6211\u4eec\u7684\u6570\u636e\u96c6\u4e2d\u6709\u4e24\u7c7b\u5b9e\u4f53-\u4eba\u540d\uff0c\u5730\u540d\uff0c\u4e0e\u4e4b\u5bf9\u5e94\u7684\u5728\u8bad\u7ec3\u96c6\u4e2d\u67095\u7c7b\u6807\u7b7e\u5982\u4e0b\u6240\u793a\uff1a B-Person, I-Person, B-Organization, I-Organization, O # B-Person: \u4eba\u540d\u7684\u5f00\u59cb # I-Person: \u4eba\u540d\u7684\u4e2d\u95f4\u90e8\u5206 # B-Organization: \u5730\u540d\u7684\u5f00\u59cb # I-Organization: \u5730\u540d\u7684\u4e2d\u95f4\u90e8\u5206 # O: \u5176\u4ed6\u975e\u4eba\u540d\uff0c\u975e\u5730\u540d\u7684\u6807\u7b7e \u5047\u8bbe\u4e00\u4e2a\u53e5\u5b50\u67095\u4e2a\u5355\u8bcd\u6784\u6210\uff0c(w0, w1, w2, w3, w4), \u6bcf\u4e00\u4e2a\u5355\u5143\u90fd\u4ee3\u8868\u7740\u7531\u5b57\u5d4c\u5165\u6784\u6210\u7684\u5411\u91cf\u3002 \u5176\u4e2d\u5b57\u5d4c\u5165\u662f\u968f\u673a\u521d\u59cb\u5316\u7684\uff0c\u8bcd\u5d4c\u5165\u662f\u901a\u8fc7\u6570\u636e\u8bad\u7ec3\u5f97\u5230\u7684\uff0c\u6240\u6709\u7684\u5d4c\u5165\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u90fd\u4f1a\u8c03\u6574\u5230\u6700\u4f18\u89e3\u3002 \u8fd9\u4e9b\u5b57\u5d4c\u5165\u6216\u8bcd\u5d4c\u5165\u4f5c\u4e3aBiLSTM+CRF\u6a21\u578b\u7684\u8f93\u5165\uff0c\u800c\u8f93\u51fa\u7684\u662f\u53e5\u5b50\u4e2d\u6bcf\u4e2a\u5355\u5143\u7684\u6807\u7b7e\u3002 2, \u6a21\u578b\u5185\u90e8\u7684\u5206\u5c42\u5c55\u5f00\uff1a\u6574\u4e2a\u6a21\u578b\u660e\u663e\u6709\u4e24\u5c42\uff0c\u7b2c\u4e00\u5c42\u662fBiLSTM\u5c42\uff0c\u7b2c\u4e8c\u5c42\u662fCRF\u5c42\uff0c\u5c06\u5c42\u7684\u5185\u90e8\u5c55\u5f00\u5982\u4e0b\u56fe\u6240\u793a\uff1a BiLSTM\u5c42\u7684\u8f93\u51fa\u4e3a\u6bcf\u4e00\u4e2a\u6807\u7b7e\u7684\u9884\u6d4b\u5206\u503c\uff0c\u4f8b\u5982\u5bf9\u4e8e\u5355\u8bcdw0, BiLSTM\u5c42\u8f93\u51fa\u662f 1.5 (B-Person), 0.9 (I-Person), 0.1 (B-Organization), 0.08 (I-Organization), 0.05 (O) \u8fd9\u4e9b\u5206\u503c\u5c06\u4f5c\u4e3aCRF\u5c42\u7684\u8f93\u5165\u3002 3, CRF\u5c42\u7684\u4f5c\u7528\uff1a\u5982\u679c\u6ca1\u6709CRF\u5c42\uff0c\u4e5f\u53ef\u4ee5\u8bad\u7ec3\u4e00\u4e2aBiLSTM\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u6a21\u578b\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7531\u4e8eBiLSTM\u7684\u8f93\u51fa\u4e3a\u5355\u5143\u7684\u6bcf\u4e00\u4e2a\u6807\u7b7e\u5206\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u6311\u9009\u5206\u503c\u6700\u9ad8\u7684\u4e00\u4e2a\u4f5c\u4e3a\u8be5\u5355\u5143\u7684\u6807\u7b7e\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u5355\u8bcdw0, \"B-Person\"\u7684\u5206\u503c-1.5\u662f\u6240\u6709\u6807\u7b7e\u5f97\u5206\u4e2d\u6700\u9ad8\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u6311\u9009\"B-Person\"\u4f5c\u4e3a\u5355\u8bcdw0\u7684\u9884\u6d4b\u6807\u7b7e\u3002\u540c\u7406\uff0c\u53ef\u4ee5\u5f97\u5230w1 - \"I-Person\", w2 - \"O\", w3 - \"B-Organization\", w4 - \"O\" \u867d\u7136\u6309\u7167\u4e0a\u8ff0\u65b9\u6cd5\uff0c\u5728\u6ca1\u6709CRF\u5c42\u7684\u6761\u4ef6\u4e0b\u6211\u4eec\u4e5f\u53ef\u4ee5\u5f97\u5230x\u4e2d\u6bcf\u4e2a\u5355\u5143\u7684\u9884\u6d4b\u6807\u7b7e\uff0c\u4f46\u662f\u4e0d\u80fd\u4fdd\u8bc1\u6807\u7b7e\u7684\u9884\u6d4b\u6bcf\u6b21\u90fd\u662f\u6b63\u786e\u7684\u3002\u5982\u679c\u51fa\u73b0\u4e0b\u56fe\u7684BiLSTM\u5c42\u8f93\u51fa\u7ed3\u679c\uff0c\u5219\u660e\u663e\u9884\u6d4b\u662f\u9519\u8bef\u7684\u3002 CRF\u5c42\u80fd\u4ece\u8bad\u7ec3\u6570\u636e\u4e2d\u83b7\u5f97\u7ea6\u675f\u6027\u7684\u89c4\u5219\u3002 CRF\u5c42\u53ef\u4ee5\u4e3a\u6700\u540e\u9884\u6d4b\u7684\u6807\u7b7e\u6dfb\u52a0\u4e00\u4e9b\u7ea6\u675f\u6765\u4fdd\u8bc1\u9884\u6d4b\u7684\u6807\u7b7e\u662f\u5408\u6cd5\u7684\u3002\u5728\u8bad\u7ec3\u6570\u636e\u8bad\u7ec3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e9b\u7ea6\u675f\u53ef\u4ee5\u901a\u8fc7CRF\u5c42\u81ea\u52a8\u5b66\u4e60\u5230\u3002 1: \u53e5\u5b50\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8bcd\u603b\u662f\u4ee5\u6807\u7b7e\"B-\"\u6216\u8005\"O\"\u5f00\u59cb\uff0c\u800c\u4e0d\u662f\"I-\"\u5f00\u59cb\u3002 2: \u6807\u7b7e\"B-label1 I-label2 I-label3 ......\", \u5176\u4e2d\u7684label1, label2, label3\u5e94\u8be5\u5c5e\u4e8e\u540c\u4e00\u7c7b\u5b9e\u4f53\u3002 \u6bd4\u5982\uff0c\"B-Person I-Person\"\u662f\u5408\u6cd5\u7684\u5e8f\u5217\uff0c\u4f46\u662f\"B-Person I-Organization\"\u662f\u975e\u6cd5\u7684\u5e8f\u5217\u3002 3: \u6807\u7b7e\u5e8f\u5217\"O I-label\"\u662f\u975e\u6cd5\u5e8f\u5217\uff0c\u4efb\u610f\u5b9e\u4f53\u6807\u7b7e\u7684\u9996\u4e2a\u6807\u7b7e\u5e94\u8be5\u662f\"B-\", \u800c\u4e0d\u662f\"I-\". \u6bd4\u5982\uff0c\"O B-label\"\u624d\u662f\u5408\u6cd5\u7684\u5e8f\u5217 \u6709\u4e86\u4e0a\u8ff0\u8fd9\u4e9b\u7ea6\u675f\uff0c\u6807\u7b7e\u5e8f\u5217\u7684\u9884\u6d4b\u4e2d\u975e\u6cd5\u5e8f\u5217\u51fa\u73b0\u7684\u6982\u7387\u5c06\u4f1a\u5927\u5927\u964d\u4f4e\u3002 \u635f\u5931\u51fd\u6570\u7684\u5b9a\u4e49\uff1a BiLSTM\u5c42\u7684\u8f93\u51fa\u7ef4\u5ea6\u662ftag_size, \u4e5f\u5c31\u662f\u6bcf\u4e2a\u5355\u8bcdw_i\u6620\u5c04\u5230tag\u7684\u53d1\u5c04\u6982\u7387\u503c\uff0c\u5047\u8bbeBiLSTM\u7684\u8f93\u51fa\u77e9\u9635\u662fP, \u5176\u4e2dP(i,j)\u4ee3\u8868\u5355\u8bcdw_i\u6620\u5c04\u5230tag_j\u7684\u975e\u5f52\u4e00\u5316\u6982\u7387\u3002\u5bf9\u4e8eCRF\u5c42\uff0c\u5047\u8bbe\u5b58\u5728\u4e00\u4e2a\u8f6c\u79fb\u77e9\u9635A, \u5176\u4e2dA(i,j)\u4ee3\u8868tag_j\u8f6c\u79fb\u5230tag_i\u7684\u6982\u7387\u3002 \u5bf9\u4e8e\u8f93\u5165\u5e8f\u5217X\u5bf9\u5e94\u7684\u8f93\u51fatag\u5e8f\u5217y, \u5b9a\u4e49\u5206\u6570\u5982\u4e0b(\u672c\u8d28\u4e0a\u5c31\u662f\u53d1\u5c04\u6982\u7387\u548c\u8f6c\u79fb\u6982\u7387\u7684\u7d2f\u52a0\u548c): S(X,y)=\\sum_{i=0}^{n}A_{y_i,y_{i+1}}+\\sum_{i=1}^nP_{i,y_i} S(X,y)=\\sum_{i=0}^{n}A_{y_i,y_{i+1}}+\\sum_{i=1}^nP_{i,y_i} \u5229\u7528softmax\u51fd\u6570\uff0c\u4e3a\u6bcf\u4e00\u4e2a\u6b63\u786e\u7684tag\u5e8f\u5217y\u5b9a\u4e49\u4e00\u4e2a\u6982\u7387\u503c\uff0c\u5728\u771f\u5b9e\u7684\u8bad\u7ec3\u4e2d\uff0c\u53ea\u9700\u8981\u6700\u5927\u5316\u4f3c\u7136\u6982\u7387p(y|X)\u5373\u53ef\uff0c\u5177\u4f53\u4f7f\u7528\u5bf9\u6570\u4f3c\u7136\u5982\u4e0b\uff1a -\\log(p(y|X)) = -\\log(\\frac{e^{S(X,y)}}{\\sum_{\\hat{y}\\in Y_X } e^{S(X,\\hat{y})}})\\\\ = \\log(\\sum_{\\hat{y}\\in Y_X} e^{S(X, \\hat{y})})-S(X, y) -\\log(p(y|X)) = -\\log(\\frac{e^{S(X,y)}}{\\sum_{\\hat{y}\\in Y_X } e^{S(X,\\hat{y})}})\\\\ = \\log(\\sum_{\\hat{y}\\in Y_X} e^{S(X, \\hat{y})})-S(X, y) BiLSTM+CRF\u6a21\u578b\u7684\u5b9e\u73b0\uff1a \u7b2c\u4e00\u6b65\uff1a\u6784\u5efaCRF\u6a21\u578b \u7b2c\u4e8c\u6b65\uff1a\u8ba1\u7b97\u5355\u6761\u8def\u5f84\u7684\u5206\u6570 \u7b2c\u4e09\u6b65\uff1a\u8ba1\u7b97\u5168\u90e8\u8def\u5f84\u7684\u5206\u6570 \u7b2c\u56db\u6b65\uff1a\u8ba1\u7b97\u635f\u5931\u503c \u7b2c\u4e94\u6b65\uff1a\u7ef4\u7279\u6bd4\u7b97\u6cd5\u7684\u5b9e\u73b0 \u7b2c\u516d\u6b65\uff1a\u6784\u9020NER\u6a21\u578b\u7ec4\u5408\u5168\u90e8\u529f\u80fd \u7b2c\u4e00\u6b65\uff1a\u6784\u5efaCRF\u6a21\u578b # \u5bfc\u5165\u76f8\u5173\u5305\u4e0e\u6a21\u5757 import torch import torch.nn as nn from torch.nn.utils.rnn import pack_padded_sequence from torch.nn.utils.rnn import pad_packed_sequence # \u5b9a\u4e49\u8ba1\u7b97\u8bbe\u5907 device = torch . device ( 'cuda' if torch . cuda . is_available () else 'cpu' ) class CRF ( nn . Module ): def __init__ ( self , label_num ): super ( CRF , self ) . __init__ () # \u8f6c\u79fb\u77e9\u9635\u7684\u6807\u7b7e\u6570\u91cf self . label_num = label_num # [TAG1, TAG2, TAG3...STAR, END] params = torch . randn ( self . label_num + 2 , self . label_num + 2 ) self . transition_scores = nn . Parameter ( params ) # \u5f00\u59cb\u548c\u7ed3\u675f\u6807\u7b7e START_TAG , ENG_TAG = self . label_num , self . label_num + 1 self . transition_scores . data [:, START_TAG ] = - 1000 self . transition_scores . data [ ENG_TAG , :] = - 1000 # \u5b9a\u4e49\u4e00\u4e2a\u8f83\u5c0f\u503c\u7528\u4e8e\u6269\u5c55\u53d1\u5c04\u548c\u8f6c\u79fb\u77e9\u9635\u65f6\u586b\u5145 self . fill_value = - 1000.0 \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/bilstm_crf.py \u7b2c\u4e8c\u6b65\uff1a\u8ba1\u7b97\u5355\u6761\u8def\u5f84\u7684\u5206\u6570 def _get_real_path_score ( self , emission_score , sequence_label ): # \u8ba1\u7b97\u6807\u7b7e\u7684\u6570\u91cf seq_length = len ( sequence_label ) # \u8ba1\u7b97\u771f\u5b9e\u8def\u5f84\u53d1\u5c04\u5206\u6570 real_emission_score = torch . sum ( emission_score [ list ( range ( seq_length )), sequence_label ]) # \u5728\u771f\u5b9e\u6807\u7b7e\u5e8f\u5217\u524d\u540e\u589e\u52a0\u4e00\u4e2a start \u548c end b_id = torch . tensor ([ self . label_num ], dtype = torch . int32 , device = device ) e_id = torch . tensor ([ self . label_num + 1 ], dtype = torch . int32 , device = device ) sequence_label_expand = torch . cat ([ b_id , sequence_label , e_id ]) # \u8ba1\u7b97\u771f\u5b9e\u8def\u5f84\u8f6c\u79fb\u5206\u6570 pre_tag = sequence_label_expand [ list ( range ( seq_length + 1 ))] now_tag = sequence_label_expand [ list ( range ( 1 , seq_length + 2 ))] real_transition_score = torch . sum ( self . transition_scores [ pre_tag , now_tag ]) # \u8ba1\u7b97\u771f\u5b9e\u8def\u5f84\u5206\u6570 real_path_score = real_emission_score + real_transition_score return real_path_score \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/bilstm_crf.py \u7b2c\u4e09\u6b65\uff1a\u8ba1\u7b97\u5168\u90e8\u8def\u5f84\u7684\u5206\u6570 def _log_sum_exp ( self , score ): # \u8ba1\u7b97 e \u7684\u6307\u6570\u65f6\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u51cf\u53bb\u6700\u5927\u503c\uff0c\u907f\u514d\u6570\u503c\u6ea2\u51fa max_score , _ = torch . max ( score , dim = 0 ) max_score_expand = max_score . expand ( score . shape ) return max_score + torch . log ( torch . sum ( torch . exp ( score - max_score_expand ), dim = 0 )) def _expand_emission_matrix ( self , emission_score ): # \u8ba1\u7b97\u6807\u7b7e\u7684\u6570\u91cf sequence_length = emission_score . shape [ 0 ] # \u6269\u5c55\u65f6\u4f1a\u589e\u52a0 START \u548c END \u6807\u7b7e\uff0c\u5b9a\u4e49\u8be5\u6807\u7b7e\u7684\u503c b_s = torch . tensor ([[ self . fill_value ] * self . label_num + [ 0 , self . fill_value ]], device = device ) e_s = torch . tensor ([[ self . fill_value ] * self . label_num + [ self . fill_value , 0 ]], device = device ) # \u6269\u5c55\u53d1\u5c04\u77e9\u9635\u4e3a (self.label_num + 2, self.label_num + 2) expand_matrix = self . fill_value * torch . ones ([ sequence_length , 2 ], dtype = torch . float32 , device = device ) emission_score_expand = torch . cat ([ emission_score , expand_matrix ], dim = 1 ) emission_score_expand = torch . cat ([ b_s , emission_score_expand , e_s ], dim = 0 ) return emission_score_expand def _get_total_path_score ( self , emission_score ): # \u6269\u5c55\u53d1\u5c04\u5206\u6570\u77e9\u9635 emission_score_expand = self . _expand_emission_matrix ( emission_score ) # \u8ba1\u7b97\u6240\u6709\u8def\u5f84\u5206\u6570 pre = emission_score_expand [ 0 ] for obs in emission_score_expand [ 1 :]: # \u6269\u5c55 pre \u7ef4\u5ea6 pre_expand = pre . reshape ( - 1 , 1 ) . expand ([ self . label_num + 2 , self . label_num + 2 ]) # \u6269\u5c55 obs \u7ef4\u5ea6 obs_expand = obs . expand ([ self . label_num + 2 , self . label_num + 2 ]) # \u6269\u5c55\u4e4b\u540e obs pre \u548c self.transition_scores \u7ef4\u5ea6\u76f8\u540c score = obs_expand + pre_expand + self . transition_scores # \u8ba1\u7b97\u5bf9\u6570\u5206\u6570 pre = self . _log_sum_exp ( score ) return self . _log_sum_exp ( pre ) \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/bilstm_crf.py \u7b2c\u56db\u6b65\uff1a\u8ba1\u7b97\u635f\u5931\u503c def forward ( self , emission_scores , sequence_labels ): total_loss = 0.0 for emission_score , sequence_label in zip ( emission_scores , sequence_labels ): # \u8ba1\u7b97\u771f\u5b9e\u8def\u5f84\u5f97\u5206 real_path_score = self . _get_real_path_score ( emission_score , sequence_label ) # \u8ba1\u7b97\u6240\u6709\u8def\u5f84\u5206\u6570 total_path_score = self . _get_total_path_score ( emission_score ) # \u6700\u7ec8\u635f\u5931 finish_loss = total_path_score - real_path_score # \u7d2f\u52a0\u4e0d\u540c\u53e5\u5b50\u7684\u635f\u5931 total_loss += finish_loss return total_loss \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/bilstm_crf.py \u7b2c\u4e94\u6b65\uff1a\u7ef4\u7279\u6bd4\u7b97\u6cd5\u7684\u5b9e\u73b0 def predict ( self , emission_score ): \"\"\"\u4f7f\u7528\u7ef4\u7279\u6bd4\u7b97\u6cd5\uff0c\u7ed3\u5408\u53d1\u5c04\u77e9\u9635+\u8f6c\u79fb\u77e9\u9635\u8ba1\u7b97\u6700\u4f18\u8def\u5f84\"\"\" # \u6269\u5c55\u53d1\u5c04\u5206\u6570\u77e9\u9635 emission_score_expand = self . _expand_emission_matrix ( emission_score ) # \u8ba1\u7b97\u5206\u6570 ids = torch . zeros ( 1 , self . label_num + 2 , dtype = torch . long , device = device ) val = torch . zeros ( 1 , self . label_num + 2 , device = device ) pre = emission_score_expand [ 0 ] for obs in emission_score_expand [ 1 :]: # \u6269\u5c55 pre \u7ef4\u5ea6 pre_expand = pre . reshape ( - 1 , 1 ) . expand ([ self . label_num + 2 , self . label_num + 2 ]) # \u6269\u5c55 obs \u7ef4\u5ea6 obs_expand = obs . expand ([ self . label_num + 2 , self . label_num + 2 ]) # \u6269\u5c55\u4e4b\u540e obs pre \u548c self.transition_scores \u7ef4\u5ea6\u76f8\u540c score = obs_expand + pre_expand + self . transition_scores # \u83b7\u5f97\u5f53\u524d\u591a\u5206\u652f\u4e2d\u6700\u5927\u503c\u7684\u5206\u652f\u7d22\u5f15 value , index = score . max ( dim = 0 ) # \u62fc\u63a5\u6bcf\u4e00\u4e2a\u65f6\u95f4\u6b65\u7684\u7ed3\u679c ids = torch . cat ([ ids , index . unsqueeze ( 0 )], dim = 0 ) val = torch . cat ([ val , value . unsqueeze ( 0 )], dim = 0 ) # \u8ba1\u7b97\u5206\u6570 pre = value # \u5148\u53d6\u51fa\u6700\u540e\u4e00\u4e2a\u7684\u6700\u5927\u503c index = torch . argmax ( val [ - 1 ]) best_path = [ index ] # \u518d\u56de\u6eaf\u524d\u4e00\u4e2a\u6700\u5927\u503c # \u7531\u4e8e\u4e3a\u4e86\u65b9\u4fbf\u62fc\u63a5\uff0c\u6211\u4eec\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u9ed8\u8ba4\u586b\u5145\u4e860 for i in reversed ( ids [ 1 :]): # \u83b7\u5f97\u5206\u6570\u6700\u5927\u7684\u7d22\u5f15 # index = torch.argmax(v) # \u83b7\u5f97\u7d22\u5f15\u5bf9\u5e94\u7684\u6807\u7b7eID index = i [ index ] . item () best_path . append ( index ) best_path = best_path [:: - 1 ][ 1 : - 1 ] return best_path \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e/data/doctor_offline/ner_model/bilstm_crf.py \u7b2c\u516d\u6b65\uff1a\u6784\u9020NER\u6a21\u578b\u7ec4\u5408\u5168\u90e8\u529f\u80fd class NER ( nn . Module ): def __init__ ( self , vocab_size , label_num ): super ( NER , self ) . __init__ () self . vocab_size = vocab_size self . label_num = label_num # \u53cc\u5411\u957f\u77ed\u8bb0\u5fc6\u7f51\u7edc self . bilstm = BiLSTM ( vocab_size = self . vocab_size , label_num = self . label_num ) # \u6761\u4ef6\u968f\u673a\u573a\u7f51\u7edc\u5c42 self . crf = CRF ( label_num = self . label_num ) def forward ( self , inputs , labels , length ): # \u8ba1\u7b97\u8f93\u5165\u6279\u6b21\u6837\u672c\u7684\u6bcf\u4e2a Token \u7684\u5206\u6570\uff0c\u5373\uff1a\u6bcf\u4e2a\u53e5\u5b50\u7684\u53d1\u5c04\u77e9\u9635 emission_scores = self . bilstm ( inputs , length ) # \u8ba1\u7b97\u6279\u6b21\u6837\u672c\u7684\u603b\u635f\u5931 batch_loss = self . crf ( emission_scores , labels ) # \u8fd4\u56de\u603b\u635f\u5931 return batch_loss def save_model ( self , save_apth ): save_info = { 'init' : { 'vocab_size' : self . vocab_size , 'label_num' : self . label_num }, 'state' : self . state_dict () } torch . save ( save_info , save_apth ) def predict ( self , inputs ): # \u8ba1\u7b97\u8f93\u5165\u6279\u6b21\u6837\u672c\u7684\u6bcf\u4e2a Token \u7684\u5206\u6570\uff0c\u5373\uff1a\u6bcf\u4e2a\u53e5\u5b50\u7684\u53d1\u5c04\u77e9\u9635 emission_scores = self . bilstm . predict ( inputs ) # viterbi_decode \u51fd\u6570\u63a5\u6536\u7684\u53d1\u5c04\u77e9\u9635\u4e3a\u4e8c\u7ef4\u7684 (seq_len, scores) logits = self . crf . predict ( emission_scores ) return logits \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/bilstm_crf.py","title":"6.5 BiLSTM+CRF\u6a21\u578b"},{"location":"6.html#66","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u638c\u63e1\u6570\u636e\u7684\u9884\u5904\u7406\u6d41\u7a0b \u638c\u63e1\u751f\u6210\u6279\u91cf\u8bad\u7ec3\u6570\u636e\u7684\u65b9\u6cd5 \u638c\u63e1\u6a21\u578b\u8bad\u7ec3\u4ee3\u7801 \u6a21\u578b\u8bad\u7ec3\u7684\u6d41\u7a0b \u7b2c\u4e00\u6b65\uff1a\u719f\u6089\u5b57\u7b26\u5230\u6570\u5b57\u7f16\u7801\u7684\u7801\u8868 \u7b2c\u4e8c\u6b65\uff1a\u719f\u6089\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u5f0f\u548c\u542b\u4e49\u89e3\u91ca \u7b2c\u4e09\u6b65\uff1a\u751f\u6210\u6279\u91cf\u8bad\u7ec3\u6570\u636e \u7b2c\u56db\u6b65\uff1a\u5b8c\u6210\u8bad\u7ec3\u6a21\u578b\u7684\u4ee3\u7801\u3002 \u7b2c\u4e94\u6b65\uff1a\u5b8c\u6210\u51c6\u786e\u7387\u548c\u53ec\u56de\u7387\u7684\u8bc4\u4f30\u4ee3\u7801 \u7b2c\u516d\u6b65\uff1a\u7ed8\u5236\u635f\u5931\u66f2\u7ebf\u548c\u8bc4\u4f30\u66f2\u7ebf\u56fe \u7b2c\u4e00\u6b65\uff1a\u719f\u6089\u5b57\u7b26\u5230\u6570\u5b57\u7f16\u7801\u7684\u7801\u8868\u3002 # \u4ee3\u8868\u4e86\u6570\u636e\u96c6\u4e2d\u6240\u6709\u5b57\u7b26\u5230\u6570\u5b57\u7f16\u7801\u7684\u5b57\u5178\u6620\u5c04 # \u7801\u8868\u53ef\u4ee5\u5305\u542b\u4e2d\u6587\u7b80\u4f53\u3001\u7e41\u4f53\u3001\u82f1\u6587\u5927\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e2d\u82f1\u6587\u6807\u70b9\u7b26\u53f7\u7b49\u7b49 # <PAD>\u4e3a\u586b\u5145\u6807\u8bc6\uff0c\u8bad\u7ec3\u65f6\u9700\u8981\u5c06\u53e5\u5b50\u8f6c\u5316\u6210\u77e9\u9635\uff0c\u800c\u53e5\u5b50\u957f\u77ed\u4e0d\u4e00\uff0c\u9700\u8981\u505apadding\u5904\u7406 { \"<PAD>\": 0, \"\u5391\": 1, \"\u5416\": 2, \"\u5475\": 3, \"\u554a\": 4, \"\u55c4\": 5, \"\u5b36\": 6, ... } \u7801\u8868\u6240\u5728\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/data/char_to_id.json # \u8fd9\u91cc\u4e0d\u4f7f\u7528\u7801\u8868\u539f\u59cb\u7f16\u7801\uff0c\u540e\u7eed\u4f7f\u7528BertTokenizer\u8fdb\u884c\u7f16\u7801 def build_vocab (): chat_to_id = json . load ( open ( 'data/char_to_id.json' , mode = 'r' , encoding = 'utf8' )) unique_words = list ( chat_to_id . keys ())[ 1 : - 1 ] unique_words . insert ( 0 , '[UNK]' ) unique_words . insert ( 0 , '[PAD]' ) # \u5c06\u5b57\u5199\u5165\u5230 data/bilstm_crf_vocab_aidoc.txt \u8bcd\u5178\u6587\u4ef6\u4e2d with open ( 'data/bilstm_crf_vocab_aidoc.txt' , 'w' ) as file : for word in unique_words : file . write ( word + ' \\n ' ) \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/build_vocab.py \u7b2c\u4e8c\u6b65\uff1a\u719f\u6089\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u5f0f\u548c\u542b\u4e49\u89e3\u91ca\u3002 { \"text\" : [ \"\u5973\" , \"\u6027\" , \"\uff0c\" , \"8\" , \"8\" , \"\u5c81\" , \"\uff0c\" , \"\u519c\" , \"\u6c11\" , \"\uff0c\" , \"\u53cc\" , \"\u6ee6\" , \"\u533a\" , \"\u5e94\" , \"\u8425\" , \"\u5b50\" , \"\u6751\" , \"\u4eba\" , \"\uff0c\" , \"\u4e3b\" , \"\u56e0\" , \"\u53f3\" , \"\u9acb\" , \"\u90e8\" , \"\u6454\" , \"\u4f24\" , \"\u540e\" , \"\u75bc\" , \"\u75db\" , \"\u80bf\" , \"\u80c0\" , \"\uff0c\" , \"\u6d3b\" , \"\u52a8\" , \"\u53d7\" , \"\u9650\" , \"5\" , \"\u5c0f\" , \"\u65f6\" , \"\u4e8e\" , \"2\" , \"0\" , \"1\" , \"6\" , \"-\" , \"1\" , \"0\" , \"-\" , \"2\" , \"9\" , \"\uff1b\" , \"1\" , \"1\" , \"\uff1a\" , \"1\" , \"2\" , \"\u5165\" , \"\u9662\" , \"\u3002\" ], \"label\" : [ \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"B-sym\" , \"I-sym\" , \"B-sym\" , \"I-sym\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" , \"O\" ]} \u8bad\u7ec3\u6570\u636e\u96c6\u7684\u542b\u4e49\u89e3\u91ca\uff1a \u6bcf\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u5b57\u4ee5\u53ca\u4e0e\u4e4b\u5bf9\u5e94\u7684\u6807\u7b7e json\u683c\u5f0f \u6807\u7b7e\u8bf4\u660e\uff1a B-dis: \u75be\u75c5\u5b9e\u4f53\u540d\u8bcd\u8d77\u59cb\u6807\u8bc6 I-dis: \u75be\u75c5\u5b9e\u4f53\u540d\u8bcd\u4e2d\u95f4\u5230\u7ed3\u5c3e\u6807\u8bc6 B-sym: \u75c7\u72b6\u5b9e\u4f53\u540d\u8bcd\u8d77\u59cb\u6807\u8bc6 I-sym: \u75c7\u72b6\u5b9e\u4f53\u540d\u8bcd\u4e2d\u95f4\u5230\u7ed3\u5c3e\u6807\u8bc6 O: \u5176\u4ed6\u975e\u5b9e\u4f53\u90e8\u5206\u6807\u8bc6 \u6570\u636e\u96c6\u6240\u5728\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/data/train.txt /data/doctor_offline/ner_model/data/valid.txt \u5c06\u8bad\u7ec3\u6570\u636e\u96c6\u8f6c\u6362\u4e3acsv\u683c\u5f0f\uff1a import pandas as pd import json def load_corpus (): # \u5b9a\u4e49\u8bad\u7ec3\u6570\u636e\u96c6\u548c\u9a8c\u8bc1\u6570\u636e\u96c6\u7684\u8def\u5f84 train_data_file_path = 'ai_doc_data/train.txt' validate_file_path = 'ai_doc_data/validate.txt' data_inputs , data_labels = [], [] # \u56e0\u4e3a\u6bcf\u884c\u90fd\u662f\u4e00\u4e2a\u6837\u672c\uff0c\u6240\u4ee5\u6309\u884c\u904d\u5386\u5373\u53ef for line in open ( train_data_file_path , mode = 'r' , encoding = 'utf8' ): # \u6bcf\u884c\u6837\u672c\u6570\u636e\u90fd\u662fjson\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884cloads, \u7136\u540e\u8ffd\u52a0\u8fdb\u7ed3\u679c\u5217\u8868\u4e2d data = json . loads ( line ) # print(type(data)) data_inputs . append ( ' ' . join ( data [ 'text' ])) data_labels . append ( ' ' . join ( data [ 'label' ])) train_data_df = pd . DataFrame () train_data_df [ 'data_inputs' ] = data_inputs train_data_df [ 'data_labels' ] = data_labels train_data_df . to_csv ( 'data/01-\u8bad\u7ec3\u96c6_aidoc.csv' ) print ( '\u8bad\u7ec3\u96c6\u6570\u636e\u91cf\uff1a' , len ( train_data_df )) data_inputs , data_labels = [], [] for line in open ( validate_file_path , mode = 'r' , encoding = 'utf8' ): data = json . loads ( line ) data_inputs . append ( ' ' . join ( data [ 'text' ])) data_labels . append ( ' ' . join ( data [ 'label' ])) # \u5b58\u50a8\u6d4b\u8bd5\u96c6\u6570\u636e test_data_df = pd . DataFrame () test_data_df [ 'data_inputs' ] = data_inputs test_data_df [ 'data_labels' ] = data_labels test_data_df . to_csv ( 'data/02-\u6d4b\u8bd5\u96c6_aidoc.csv' ) print ( '\u6d4b\u8bd5\u96c6\u6570\u636e\u91cf\uff1a' , len ( test_data_df )) \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/load_corpus.py \u7b2c\u4e09\u6b65\uff1a\u518d\u5c06csv\u6587\u4ef6\u8f6c\u6210DatasetDict\u683c\u5f0f\uff0c\u751f\u6210\u6279\u91cf\u8bad\u7ec3\u6570\u636e\u3002 import pandas as pd from datasets import Dataset , DatasetDict def encode_label (): label_to_index = { \"O\" : 0 , \"B-dis\" : 1 , \"I-dis\" : 2 , \"B-sym\" : 3 , \"I-sym\" : 4 } # \u5c06 csv \u6570\u636e\u8f6c\u6362\u6210 Dataset \u7c7b\u578b train_data = pd . read_csv ( 'data/01-\u8bad\u7ec3\u96c6_aidoc.csv' ) valid_data = pd . read_csv ( 'data/02-\u6d4b\u8bd5\u96c6_aidoc.csv' ) train_data = Dataset . from_pandas ( train_data ) valid_data = Dataset . from_pandas ( valid_data ) corpus_data = DatasetDict ({ 'train' : train_data , 'valid' : valid_data }) # \u5c06\u6807\u7b7e\u6570\u636e\u8f6c\u6362\u4e3a\u7d22\u5f15\u8868\u793a def data_handler ( data_labels , data_inputs ): data_label_ids = [] for labels in data_labels : label_ids = [] for label in labels . split (): label_ids . append ( label_to_index [ label ]) data_label_ids . append ( label_ids ) return { 'data_labels' : data_label_ids , 'data_inputs' : data_inputs } corpus_data = corpus_data . map ( data_handler , input_columns = [ 'data_labels' , 'data_inputs' ], batched = True ) # \u6570\u636e\u5b58\u50a8 corpus_data . save_to_disk ( 'data/bilstm_crf_data_aidoc' ) \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/encode_label.py \u751f\u6210\u4e86\u65b0\u7684\u6570\u636e\u96c6\u6587\u4ef6\uff1a/data/doctor_offline/ner_model/data/bilstm_crf_data_aidoc \u7b2c\u56db\u6b65\uff1a\u5b8c\u6210\u8bad\u7ec3\u6a21\u578b\u7684\u4ee3\u7801\u3002 import torch import torch.optim as optim import numpy as np import pandas as pd from torch.nn.utils.rnn import pad_sequence from datasets import load_from_disk from transformers import BertTokenizer import matplotlib.pyplot as plt from bilstm_crf import NER from evaluate import evaluate device = torch . device ( \"cuda:0\" if torch . cuda . is_available () else \"cpu\" ) def pad_batch_inputs ( data , labels , tokenizer ): # \u51fd\u6570\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u6309\u7167\u5185\u5bb9\u957f\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u8fc7\u7684\uff0csentence \u548c label, \u8fd8\u8981\u8fd4\u56de sentence \u957f\u5ea6 # \u5c06\u6279\u6b21\u6570\u636e\u7684\u8f93\u5165\u548c\u6807\u7b7e\u503c\u5206\u5f00\uff0c\u5e76\u8ba1\u7b97\u6279\u6b21\u7684\u8f93\u5165\u957f\u5ea6 data_inputs , data_length , data_labels = [], [], [] for data_input , data_label in zip ( data , labels ): # \u5bf9\u8f93\u5165\u53e5\u5b50\u8fdb\u884c\u7f16\u7801 data_input_encode = tokenizer . encode ( data_input , return_tensors = 'pt' , add_special_tokens = False ) data_input_encode = data_input_encode . to ( device ) data_inputs . append ( data_input_encode . squeeze ()) # \u53bb\u9664\u591a\u4f59\u7a7a\u683c\uff0c\u8ba1\u7b97\u53e5\u5b50\u957f\u5ea6 data_input = '' . join ( data_input . split ()) data_length . append ( len ( data_input )) # \u5c06\u6807\u7b7e\u8f6c\u6362\u4e3a\u5f20\u91cf data_labels . append ( torch . tensor ( data_label , device = device )) # \u5bf9\u4e00\u4e2a\u6279\u6b21\u7684\u5185\u5bb9\u6309\u7167\u957f\u5ea6\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7b26\u53f7\u8868\u793a\u964d\u5e8f sorted_index = np . argsort ( - np . asarray ( data_length )) # \u6839\u636e\u957f\u5ea6\u7684\u7d22\u5f15\u8fdb\u884c\u6392\u5e8f sorted_inputs , sorted_labels , sorted_length = [], [], [] for index in sorted_index : sorted_inputs . append ( data_inputs [ index ]) sorted_labels . append ( data_labels [ index ]) sorted_length . append ( data_length [ index ]) # \u5bf9\u5f20\u91cf\u8fdb\u884c\u586b\u5145\uff0c\u4f7f\u5176\u53d8\u6210\u957f\u5ea6\u4e00\u6837\u7684\u5f20\u91cf pad_inputs = pad_sequence ( sorted_inputs ) return pad_inputs , sorted_labels , sorted_length label_to_index = { \"O\" : 0 , \"B-dis\" : 1 , \"I-dis\" : 2 , \"B-sym\" : 3 , \"I-sym\" : 4 } def train (): # \u8bfb\u53d6\u6570\u636e\u96c6 train_data = load_from_disk ( 'data/bilstm_crf_data_aidoc' )[ 'train' ] # \u6784\u5efa\u5206\u8bcd\u5668 tokenizer = BertTokenizer ( vocab_file = 'data/bilstm_crf_vocab_aidoc.txt' ) # \u6784\u5efa\u6a21\u578b model = NER ( vocab_size = tokenizer . vocab_size , label_num = len ( label_to_index )) . cuda ( device ) # model_param = torch.load('data/BiLSTM-CRF-final.bin') # model = NER(**model_param['init']).cuda(device) # model.load_state_dict(model_param['state']) # \u6279\u6b21\u5927\u5c0f batch_size = 16 # \u4f18\u5316\u5668 optimizer = optim . AdamW ( model . parameters (), lr = 3e-5 ) # \u8bad\u7ec3\u8f6e\u6570 num_epoch = 700 # train history train_history_list = [] # valid history valid_history_list = [] # \u5f00\u59cb\u8bad\u7ec3 def start_train ( data_inputs , data_labels , tokenizer ): # \u5bf9\u6279\u91cf\u6570\u636e\u8fdb\u884c\u586b\u5145\u5bf9\u9f50 pad_inputs , sorted_labels , sorted_length = \\ pad_batch_inputs ( data_inputs , data_labels , tokenizer ) # \u8ba1\u7b97\u635f\u5931 loss = model ( pad_inputs , sorted_labels , sorted_length ) # \u68af\u5ea6\u6e05\u96f6 optimizer . zero_grad () # \u53cd\u5411\u4f20\u64ad loss . backward () # \u53c2\u6570\u66f4\u65b0 optimizer . step () # \u7edf\u8ba1\u635f\u5931 nonlocal total_loss total_loss += loss . item () for epoch in range ( 0 , num_epoch ): # \u7edf\u8ba1\u635f\u5931 total_loss = 0.0 # \u5f00\u59cb\u8bad\u7ec3 train_data . map ( start_train , input_columns = [ 'data_inputs' , 'data_labels' ], batched = True , batch_size = batch_size , fn_kwargs = { 'tokenizer' : tokenizer }, desc = 'epoch: %d ' % ( epoch + 1 )) # \u6253\u5370\u635f\u5931 print ( 'epoch: %d loss: %.3f ' % ( epoch + 1 , total_loss )) # evaluate train data # train_eval_result = evaluate(model, tokenizer, train_data) # train_eval_result.append(total_loss) # train_history_list.append(train_eval_result) # evaluate valid data # valid_history_list.append(evaluate(model, tokenizer)) # \u5b58\u50a8\u6a21\u578b if ( epoch + 1 ) % 10 == 0 : model . save_model ( 'data/BiLSTM-CRF- %d .bin' % ( epoch + 1 )) # plot history curve # save_train_history_image(train_history_list, valid_history_list, \"log/bilstm_crf_train_plot.png\") if __name__ == '__main__' : train () \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/train.py \u7b2c\u4e94\u6b65\uff1a\u5b8c\u6210\u51c6\u786e\u7387\u548c\u53ec\u56de\u7387\u7684\u8bc4\u4f30\u4ee3\u7801\u3002 import torch from datasets import load_from_disk from transformers import BertTokenizer from bilstm_crf import NER device = torch . device ( \"cuda:0\" if torch . cuda . is_available () else \"cpu\" ) def evaluate ( model = None , tokenizer = None , data = None ): if data is None : # \u8bfb\u53d6\u6d4b\u8bd5\u6570\u636e data = load_from_disk ( 'data/bilstm_crf_data_aidoc' )[ 'valid' ] # 1. \u8ba1\u7b97\u5404\u4e2a\u4e0d\u540c\u7c7b\u522b\u603b\u5b9e\u4f53\u6570\u91cf # \u8ba1\u7b97\u6d4b\u8bd5\u96c6\u5b9e\u4f53\u6570\u91cf total_entities = { 'DIS' : [], 'SYM' : []} # indicators indicators = [] def calculate_handler ( data_inputs , data_labels ): # \u5c06 data_inputs \u8f6c\u6362\u4e3a\u6ca1\u6709\u7a7a\u683c\u9694\u5f00\u7684\u53e5\u5b50 data_inputs = '' . join ( data_inputs . split ()) # \u63d0\u53d6\u53e5\u5b50\u4e2d\u7684\u5b9e\u4f53 extract_entities = extract_decode ( data_labels , data_inputs ) # \u7edf\u8ba1\u6bcf\u79cd\u5b9e\u4f53\u7684\u6570\u91cf nonlocal total_entities for key , value in extract_entities . items (): total_entities [ key ] . extend ( value ) # \u7edf\u8ba1\u4e0d\u540c\u5b9e\u4f53\u7684\u6570\u91cf data . map ( calculate_handler , input_columns = [ 'data_inputs' , 'data_labels' ]) # print(total_entities) # 2. \u8ba1\u7b97\u6a21\u578b\u9884\u6d4b\u7684\u5404\u4e2a\u7c7b\u522b\u5b9e\u4f53\u6570\u91cf if model is None : model_param = torch . load ( 'data/BiLSTM-CRF-final.bin' ) model = NER ( ** model_param [ 'init' ]) . cuda ( device ) model . load_state_dict ( model_param [ 'state' ]) # \u6784\u5efa\u5206\u8bcd\u5668 if tokenizer is None : tokenizer = BertTokenizer ( vocab_file = 'data/bilstm_crf_vocab_aidoc.txt' ) model_entities = { 'DIS' : [], 'SYM' : [], } def start_evaluate ( data_inputs ): # \u5bf9\u8f93\u5165\u6587\u672c\u8fdb\u884c\u5206\u8bcd model_inputs = tokenizer . encode ( data_inputs , add_special_tokens = False , return_tensors = 'pt' )[ 0 ] model_inputs = model_inputs . to ( device ) # \u6587\u672c\u9001\u5165\u6a21\u578b\u8fdb\u884c\u8ba1\u7b97 with torch . no_grad (): label_list = model . predict ( model_inputs ) # \u7edf\u8ba1\u9884\u6d4b\u7684\u5b9e\u4f53\u6570\u91cf text = '' . join ( data_inputs . split ()) # \u4ece\u9884\u6d4b\u7ed3\u679c\u63d0\u53d6\u5b9e\u4f53\u540d\u5b57 extract_entities = extract_decode ( label_list , text ) nonlocal model_entities for key , value in extract_entities . items (): model_entities [ key ] . extend ( value ) # \u7edf\u8ba1\u9884\u6d4b\u4e0d\u540c\u5b9e\u4f53\u7684\u6570\u91cf data . map ( start_evaluate , input_columns = [ 'data_inputs' ], batched = False ) # print(model_entities) # 3. \u7edf\u8ba1\u6bcf\u4e2a\u7c7b\u522b\u7684\u53ec\u56de\u7387 total_pred_correct = 0 total_true_correct = 0 for key in total_entities . keys (): # \u83b7\u5f97\u5f53\u524d key \u7c7b\u522b\u771f\u5b9e\u548c\u6a21\u578b\u9884\u6d4b\u5b9e\u4f53\u5217\u8868 true_entities = total_entities [ key ] true_entities_num = len ( true_entities ) pred_entities = model_entities [ key ] pred_entities_num = len ( pred_entities ) # \u5206\u89e3\u9884\u6d4b\u5b9e\u4f53\u4e2d\uff0cpred_correct \u8868\u793a\u9884\u6d4b\u6b63\u786e\uff0cpred_incorrect \u8868\u793a\u9884\u6d4b\u9519\u8bef pred_correct , pred_incorrect = 0 , 0 for pred_entity in pred_entities : if pred_entity in true_entities : pred_correct += 1 continue pred_incorrect += 1 # \u8ba1\u7b97\u5171\u9884\u6d4b\u6b63\u786e\u591a\u5c11\u4e2a\u5b9e\u4f53 total_pred_correct += pred_correct # \u8ba1\u7b97\u5171\u6709\u591a\u5c11\u4e2a\u771f\u5b9e\u7684\u5b9e\u4f53 total_true_correct += true_entities_num # \u8ba1\u7b97\u7cbe\u5ea6 # \u7cbe\u786e\u7387\uff1a\u9884\u6d4b\u7ed3\u679c\u4e3a\u6b63\u4f8b\u6837\u672c\u4e2d\u771f\u5b9e\u4e3a\u6b63\u4f8b\u7684\u6bd4\u4f8b # \u53ec\u56de\u7387\uff1a\u771f\u5b9e\u4e3a\u6b63\u4f8b\u7684\u6837\u672c\u4e2d\u9884\u6d4b\u7ed3\u679c\u4e3a\u6b63\u4f8b\u7684\u6bd4\u4f8b recall = pred_correct / true_entities_num precision = pred_correct / pred_entities_num f1 = 0 if recall != 0 or precision != 0 : f1 = 2 * precision * recall / ( precision + recall ) print ( key , '\u67e5\u5168\u7387\uff1a %.3f ' % recall ) print ( key , '\u67e5\u51c6\u7387\uff1a %.3f ' % precision ) print ( key , 'f1: %.3f ' % f1 ) print ( '-' * 50 ) indicators . extend ([ recall , precision , f1 ]) print ( '\u51c6\u786e\u7387\uff1a %.3f ' % ( total_pred_correct / total_true_correct )) indicators . append ( total_pred_correct / total_true_correct ) return indicators def extract_decode ( label_list , text ): \"\"\" :param label_list: \u6a21\u578b\u8f93\u51fa\u7684\u5305\u542b\u6807\u7b7e\u5e8f\u5217\u7684\u4e00\u7ef4\u5217\u8868 :param text: \u6a21\u578b\u8f93\u5165\u7684\u53e5\u5b50 :return: \u63d0\u53d6\u5230\u7684\u5b9e\u4f53\u540d\u5b57 \"\"\" label_to_index = { \"O\" : 0 , \"B-dis\" : 1 , \"I-dis\" : 2 , \"B-sym\" : 3 , \"I-sym\" : 4 } B_DIS , I_DIS = label_to_index [ 'B-dis' ], label_to_index [ 'I-dis' ] B_SYM , I_SYM = label_to_index [ 'B-sym' ], label_to_index [ 'I-sym' ] # \u63d0\u53d6\u8fde\u7eed\u7684\u6807\u7b7e\u4ee3\u8868\u7684\u5b9e\u4f53 def extract_word ( start_index , next_label ): # index \u8868\u793a\u6700\u540e\u7d22\u5f15\u7684\u4f4d\u7f6e index , entity = start_index + 1 , [ text [ start_index ]] for index in range ( start_index + 1 , len ( label_list )): if label_list [ index ] != next_label : break entity . append ( text [ index ]) return index , '' . join ( entity ) # \u5b58\u50a8\u63d0\u53d6\u7684\u547d\u540d\u5b9e\u4f53 extract_entites , index = { 'DIS' : [], 'SYM' : []}, 0 # \u6620\u5c04\u4e0b\u4e00\u4e2a\u6301\u7eed\u7684\u6807\u7b7e next_label = { B_DIS : I_DIS , B_SYM : I_SYM } # \u6620\u5c04\u8bcd\u7684\u6240\u5c5e\u7c7b\u522b word_class = { B_DIS : 'DIS' , B_SYM : 'SYM' } while index < len ( label_list ): # \u83b7\u5f97\u5f53\u524d\u4f4d\u7f6e\u7684\u6807\u7b7e label = label_list [ index ] if label in next_label . keys (): # \u5c06\u5f53\u524d\u4f4d\u7f6e\u548c\u5bf9\u5e94\u7684\u4e0b\u4e00\u4e2a\u6301\u7eed\u6807\u7b7e\u4f20\u9012\u5230 extract_word \u51fd\u6570 index , word = extract_word ( index , next_label [ label ]) extract_entites [ word_class [ label ]] . append ( word ) continue index += 1 return extract_entites if __name__ == '__main__' : evaluate () \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/evaluate.py \u7b2c\u516d\u6b65\uff1a\u7ed8\u5236\u635f\u5931\u66f2\u7ebf\u548c\u8bc4\u4f30\u66f2\u7ebf\u56fe \u8bad\u7ec3\u548c\u9a8c\u8bc1\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf\uff1a \u5206\u6790\uff1a \u9996\u5148\uff0c\u51c6\u786e\u7387\u662f\u6307\u8bc6\u522b**\u6b63\u786e\u7684\u5b9e\u4f53**\u5360**\u8bc6\u522b\u51fa\u7684\u5b9e\u4f53**\u4e2d\u7684\u6bd4\u4f8b\u3002 \u6839\u636e\u5bf9\u7167\u66f2\u7ebf\u6765\u770b\uff0c\u6574\u4f53\u5b66\u4e60\u7ed3\u679c\u90fd\u5728\u8d8b\u4e8e\u51c6\u786e\u7387\u4e0a\u5347\u65b9\u5411\u589e\u52a0\uff0c\u800c\u4e14\u968f\u7740\u6279\u6b21\u7684\u589e\u52a0\u66f2\u7ebf\u9707\u52a8\u76f8\u5bf9\u5e73\u7a33\uff0c\u4e0d\u8fc7\u53ef\u80fd\u7531\u4e8e\u8bad\u7ec3\u4e0e\u9a8c\u8bc1\u6837\u672c\u5206\u5e03\u4e0d\u5747\u8861\u6216\u8005\u566a\u58f0\u7b49\u539f\u56e0\uff0c\u5bfc\u81f4\u6700\u7ec8\u9a8c\u8bc1\u96c6\u7684\u51c6\u786e\u5ea6\u6ca1\u6709\u8fbe\u5230\u4e0e\u8bad\u7ec3\u96c6\u76f8\u540c\u7684\u60c5\u51b5\u3002 \u6700\u7ec8\u7684\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u7684\u53ec\u56de\u7387\u5206\u522b\u5728\uff1a0.85\u548c0.78\u5de6\u53f3\u3002 \u8bad\u7ec3\u548c\u9a8c\u8bc1\u53ec\u56de\u7387\u5bf9\u7167\u66f2\u7ebf\uff1a \u5206\u6790\uff1a \u5728\u6b64\u53ec\u56de\u7387\u662f\u6307**\u8bc6\u522b\u6b63\u786e\u7684\u5b9e\u4f53**\u5360\u5f53\u524d\u6279\u6b21\u6240\u5305\u542b\u7684**\u6240\u6709\u5b9e\u4f53\u603b\u6570**\u7684\u6bd4\u4f8b\u3002 \u5173\u4e8e\u8bad\u7ec3\u548c\u9a8c\u8bc1\u53ec\u56de\u7387\u5bf9\u7167\u66f2\u7ebf\uff0c\u53ef\u4ee5\u770b\u51fa\u53ec\u56de\u7387\u7684\u53d8\u5316\u76f8\u5bf9\u6bd4\u8f83\u5e73\u6ed1\uff0c\u57fa\u672c\u4e0a\u4e5f\u572840\u6b65\u5de6\u53f3\u8d8b\u4e8e\u7a33\u5b9a\u3002 \u6700\u7ec8\u7684\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u7684\u53ec\u56de\u7387\u5206\u522b\u5728\uff1a0.83\u548c0.75\u5de6\u53f3\u3002 \u8bad\u7ec3\u548c\u9a8c\u8bc1F1\u503c\u5bf9\u7167\u66f2\u7ebf\uff1a \u5206\u6790\uff1a F1\u503c\u4e3b\u8981\u662f\u6307\u8bad\u7ec3\u6548\u679c\u800c\u8a00\uff0c\u5728\u4e0d\u591a\u8bc6\u522b\u5b9e\u4f53\u7684\u60c5\u51b5\u4e0b\u540c\u65f6\u63d0\u9ad8\u51c6\u786e\u5ea6\u7684\u8861\u91cf\u6307\u6807\u3002 \u5176\u516c\u5f0f\u4e3a\uff1a2\u00d7\u51c6\u786e\u7387\u00d7\u53ec\u56de\u7387 / (\u51c6\u786e\u7387**+**\u53ec\u56de\u7387) \u4ece\u66f2\u7ebf\u53ef\u89c1\u6574\u4f53F1\u503c\u4e0a\u5347\u4e0e\u635f\u5931\u3001\u53ec\u56de\u7387\u7684\u66f2\u7ebf\u6bd4\u8f83\u63a5\u8fd1\uff0c\u8bf4\u660e\u5728\u8bc6\u522b\u51fa\u7684\u5b9e\u4f53\u4e2d\uff0c\u6b63\u786e\u7387\u6bd4\u8f83\u95ee\u9898\uff0c\u4e0d\u8fc7\u6839\u636e\u524d\u9762\u7684\u51c6\u786e\u5ea6\u6765\u5206\u6790\uff0c\u53ef\u80fd\u5728\u8bc6\u522b\u8fc7\u7a0b\u4e2d\uff0c\u589e\u52a0\u4e86\u8bc6\u522b\u51fa\u7684\u5b9e\u4f53\u4e2a\u6570\u800c\u5bfc\u81f4\u4e0d\u7a33\u5b9a\u3002\u4ece\u8fd9\u65b9\u9762\u6765\u8bf4\uff0c\u53ef\u4ee5\u9a8c\u8bc1\u6837\u672c\u4e0d\u5747\u8861\u95ee\u9898\u4ee5\u53ca\u566a\u58f0\u5bf9\u6a21\u578b\u7684\u5f71\u54cd\u8fd8\u662f\u6bd4\u8f83\u5927\u7684\u3002 \u4ece\u6574\u4f53\u800c\u8a00\uff0cF1\u503c\u57fa\u672c\u4e5f\u5728\u7b2c40\u6b65\u4e4b\u540e\u8d8b\u4e8e\u7a33\u5b9a\uff0c\u6700\u7ec8\u7684\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u7684\u7ed3\u679c\u5728\uff1a0.85\u548c0.75\u5de6\u53f3\u3002 \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86\u6570\u636e\u9884\u5904\u7406\u7684\u76f8\u5173\u65b9\u6cd5 \u5b66\u4e60\u751f\u6210\u6279\u91cf\u8bad\u7ec3\u6570\u636e\u7684\u65b9\u6cd5 \u5b66\u4e60\u4e86\u6a21\u578b\u8bad\u7ec3\u76f8\u5173\u4ee3\u7801\u7684\u5b9e\u73b0 \u7cbe\u786e\u7387\u548c\u53ec\u56de\u7387\u8bc4\u4f30\u7684\u4ee3\u7801 \u6a21\u578b\u6784\u5efa\u7c7b\u7684\u5168\u90e8\u5185\u90e8\u51fd\u6570\u4ee3\u7801 \u542f\u52a8\u8bad\u7ec3\u6d41\u7a0b\u7684\u4ee3\u7801","title":"6.6 \u6a21\u578b\u8bad\u7ec3"},{"location":"6.html#67","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u5b9e\u4f53\u62bd\u53d6 \u5b9e\u4f53\u62bd\u53d6 import torch from transformers import BertTokenizer from bilstm_crf import NER from evaluate import extract_decode from tqdm import tqdm import os device = torch . device ( \"cuda:0\" if torch . cuda . is_available () else \"cpu\" ) def entity_extract ( text ): # \u6784\u5efa\u5206\u8bcd\u5668 tokenizer = BertTokenizer ( vocab_file = 'data/bilstm_crf_vocab_aidoc.txt' ) # \u521d\u59cb\u5316\u6a21\u578b model_param = torch . load ( 'data/BiLSTM-CRF-final.bin' ) model = NER ( ** model_param [ 'init' ]) . cuda ( device ) model . load_state_dict ( model_param [ 'state' ]) # \u6211\u4eec\u5148\u6309\u5b57\u5c06\u5176\u5206\u5f00\uff0c\u5e76\u5728\u5b57\u4e4b\u95f4\u6dfb\u52a0\u7a7a\u683c\uff0c\u4fbf\u4e8e Bert \u5206\u8bcd\u5668\u80fd\u591f\u51c6\u786e\u6309\u5b57\u5206\u5272 input_text = ' ' . join ( list ( text )) model_inputs = tokenizer . encode ( input_text , add_special_tokens = False , return_tensors = 'pt' )[ 0 ] model_inputs = model_inputs . to ( device ) with torch . no_grad (): outputs = model . predict ( model_inputs ) return extract_decode ( outputs , '' . join ( input_text . split ())) def batch_entity_extract ( data_path ): for fn in tqdm ( os . listdir ( data_path )): # \u62fc\u88c5\u5168\u8def\u5f84 fullpath = os . path . join ( data_path , fn ) # \u5b9a\u4e49\u8f93\u51fa\u7ed3\u679c\u6587\u4ef6 entities_file = open ( os . path . join ( prediction_result_path , fn . replace ( 'txt' , 'csv' )), mode = 'w' , encoding = 'utf8' ) with open ( fullpath , mode = 'r' , encoding = 'utf8' ) as f : # \u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9 text = f . readline () # \u8c03\u7528\u5355\u4e2a\u9884\u6d4b\u6a21\u578b\uff0c\u8f93\u51fa\u4e3a\u76ee\u6807\u52b3\u7d2f\u578b\u5b9e\u4f53\u6587\u672c\u5217\u8868 entities = entity_extract ( text ) print ( entities ) # \u5199\u5165\u8bc6\u522b\u7ed3\u679c\u6587\u4ef6 entities_file . write ( \" \\n \" . join ( entities )) print ( 'batch_predict Finished' . center ( 100 , '-' )) if __name__ == '__main__' : batch_entity_extract ( 'data/unstructured/norecognite' ) # text = \"\u672c\u75c5\u662f\u7531DNA\u75c5\u6bd2\u7684\u5355\u7eaf\u75b1\u75b9\u75c5\u6bd2\u6240\u81f4\u3002\u4eba\u7c7b\u5355\u7eaf\u75b1\u75b9\u75c5\u6bd2\u5206\u4e3a\u4e24\u578b\uff0c\" \\ # \"\u5373\u5355\u7eaf\u75b1\u75b9\u75c5\u6bd2\u2160\u578b\uff08HSV-\u2160\uff09\u548c\u5355\u7eaf\u75b1\u75b9\u75c5\u6bd2\u2161\u578b\uff08HSV-\u2161\uff09\u3002\" \\ # \"\u2160\u578b\u4e3b\u8981\u5f15\u8d77\u751f\u6b96\u5668\u4ee5\u5916\u7684\u76ae\u80a4\u9ecf\u819c\uff08\u53e3\u8154\u9ecf\u819c\uff09\u548c\u5668\u5b98\uff08\u8111\uff09\u7684\u611f\u67d3\u3002\" \\ # \"\u2161\u578b\u4e3b\u8981\u5f15\u8d77\u751f\u6b96\u5668\u90e8\u4f4d\u76ae\u80a4\u9ecf\u819c\u611f\u67d3\u3002\" \\ # \"\u75c5\u6bd2\u7ecf\u547c\u5438\u9053\u3001\u53e3\u8154\u3001\u751f\u6b96\u5668\u9ecf\u819c\u4ee5\u53ca\u7834\u635f\u76ae\u80a4\u8fdb\u5165\u4f53\u5185\uff0c\" \\ # \"\u6f5c\u5c45\u4e8e\u4eba\u4f53\u6b63\u5e38\u9ecf\u819c\u3001\u8840\u6db2\u3001\u553e\u6db2\u53ca\u611f\u89c9\u795e\u7ecf\u8282\u7ec6\u80de\u5185\u3002\" \\ # \"\u5f53\u673a\u4f53\u62b5\u6297\u529b\u4e0b\u964d\u65f6\uff0c\u5982\u53d1\u70ed\u80c3\u80a0\u529f\u80fd\u7d0a\u4e71\u3001\u6708\u7ecf\u3001\u75b2\u52b3\u7b49\u65f6\uff0c\" \\ # \"\u4f53\u5185\u6f5c\u4f0f\u7684HSV\u88ab\u6fc0\u6d3b\u800c\u53d1\u75c5\u3002\" # result = entity_extract(text) # print(result) \u4ee3\u7801\u5b9e\u73b0\u4f4d\u7f6e\uff1a/data/doctor_offline/ner_model/entity_extract.py \u8f93\u51fa\u6548\u679c\uff1a\u5c06\u8bc6\u522b\u7ed3\u679c\u4fdd\u5b58\u81f3prediction_result_path\u6307\u5b9a\u7684\u76ee\u5f55\u4e0b\uff0c\u540d\u79f0\u4e0e\u6e90\u6587\u4ef6\u4e00\u81f4\uff0c\u5185\u5bb9\u4e3a\u6bcf\u884c\u5b58\u50a8\u8bc6\u522b\u5b9e\u4f53\u540d\u79f0","title":"6.7 \u6a21\u578b\u4f7f\u7528"},{"location":"7.html","text":"7.1 \u5728\u7ebf\u90e8\u5206\u7b80\u8981\u5206\u6790 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u5728\u7ebf\u90e8\u5206\u7684\u6838\u5fc3\u7ec4\u6210\u3002 \u4e86\u89e3\u5404\u4e2a\u6838\u5fc3\u7ec4\u6210\u90e8\u5206\u7684\u4f5c\u7528\u3002 \u5728\u7ebf\u90e8\u5206\u67b6\u6784\u56fe\uff1a \u5728\u7ebf\u90e8\u5206\u7b80\u8981\u5206\u6790\uff1a \u6839\u636e\u67b6\u6784\u56fe\uff0c\u5728\u7ebf\u90e8\u5206\u7684\u6838\u5fc3\u7531\u4e09\u4e2a\u670d\u52a1\u7ec4\u6210\uff0c\u5206\u522b\u662fwerobot\u670d\u52a1\uff0c\u4e3b\u8981\u903b\u8f91\u670d\u52a1\uff0c\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u3002\u8fd9\u4e09\u4e2a\u670d\u52a1\u8d2f\u7a7f\u8fde\u63a5\u6574\u4e2a\u5728\u7ebf\u90e8\u5206\u7684\u5404\u4e2a\u6a21\u5757\u3002 werobot\u670d\u52a1\u4f5c\u7528\uff1a \u7528\u4e8e\u8fde\u63a5\u5fae\u4fe1\u5ba2\u6237\u7aef\u4e0e\u540e\u7aef\u670d\u52a1\uff0c\u5411\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u53d1\u9001\u7528\u6237\u8bf7\u6c42\uff0c\u5e76\u63a5\u6536\u7ed3\u6784\u8fd4\u56de\u7ed9\u7528\u6237\u3002 \u4e3b\u8981\u903b\u8f91\u670d\u52a1\u4f5c\u7528\uff1a \u7528\u4e8e\u5904\u7406\u6838\u5fc3\u4e1a\u52a1\u903b\u8f91\uff0c\u5305\u62ec\u4f1a\u8bdd\u7ba1\u7406\uff0c\u8bf7\u6c42\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\uff0c\u67e5\u8be2\u56fe\u6570\u636e\u5e93\uff0c\u8c03\u7528Unit API\u7b49\u3002 \u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\uff1a \u7528\u4e8e\u5c01\u88c5\u8bad\u7ec3\u597d\u7684\u53e5\u5b50\u76f8\u5173\u5224\u65ad\u6a21\u578b\uff0c\u63a5\u6536\u6765\u81ea\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u8bf7\u6c42\uff0c\u8fd4\u56de\u5224\u65ad\u7ed3\u679c\u3002 7.2 werobot\u670d\u52a1\u6784\u5efa \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u638c\u63e1werobot\u670d\u52a1\u7684\u6784\u5efa\u8fc7\u7a0b\u3002 werobot\u670d\u52a1\u7684\u6784\u5efa\u8fc7\u7a0b\u53ef\u5206\u4e3a\u56db\u6b65\uff1a \u7b2c\u4e00\u6b65\uff1a\u83b7\u53d6\u670d\u52a1\u5668\u516c\u7f51IP \u7b2c\u4e8c\u6b65\uff1a\u914d\u7f6e\u5fae\u4fe1\u516c\u4f17\u53f7 \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528werobot\u542f\u52a8\u670d\u52a1\u811a\u672c \u7b2c\u56db\u6b65\uff1a\u4f7f\u7528\u5fae\u4fe1\u516c\u4f17\u53f7\u8fdb\u884c\u6d4b\u8bd5 \u7b2c\u4e00\u6b65\uff1a\u83b7\u53d6\u670d\u52a1\u5668\u516c\u7f51IP \u767b\u9646\u963f\u91cc\u4e91\u5b98\u7f51( https://www.aliyun.com/product/ecs ): \u8fdb\u884c\u57fa\u672c\u914d\u7f6e\uff0c\u9009\u62e9\u6240\u5728\u5730\u57df\uff0c\u5b9e\u4f8b\u7c7b\u578b\uff0c\u955c\u50cf\uff0c\u5b58\u50a8\uff0c\u8d2d\u4e70\u65f6\u957f \u9009\u62e9\u7f51\u7edc\u548c\u5b89\u5168\u7ec4(\u9ed8\u8ba4\u914d\u7f6e) \u8bbe\u7f6e\u5bc6\u7801\uff0c\u5b9e\u4f8b\u540d\u79f0\uff0c\u4e3b\u673a\u540d \u914d\u7f6e\u5206\u7ec4\u8bbe\u7f6e(\u9ed8\u8ba4\u914d\u7f6e) \u786e\u8ba4\u8ba2\u5355\u5e76\u652f\u4ed8 \u67e5\u770b\u670d\u52a1\u5668\u516c\u7f51IP \u7b2c\u4e8c\u6b65\uff1a\u4f7f\u7528\u516c\u7f51IP\u914d\u7f6e\u5fae\u4fe1\u516c\u4f17\u53f7 \u6ce8\u518c\u5fae\u4fe1\u8ba2\u9605\u53f7( https://mp.weixin.qq.com ), \u5e76\u5728\u57fa\u672c\u914d\u7f6e\u4e2d\u8fdb\u884cURL\u548cToken\u7684\u8bbe\u5b9a \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528werobot\u542f\u52a8\u670d\u52a1\u811a\u672c \u5b89\u88c5werobot pip install werobot \u8fdb\u884c\u542f\u52a8\u811a\u672c\u7684\u7f16\u5199 # \u5bfc\u5165werobot\u548c\u53d1\u9001\u8bf7\u6c42\u7684requests import werobot import requests # \u4e3b\u8981\u903b\u8f91\u670d\u52a1\u8bf7\u6c42\u5730\u5740 url = \"http://161.117.187.37:5000/v1/main_serve/\" # \u670d\u52a1\u8d85\u65f6\u65f6\u95f4 TIMEOUT = 3 # \u58f0\u660e\u5fae\u4fe1\u8bbf\u95ee\u8bf7\u6c42\u3010\u6846\u67b6\u5c06\u8f85\u52a9\u5b8c\u6210\u5fae\u4fe1\u8054\u901a\u9a8c\u8bc1\u3011 robot = werobot . WeRoBot ( token = \"doctoraitoken\" ) # \u8bbe\u7f6e\u6240\u6709\u8bf7\u6c42\uff08\u5305\u542b\u6587\u672c\u3001\u8bed\u97f3\u3001\u56fe\u7247\u7b49\u6d88\u606f\uff09\u5165\u53e3 @robot . handler def doctor ( message , session ): try : # \u83b7\u5f97\u7528\u6237uid uid = message . source try : # \u68c0\u67e5session\uff0c\u5224\u65ad\u8be5\u7528\u6237\u662f\u5426\u7b2c\u4e00\u6b21\u53d1\u8a00 # \u521d\u59cbsession\u4e3a{} # \u5982\u679csession\u4e2d\u6ca1\u6709{uid:\"1\"} if session . get ( uid , None ) != \"1\" : # \u5c06\u6dfb\u52a0{uid:\"1\"} session [ uid ] = \"1\" # \u5e76\u8fd4\u56de\u6253\u62db\u547c\u7528\u8bed return '\u60a8\u597d\uff0c\u6211\u662f\u667a\u80fd\u5ba2\u670d\u5c0f\u827e\uff0c\u6709\u4ec0\u4e48\u9700\u8981\u5e2e\u5fd9\u7684\u5417?' # \u83b7\u53d6message\u4e2d\u7684\u7528\u6237\u53d1\u8a00\u5185\u5bb9 text = message . content except : # \u8fd9\u91cc\u4f7f\u7528try...except\u662f\u56e0\u4e3a\u6211\u7528\u6237\u5f88\u53ef\u80fd\u51fa\u73b0\u53d6\u6d88\u5173\u6ce8\u53c8\u91cd\u65b0\u5173\u6ce8\u7684\u73b0\u8c61 # \u6b64\u65f6\u901a\u8fc7session\u5224\u65ad\uff0c\u8be5\u7528\u6237\u5e76\u4e0d\u662f\u7b2c\u4e00\u6b21\u53d1\u8a00\uff0c\u4f1a\u83b7\u53d6message.content # \u4f46\u7528\u6237\u5176\u5b9e\u53c8\u6ca1\u6709\u8bf4\u8bdd\uff0c\u83b7\u53d6message.content\u65f6\u4f1a\u62a5\u9519 # \u8be5\u60c5\u51b5\u4e5f\u662f\u76f4\u63a5\u8fd4\u56de\u6253\u62db\u547c\u7528\u8bed return '\u60a8\u597d\uff0c\u6211\u662f\u667a\u80fd\u5ba2\u670d\u5c0f\u827e\uff0c\u6709\u4ec0\u4e48\u9700\u8981\u5e2e\u5fd9\u7684\u5417 ?' # \u83b7\u5f97\u53d1\u9001\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u6570\u636e\u4f53 data = { \"uid\" : uid , \"text\" : text } # \u5411\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u53d1\u9001post\u8bf7\u6c42 res = requests . post ( url , data = data , timeout = TIMEOUT ) # \u8fd4\u56de\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u7ed3\u679c return res . text except Exception as e : print ( \"\u51fa\u73b0\u5f02\u5e38\uff1a\" , e ) return \"\u5bf9\u4e0d\u8d77\uff0c\u673a\u5668\u4eba\u5ba2\u670d\u6b63\u5728\u4f11\u606f\u3002..\" # \u8ba9\u670d\u52a1\u5668\u76d1\u542c\u5728 0.0.0.0:80 robot . config [ \"HOST\" ] = \"0.0.0.0\" robot . config [ \"PORT\" ] = 80 robot . run () # \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/wr.py * \u542f\u52a8\u670d\u52a1\u811a\u672c ```shell python /data/wr.py # \u4e5f\u53ef\u4ee5\u4f7f\u7528gunicorn\u542f\u52a8\u8be5\u811a\u672c gunicorn -w 1 wr:robot.wsgi ``` \u7b2c\u56db\u6b65\uff1a\u4f7f\u7528\u5fae\u4fe1\u8fdb\u884c\u6d4b\u8bd5 \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86werobot\u670d\u52a1\u7684\u6784\u5efa\u8fc7\u7a0b\uff1a \u7b2c\u4e00\u6b65\uff1a\u83b7\u53d6\u670d\u52a1\u5668\u516c\u7f51IP \u7b2c\u4e8c\u6b65\uff1a\u914d\u7f6e\u5fae\u4fe1\u516c\u4f17\u53f7 \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528werobot\u542f\u52a8\u670d\u52a1\u811a\u672c \u7b2c\u56db\u6b65\uff1a\u4f7f\u7528\u5fae\u4fe1\u516c\u4f17\u53f7\u8fdb\u884c\u6d4b\u8bd5 7.3 \u4e3b\u8981\u903b\u8f91\u670d\u52a1 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u8be5\u670d\u52a1\u4e2d\u7684\u4e3b\u8981\u903b\u8f91\u3002 \u638c\u63e1\u6784\u5efa\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u8fc7\u7a0b\u3002 \u4e3b\u8981\u903b\u8f91\u56fe\uff1a \u903b\u8f91\u56fe\u5206\u6790\uff1a \u4e3b\u8981\u903b\u8f91\u670d\u52a1\u63a5\u6536werobot\u53d1\u9001\u7684\u8bf7\u6c42\u540e\uff0c\u6839\u636e\u7528\u6237id\u67e5\u8be2redis\u67e5\u627e\u7528\u6237\u4e0a\u4e00\u6b21\u8bf4\u8fc7\u7684\u8bdd\uff0c\u6839\u636e\u7ed3\u679c\u5224\u65ad\u662f\u5426\u4e3a\u4ed6\u7684\u7b2c\u4e00\u53e5\u3002 \u5982\u679c\u662f\u7b2c\u4e00\u53e5\u8bdd\uff0c\u76f4\u63a5\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u5224\u65ad\u53e5\u5b50\u4e2d\u662f\u5426\u5305\u542b\u75c7\u72b6\u5b9e\u4f53\uff0c\u5e76\u8fd4\u56de\u8be5\u75c7\u72b6\u8fde\u63a5\u7684\u75be\u75c5\uff0c\u5e76\u586b\u5145\u5728\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u4e2d\uff0c\u5982\u679c\u67e5\u8be2\u4e0d\u5230\u5219\u8c03\u7528Unit API\u8fd4\u56de\u7ed3\u679c\u3002 \u5982\u679c\u4e0d\u662f\u8be5\u7528\u6237\u7684\u7b2c\u4e00\u53e5\u8bdd\uff0c\u5219\u8fde\u540c\u4e0a\u4e00\u53e5\u8bdd\u7684\u5185\u5bb9\u4e00\u8d77\u8bf7\u6c42\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\uff0c\u5224\u65ad\u4e24\u53e5\u8bdd\u662f\u5426\u8ba8\u8bba\u540c\u4e00\u4e3b\u9898\uff0c\u5982\u679c\u662f\uff0c\u5219\u7ee7\u7eed\u67e5\u8be2\u56fe\u6570\u636e\u5e93\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u4f7f\u7528unit api\u8fd4\u56de\u7ed3\u679c\u3002 \u6784\u5efa\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u5bfc\u5165\u5fc5\u5907\u5de5\u5177\u548c\u914d\u7f6e \u7b2c\u4e8c\u6b65\uff1a\u5b8c\u6210\u67e5\u8be2neo4j\u6570\u636e\u5e93\u7684\u51fd\u6570 \u7b2c\u4e09\u6b65\uff1a\u7f16\u5199\u4e3b\u8981\u903b\u8f91\u5904\u7406\u7c7b \u7b2c\u56db\u6b65\uff1a\u7f16\u5199\u670d\u52a1\u4e2d\u7684\u4e3b\u51fd\u6570 \u7b2c\u4e94\u6b65\uff1a\u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1 \u7b2c\u516d\u6b65\uff1a\u7f16\u5199\u6d4b\u8bd5\u811a\u672c\u5e76\u8fdb\u884c\u6d4b\u8bd5\uff1a \u7b2c\u4e00\u6b65\uff1a\u5bfc\u5165\u5fc5\u5907\u5de5\u5177\u548c\u914d\u7f6e \u00b6 # \u670d\u52a1\u6846\u67b6\u4f7f\u7528Flask # \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177 from flask import Flask from flask import request app = Flask ( __name__ ) # \u5bfc\u5165\u53d1\u9001http\u8bf7\u6c42\u7684requests\u5de5\u5177 import requests # \u5bfc\u5165\u64cd\u4f5credis\u6570\u636e\u5e93\u7684\u5de5\u5177 import redis # \u5bfc\u5165\u52a0\u8f7djson\u6587\u4ef6\u7684\u5de5\u5177 import json # \u5bfc\u5165\u5df2\u5199\u597d\u7684Unit API\u8c03\u7528\u6587\u4ef6 from unit import unit_chat # \u5bfc\u5165\u64cd\u4f5cneo4j\u6570\u636e\u5e93\u7684\u5de5\u5177 from neo4j import GraphDatabase # \u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u5bfc\u5165\u9700\u8981\u7684\u914d\u7f6e # NEO4J\u7684\u8fde\u63a5\u914d\u7f6e from config import NEO4J_CONFIG # REDIS\u7684\u8fde\u63a5\u914d\u7f6e from config import REDIS_CONFIG # \u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u7684\u8bf7\u6c42\u5730\u5740 from config import model_serve_url # \u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u7684\u8d85\u65f6\u65f6\u95f4 from config import TIMEOUT # \u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u7684\u52a0\u8f7d\u8def\u5f84 from config import reply_path # \u7528\u6237\u5bf9\u8bdd\u4fe1\u606f\u4fdd\u5b58\u7684\u8fc7\u671f\u65f6\u95f4 from config import ex_time # \u5efa\u7acbREDIS\u8fde\u63a5\u6c60 pool = redis . ConnectionPool ( ** REDIS_CONFIG ) # \u521d\u59cb\u5316NEO4J\u9a71\u52a8\u5bf9\u8c61 _driver = GraphDatabase . driver ( ** NEO4J_CONFIG ) \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/main_serve/app.py \u914d\u7f6e\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a REDIS_CONFIG = { \"host\" : \"0.0.0.0\" , \"port\" : 6379 } NEO4J_CONFIG = { \"uri\" : \"bolt://0.0.0.0:7687\" , \"auth\" : ( \"neo4j\" , \"********\" ), \"encrypted\" : False } model_serve_url = \"http://0.0.0.0:5001/v1/recognition/\" TIMEOUT = 2 reply_path = \"./reply.json\" ex_time = 36000 \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/main_serve/config.py \u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u6587\u4ef6reply.json\u5185\u5bb9\u5982\u4e0b\uff1a { \"1\": \"\u4eb2\u7231\u7684\u7528\u6237\uff0c\u5728\u7ebf\u533b\u751f\u4e00\u4e2a\u533b\u60a3\u95ee\u7b54\u673a\u5668\u4eba\uff0c\u8bf7\u60a8\u8bf4\u4e00\u4e9b\u5f53\u524d\u7684\u75c7\u72b6\u5427\uff01\", \"2\": \"\u6839\u636e\u60a8\u5f53\u524d\u7684\u75c7\u72b6\u63cf\u8ff0\uff0c\u60a8\u53ef\u80fd\u60a3\u6709\u4ee5\u4e0b\u75be\u75c5\uff0c%s, \u518d\u60f3\u60f3\u8fd8\u6709\u66f4\u591a\u7684\u75c7\u72b6\u5417?\", \"3\": \"\u5bf9\u4e0d\u8d77\uff0c\u60a8\u6240\u8bf4\u7684\u5185\u5bb9\u8d85\u51fa\u4e86\u5728\u7ebf\u533b\u751f\u7684\u77e5\u8bc6\u8303\u56f4\u3002\u8bf7\u5c1d\u8bd5\u6362\u4e00\u4e9b\u63cf\u8ff0\u65b9\u5f0f\uff01\", \"4\": \"\u60a8\u7684\u8fd9\u6b21\u63cf\u8ff0\u5e76\u6ca1\u6709\u7ed9\u6211\u5e26\u6765\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u60a8\u7ee7\u7eed\u63cf\u8ff0\u60a8\u7684\u75c7\u72b6\u3002\" } \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/main_serve/reply.json \u7b2c\u4e8c\u6b65\uff1a\u5b8c\u6210\u67e5\u8be2neo4j\u6570\u636e\u5e93\u7684\u51fd\u6570 \u00b6 def query_neo4j ( text ): \"\"\" description: \u6839\u636e\u7528\u6237\u5bf9\u8bdd\u6587\u672c\u4e2d\u7684\u53ef\u80fd\u5b58\u5728\u7684\u75c7\u72b6\u67e5\u8be2\u56fe\u6570\u636e\u5e93\u3002 :param text: \u7528\u6237\u7684\u8f93\u5165\u6587\u672c\u3002 :return: \u7528\u6237\u63cf\u8ff0\u7684\u75c7\u72b6\u5bf9\u5e94\u7684\u75be\u75c5\u5217\u8868\u3002 \"\"\" # \u5f00\u542f\u4e00\u4e2asession\u64cd\u4f5c\u56fe\u6570\u636e\u5e93 with _driver . session () as session : # cypher\u8bed\u53e5\uff0c\u5339\u914d\u53e5\u5b50\u4e2d\u5b58\u5728\u7684\u6240\u6709\u75c7\u72b6\u8282\u70b9\uff0c # \u4fdd\u5b58\u8fd9\u4e9b\u8282\u70b9\u5e76\u9010\u4e00\u901a\u8fc7\u5173\u7cfbdis_to_sym\u8fdb\u884c\u5bf9\u5e94\u75c5\u75c7\u7684\u67e5\u627e\uff0c\u8fd4\u56de\u627e\u5230\u7684\u75be\u75c5\u540d\u5b57\u5217\u8868\u3002 cypher = \"MATCH(a:Symptom) WHERE( %r contains a.name) WITH \\ a MATCH(a)-[r:dis_to_sym]-(b:Disease) RETURN b.name LIMIT 5\" % text # \u8fd0\u884c\u8fd9\u6761cypher\u8bed\u53e5 record = session . run ( cypher ) # \u4ecerecord\u5bf9\u8c61\u4e2d\u83b7\u5f97\u7ed3\u679c\u5217\u8868 result = list ( map ( lambda x : x [ 0 ], record )) return result \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/main_serve/app.py \u8c03\u7528\uff1a if __name__ == \"__main__\": text = \"\u6211\u6700\u8fd1\u8179\u75db!\" result = query_neo4j(text) print(\"\u75be\u75c5\u5217\u8868\uff1a\", result) \u8f93\u51fa\u6548\u679c\uff1a \u75be\u75c5\u5217\u8868\uff1a['\u80c3\u80a0\u9053\u764c\u8f6c\u79fb\u5375\u5de2', '\u80c3\u80a0\u9053\u529f\u80fd\u7d0a\u4e71', '\u80c3\u80a0\u79ef\u6db2', '\u80c3\u80a0\u578b\u98df\u7269\u4e2d\u6bd2', '\u80c3\u7ed3\u6838'] \u7b2c\u4e09\u6b65\uff1a\u7f16\u5199\u4e3b\u8981\u903b\u8f91\u5904\u7406\u7c7b \u00b6 class Handler ( object ): \"\"\"\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u5904\u7406\u7c7b\"\"\" def __init__ ( self , uid , text , r , reply ): \"\"\" :param uid: \u7528\u6237\u552f\u4e00\u6807\u793auid :param text: \u8be5\u7528\u6237\u672c\u6b21\u8f93\u5165\u7684\u6587\u672c :param r: redis\u6570\u636e\u5e93\u7684\u8fde\u63a5\u5bf9\u8c61 :param reply: \u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u52a0\u8f7d\u5230\u5185\u5b58\u7684\u5bf9\u8c61(\u5b57\u5178) \"\"\" self . uid = uid self . text = text self . r = r self . reply = reply def non_first_sentence ( self , previous ): \"\"\" description: \u975e\u9996\u53e5\u5904\u7406\u51fd\u6570 :param previous: \u8be5\u7528\u6237\u5f53\u524d\u53e5(\u8f93\u5165\u6587\u672c)\u7684\u4e0a\u4e00\u53e5\u6587\u672c :return: \u6839\u636e\u903b\u8f91\u56fe\u8fd4\u56de\u975e\u9996\u53e5\u60c5\u51b5\u4e0b\u7684\u8f93\u51fa\u8bed\u53e5 \"\"\" # \u5c1d\u8bd5\u8bf7\u6c42\u6a21\u578b\u670d\u52a1\uff0c\u82e5\u5931\u8d25\u5219\u6253\u5370\u9519\u8bef\u7ed3\u679c try : data = { \"text1\" : previous , \"text2\" : self . text } result = requests . post ( model_serve_url , data = data , timeout = TIMEOUT ) if not result . text : return unit_chat ( self . text ) except Exception as e : print ( \"\u6a21\u578b\u670d\u52a1\u5f02\u5e38\uff1a\" , e ) return unit_chat ( self . text ) # \u7ee7\u7eed\u67e5\u8be2\u56fe\u6570\u636e\u5e93\uff0c\u5e76\u83b7\u5f97\u7ed3\u679c s = query_neo4j ( self . text ) # \u5224\u65ad\u7ed3\u679c\u4e3a\u7a7a\u5217\u8868\uff0c\u5219\u76f4\u63a5\u4f7f\u7528UnitAPI\u8fd4\u56de if not s : return unit_chat ( self . text ) # \u82e5\u7ed3\u679c\u4e0d\u4e3a\u7a7a\uff0c\u83b7\u53d6\u4e0a\u4e00\u6b21\u5df2\u56de\u590d\u7684\u75be\u75c5old_disease old_disease = self . r . hget ( str ( self . uid ), \"previous_d\" ) if old_disease : # new_disease\u662f\u672c\u6b21\u9700\u8981\u5b58\u50a8\u7684\u75be\u75c5\uff0c\u662f\u5df2\u7ecf\u5b58\u50a8\u7684\u75be\u75c5\u4e0e\u672c\u6b21\u67e5\u8be2\u5230\u75be\u75c5\u7684\u5e76\u96c6 new_disease = list ( set ( s ) | set ( eval ( old_disease ))) # res\u662f\u9700\u8981\u8fd4\u56de\u7684\u75be\u75c5\uff0c\u662f\u672c\u6b21\u67e5\u8be2\u5230\u7684\u75be\u75c5\u4e0e\u5df2\u7ecf\u5b58\u50a8\u7684\u75be\u75c5\u7684\u5dee\u96c6 res = list ( set ( s ) - set ( eval ( old_disease ))) else : # \u5982\u679cold_disease\u4e3a\u7a7a\uff0c\u5219\u5b83\u4eec\u76f8\u540c\u90fd\u662f\u672c\u6b21\u67e5\u8be2\u7ed3\u679cs res = new_disease = list ( set ( s )) # \u5b58\u50a8new_disease\u8986\u76d6\u4e4b\u524d\u7684old_disease self . r . hset ( str ( self . uid ), \"previous_d\" , str ( new_disease )) # \u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4 self . r . expire ( str ( self . uid ), ex_time ) # \u5c06\u5217\u8868\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u6dfb\u52a0\u5230\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u4e2d\u8fd4\u56de if not res : return self . reply [ \"4\" ] else : res = \",\" . join ( res ) return self . reply [ \"2\" ] % res def first_sentence ( self ): \"\"\"\u9996\u53e5\u5904\u7406\u51fd\u6570\"\"\" # \u76f4\u63a5\u67e5\u8be2\u56fe\u6570\u636e\u5e93\uff0c\u5e76\u83b7\u5f97\u7ed3\u679c s = query_neo4j ( self . text ) # \u5224\u65ad\u7ed3\u679c\u4e3a\u7a7a\u5217\u8868\uff0c\u5219\u76f4\u63a5\u4f7f\u7528UnitAPI\u8fd4\u56de if not s : return unit_chat ( self . text ) # \u5c06s\u5b58\u50a8\u4e3a\"\u4e0a\u4e00\u6b21\u8fd4\u56de\u7684\u75be\u75c5\" self . r . hset ( str ( self . uid ), \"previous_d\" , str ( s )) # \u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4 self . r . expire ( str ( self . uid ), ex_time ) # \u5c06\u5217\u8868\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u6dfb\u52a0\u5230\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u4e2d\u8fd4\u56de res = \",\" . join ( s ) return self . reply [ \"2\" ] % res \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/main_serve/app.py \u7b2c\u56db\u6b65\uff1a\u7f16\u5199\u670d\u52a1\u4e2d\u7684\u4e3b\u51fd\u6570 \u00b6 # \u8bbe\u5b9a\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u8def\u7531\u548c\u8bf7\u6c42\u65b9\u6cd5 @app . route ( '/v1/main_serve/' , methods = [ \"POST\" ]) def main_serve (): # \u63a5\u6536\u6765\u81eawerobot\u670d\u52a1\u7684\u5b57\u6bb5 uid = request . form [ 'uid' ] text = request . form [ 'text' ] # \u4eceredis\u8fde\u63a5\u6c60\u4e2d\u83b7\u5f97\u4e00\u4e2a\u6d3b\u8dc3\u8fde\u63a5 r = redis . StrictRedis ( connection_pool = pool ) # \u6839\u636e\u8be5uid\u83b7\u53d6\u4ed6\u7684\u4e0a\u4e00\u53e5\u8bdd(\u53ef\u80fd\u4e0d\u5b58\u5728) previous = r . hget ( str ( uid ), \"previous\" ) # \u5c06\u5f53\u524d\u8f93\u5165\u7684\u6587\u672c\u8bbe\u7f6e\u6210\u4e0a\u4e00\u53e5 r . hset ( str ( uid ), \"previous\" , text ) # \u8bfb\u53d6\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u5185\u5bb9\u5230\u5185\u5b58 reply = json . load ( open ( reply_path , \"r\" )) # \u5b9e\u4f8b\u5316\u4e3b\u8981\u903b\u8f91\u5904\u7406\u5bf9\u8c61 handler = Handler ( uid , text , r , reply ) # \u5982\u679cprevious\u5b58\u5728\uff0c\u8bf4\u660e\u4e0d\u662f\u7b2c\u4e00\u53e5\u8bdd if previous : # \u8c03\u7528non_first_sentence\u65b9\u6cd5 return handler . non_first_sentence ( previous ) else : # \u5426\u5219\u8c03\u7528first_sentence()\u65b9\u6cd5 return handler . first_sentence () \u7b2c\u4e94\u6b65\uff1a\u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1 \u00b6 gunicorn - w 1 - b 0.0.0.0 : 5000 app : app # -w \u4ee3\u8868\u5f00\u542f\u7684\u8fdb\u7a0b\u6570\uff0c\u6211\u4eec\u53ea\u5f00\u542f\u4e00\u4e2a\u8fdb\u7a0b # -b \u670d\u52a1\u7684IP\u5730\u5740\u548c\u7aef\u53e3 # app:app \u662f\u6307\u6267\u884c\u7684\u4e3b\u8981\u5bf9\u8c61\u4f4d\u7f6e\uff0c\u5728app.py\u4e2d\u7684app\u5bf9\u8c61 \u4ee3\u7801\u4f4d\u7f6e\uff1a\u5728/data/doctor_online/main_serve/\u8def\u5f84\u4e0b\u6267\u884c\u3002 \u7b2c\u516d\u6b65\uff1a\u7f16\u5199\u6d4b\u8bd5\u811a\u672c\u5e76\u8fdb\u884c\u6d4b\u8bd5 \u00b6 \u7f16\u5199\u6d4b\u8bd5\u811a\u672c\uff1a import requests # \u5b9a\u4e49\u8bf7\u6c42url\u548c\u4f20\u5165\u7684data url = \"http://0.0.0.0:5000/v1/main_serve/\" data = { \"uid\" : \"13424\" , \"text\" : \"\u5934\u6655\" } # \u5411\u670d\u52a1\u53d1\u9001post\u8bf7\u6c42 res = requests . post ( url , data = data ) # \u6253\u5370\u8fd4\u56de\u7684\u7ed3\u679c print ( res . text ) \u8fd0\u884c\u811a\u672c\uff1a python test.py \u8f93\u51fa\u6548\u679c\uff1a \u6839\u636e\u60a8\u5f53\u524d\u7684\u75c7\u72b6\u63cf\u8ff0\uff0c\u60a8\u53ef\u80fd\u60a3\u6709\u4ee5\u4e0b\u75be\u75c5\uff0c\u4e2d\u6bd2\uff0c\u866b\u5a92\u4f20\u67d3\u75c5\uff0c\u5c0f\u513f\u80a5\u539a\u578b\u5fc3\u808c\u75c5\uff0c\u8840\u7ea2\u86cb\u767dE\u75c5\uff0c\u94cd\u4e2d\u6bd2\uff0c\u518d\u60f3\u60f3\u8fd8\u6709\u66f4\u591a\u7684\u75c7\u72b6\u5417? \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86\u670d\u52a1\u7684\u4e3b\u8981\u903b\u8f91\uff1a \u4e3b\u8981\u903b\u8f91\u670d\u52a1\u63a5\u6536werobot\u53d1\u9001\u7684\u8bf7\u6c42\u540e\uff0c\u6839\u636e\u7528\u6237id\u67e5\u8be2redis\u67e5\u627e\u7528\u6237\u4e0a\u4e00\u6b21\u8bf4\u8fc7\u7684\u8bdd\uff0c\u6839\u636e\u7ed3\u679c\u5224\u65ad\u662f\u5426\u4e3a\u4ed6\u7684\u7b2c\u4e00\u53e5\u3002 \u5982\u679c\u662f\u7b2c\u4e00\u53e5\u8bdd\uff0c\u76f4\u63a5\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u5224\u65ad\u53e5\u5b50\u4e2d\u662f\u5426\u5305\u542b\u75c7\u72b6\u5b9e\u4f53\uff0c\u5e76\u8fd4\u56de\u8be5\u75c7\u72b6\u8fde\u63a5\u7684\u75be\u75c5\uff0c\u5e76\u586b\u5145\u5728\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u4e2d\uff0c\u5982\u679c\u67e5\u8be2\u4e0d\u5230\u5219\u8c03\u7528Unit API\u8fd4\u56de\u7ed3\u679c\u3002 \u5982\u679c\u4e0d\u662f\u8be5\u7528\u6237\u7684\u7b2c\u4e00\u53e5\u8bdd\uff0c\u5219\u8fde\u540c\u4e0a\u4e00\u53e5\u8bdd\u7684\u5185\u5bb9\u4e00\u8d77\u8bf7\u6c42\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\uff0c\u5224\u65ad\u4e24\u53e5\u8bdd\u662f\u5426\u8ba8\u8bba\u540c\u4e00\u4e3b\u9898\uff0c\u5982\u679c\u662f\uff0c\u5219\u7ee7\u7eed\u67e5\u8be2\u56fe\u6570\u636e\u5e93\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u4f7f\u7528unit api\u8fd4\u56de\u7ed3\u679c\u3002 \u6784\u5efa\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u5bfc\u5165\u5fc5\u5907\u5de5\u5177\u548c\u914d\u7f6e \u7b2c\u4e8c\u6b65\uff1a\u5b8c\u6210\u67e5\u8be2neo4j\u6570\u636e\u5e93\u7684\u51fd\u6570 \u7b2c\u4e09\u6b65\uff1a\u7f16\u5199\u4e3b\u8981\u903b\u8f91\u5904\u7406\u7c7b \u7b2c\u56db\u6b65\uff1a\u7f16\u5199\u670d\u52a1\u4e2d\u7684\u4e3b\u51fd\u6570 \u7b2c\u4e94\u6b65\uff1a\u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1 \u7b2c\u516d\u6b65\uff1a\u7f16\u5199\u6d4b\u8bd5\u811a\u672c\u5e76\u8fdb\u884c\u6d4b\u8bd5 7.4 \u53e5\u5b50\u4e3b\u9898\u76f8\u5173\u4efb\u52a1 \u00b6 \u53e5\u5b50\u4e3b\u9898\u76f8\u5173\u7684\u4efb\u52a1\u7684\u5de5\u4f5c\u5728\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528AI\u6a21\u578b\u5b9e\u73b0\uff0c\u5305\u62ec\u6a21\u578b\u8bad\u7ec3\u548c\u4f7f\u7528\u7684\u6574\u4e2a\u8fc7\u7a0b\uff0c\u56e0\u6b64\u8fd9\u91cc\u5185\u5bb9\u4ee5\u72ec\u7acb\u4e00\u7ae0\u7684\u5f62\u6210\u5448\u73b0\u7ed9\u5927\u5bb6\uff0c\u5177\u4f53\u5185\u5bb9\u5728 \u7b2c\u516b\u7ae0\uff1a\u53e5\u5b50\u4e3b\u9898\u76f8\u5173\u4efb\u52a1","title":"\u7b2c\u4e03\u7ae0:\u5728\u7ebf\u90e8\u5206"},{"location":"7.html#71","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u5728\u7ebf\u90e8\u5206\u7684\u6838\u5fc3\u7ec4\u6210\u3002 \u4e86\u89e3\u5404\u4e2a\u6838\u5fc3\u7ec4\u6210\u90e8\u5206\u7684\u4f5c\u7528\u3002 \u5728\u7ebf\u90e8\u5206\u67b6\u6784\u56fe\uff1a \u5728\u7ebf\u90e8\u5206\u7b80\u8981\u5206\u6790\uff1a \u6839\u636e\u67b6\u6784\u56fe\uff0c\u5728\u7ebf\u90e8\u5206\u7684\u6838\u5fc3\u7531\u4e09\u4e2a\u670d\u52a1\u7ec4\u6210\uff0c\u5206\u522b\u662fwerobot\u670d\u52a1\uff0c\u4e3b\u8981\u903b\u8f91\u670d\u52a1\uff0c\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u3002\u8fd9\u4e09\u4e2a\u670d\u52a1\u8d2f\u7a7f\u8fde\u63a5\u6574\u4e2a\u5728\u7ebf\u90e8\u5206\u7684\u5404\u4e2a\u6a21\u5757\u3002 werobot\u670d\u52a1\u4f5c\u7528\uff1a \u7528\u4e8e\u8fde\u63a5\u5fae\u4fe1\u5ba2\u6237\u7aef\u4e0e\u540e\u7aef\u670d\u52a1\uff0c\u5411\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u53d1\u9001\u7528\u6237\u8bf7\u6c42\uff0c\u5e76\u63a5\u6536\u7ed3\u6784\u8fd4\u56de\u7ed9\u7528\u6237\u3002 \u4e3b\u8981\u903b\u8f91\u670d\u52a1\u4f5c\u7528\uff1a \u7528\u4e8e\u5904\u7406\u6838\u5fc3\u4e1a\u52a1\u903b\u8f91\uff0c\u5305\u62ec\u4f1a\u8bdd\u7ba1\u7406\uff0c\u8bf7\u6c42\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\uff0c\u67e5\u8be2\u56fe\u6570\u636e\u5e93\uff0c\u8c03\u7528Unit API\u7b49\u3002 \u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\uff1a \u7528\u4e8e\u5c01\u88c5\u8bad\u7ec3\u597d\u7684\u53e5\u5b50\u76f8\u5173\u5224\u65ad\u6a21\u578b\uff0c\u63a5\u6536\u6765\u81ea\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u8bf7\u6c42\uff0c\u8fd4\u56de\u5224\u65ad\u7ed3\u679c\u3002","title":"7.1 \u5728\u7ebf\u90e8\u5206\u7b80\u8981\u5206\u6790"},{"location":"7.html#72-werobot","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u638c\u63e1werobot\u670d\u52a1\u7684\u6784\u5efa\u8fc7\u7a0b\u3002 werobot\u670d\u52a1\u7684\u6784\u5efa\u8fc7\u7a0b\u53ef\u5206\u4e3a\u56db\u6b65\uff1a \u7b2c\u4e00\u6b65\uff1a\u83b7\u53d6\u670d\u52a1\u5668\u516c\u7f51IP \u7b2c\u4e8c\u6b65\uff1a\u914d\u7f6e\u5fae\u4fe1\u516c\u4f17\u53f7 \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528werobot\u542f\u52a8\u670d\u52a1\u811a\u672c \u7b2c\u56db\u6b65\uff1a\u4f7f\u7528\u5fae\u4fe1\u516c\u4f17\u53f7\u8fdb\u884c\u6d4b\u8bd5 \u7b2c\u4e00\u6b65\uff1a\u83b7\u53d6\u670d\u52a1\u5668\u516c\u7f51IP \u767b\u9646\u963f\u91cc\u4e91\u5b98\u7f51( https://www.aliyun.com/product/ecs ): \u8fdb\u884c\u57fa\u672c\u914d\u7f6e\uff0c\u9009\u62e9\u6240\u5728\u5730\u57df\uff0c\u5b9e\u4f8b\u7c7b\u578b\uff0c\u955c\u50cf\uff0c\u5b58\u50a8\uff0c\u8d2d\u4e70\u65f6\u957f \u9009\u62e9\u7f51\u7edc\u548c\u5b89\u5168\u7ec4(\u9ed8\u8ba4\u914d\u7f6e) \u8bbe\u7f6e\u5bc6\u7801\uff0c\u5b9e\u4f8b\u540d\u79f0\uff0c\u4e3b\u673a\u540d \u914d\u7f6e\u5206\u7ec4\u8bbe\u7f6e(\u9ed8\u8ba4\u914d\u7f6e) \u786e\u8ba4\u8ba2\u5355\u5e76\u652f\u4ed8 \u67e5\u770b\u670d\u52a1\u5668\u516c\u7f51IP \u7b2c\u4e8c\u6b65\uff1a\u4f7f\u7528\u516c\u7f51IP\u914d\u7f6e\u5fae\u4fe1\u516c\u4f17\u53f7 \u6ce8\u518c\u5fae\u4fe1\u8ba2\u9605\u53f7( https://mp.weixin.qq.com ), \u5e76\u5728\u57fa\u672c\u914d\u7f6e\u4e2d\u8fdb\u884cURL\u548cToken\u7684\u8bbe\u5b9a \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528werobot\u542f\u52a8\u670d\u52a1\u811a\u672c \u5b89\u88c5werobot pip install werobot \u8fdb\u884c\u542f\u52a8\u811a\u672c\u7684\u7f16\u5199 # \u5bfc\u5165werobot\u548c\u53d1\u9001\u8bf7\u6c42\u7684requests import werobot import requests # \u4e3b\u8981\u903b\u8f91\u670d\u52a1\u8bf7\u6c42\u5730\u5740 url = \"http://161.117.187.37:5000/v1/main_serve/\" # \u670d\u52a1\u8d85\u65f6\u65f6\u95f4 TIMEOUT = 3 # \u58f0\u660e\u5fae\u4fe1\u8bbf\u95ee\u8bf7\u6c42\u3010\u6846\u67b6\u5c06\u8f85\u52a9\u5b8c\u6210\u5fae\u4fe1\u8054\u901a\u9a8c\u8bc1\u3011 robot = werobot . WeRoBot ( token = \"doctoraitoken\" ) # \u8bbe\u7f6e\u6240\u6709\u8bf7\u6c42\uff08\u5305\u542b\u6587\u672c\u3001\u8bed\u97f3\u3001\u56fe\u7247\u7b49\u6d88\u606f\uff09\u5165\u53e3 @robot . handler def doctor ( message , session ): try : # \u83b7\u5f97\u7528\u6237uid uid = message . source try : # \u68c0\u67e5session\uff0c\u5224\u65ad\u8be5\u7528\u6237\u662f\u5426\u7b2c\u4e00\u6b21\u53d1\u8a00 # \u521d\u59cbsession\u4e3a{} # \u5982\u679csession\u4e2d\u6ca1\u6709{uid:\"1\"} if session . get ( uid , None ) != \"1\" : # \u5c06\u6dfb\u52a0{uid:\"1\"} session [ uid ] = \"1\" # \u5e76\u8fd4\u56de\u6253\u62db\u547c\u7528\u8bed return '\u60a8\u597d\uff0c\u6211\u662f\u667a\u80fd\u5ba2\u670d\u5c0f\u827e\uff0c\u6709\u4ec0\u4e48\u9700\u8981\u5e2e\u5fd9\u7684\u5417?' # \u83b7\u53d6message\u4e2d\u7684\u7528\u6237\u53d1\u8a00\u5185\u5bb9 text = message . content except : # \u8fd9\u91cc\u4f7f\u7528try...except\u662f\u56e0\u4e3a\u6211\u7528\u6237\u5f88\u53ef\u80fd\u51fa\u73b0\u53d6\u6d88\u5173\u6ce8\u53c8\u91cd\u65b0\u5173\u6ce8\u7684\u73b0\u8c61 # \u6b64\u65f6\u901a\u8fc7session\u5224\u65ad\uff0c\u8be5\u7528\u6237\u5e76\u4e0d\u662f\u7b2c\u4e00\u6b21\u53d1\u8a00\uff0c\u4f1a\u83b7\u53d6message.content # \u4f46\u7528\u6237\u5176\u5b9e\u53c8\u6ca1\u6709\u8bf4\u8bdd\uff0c\u83b7\u53d6message.content\u65f6\u4f1a\u62a5\u9519 # \u8be5\u60c5\u51b5\u4e5f\u662f\u76f4\u63a5\u8fd4\u56de\u6253\u62db\u547c\u7528\u8bed return '\u60a8\u597d\uff0c\u6211\u662f\u667a\u80fd\u5ba2\u670d\u5c0f\u827e\uff0c\u6709\u4ec0\u4e48\u9700\u8981\u5e2e\u5fd9\u7684\u5417 ?' # \u83b7\u5f97\u53d1\u9001\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u6570\u636e\u4f53 data = { \"uid\" : uid , \"text\" : text } # \u5411\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u53d1\u9001post\u8bf7\u6c42 res = requests . post ( url , data = data , timeout = TIMEOUT ) # \u8fd4\u56de\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u7ed3\u679c return res . text except Exception as e : print ( \"\u51fa\u73b0\u5f02\u5e38\uff1a\" , e ) return \"\u5bf9\u4e0d\u8d77\uff0c\u673a\u5668\u4eba\u5ba2\u670d\u6b63\u5728\u4f11\u606f\u3002..\" # \u8ba9\u670d\u52a1\u5668\u76d1\u542c\u5728 0.0.0.0:80 robot . config [ \"HOST\" ] = \"0.0.0.0\" robot . config [ \"PORT\" ] = 80 robot . run () # \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/wr.py * \u542f\u52a8\u670d\u52a1\u811a\u672c ```shell python /data/wr.py # \u4e5f\u53ef\u4ee5\u4f7f\u7528gunicorn\u542f\u52a8\u8be5\u811a\u672c gunicorn -w 1 wr:robot.wsgi ``` \u7b2c\u56db\u6b65\uff1a\u4f7f\u7528\u5fae\u4fe1\u8fdb\u884c\u6d4b\u8bd5 \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86werobot\u670d\u52a1\u7684\u6784\u5efa\u8fc7\u7a0b\uff1a \u7b2c\u4e00\u6b65\uff1a\u83b7\u53d6\u670d\u52a1\u5668\u516c\u7f51IP \u7b2c\u4e8c\u6b65\uff1a\u914d\u7f6e\u5fae\u4fe1\u516c\u4f17\u53f7 \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528werobot\u542f\u52a8\u670d\u52a1\u811a\u672c \u7b2c\u56db\u6b65\uff1a\u4f7f\u7528\u5fae\u4fe1\u516c\u4f17\u53f7\u8fdb\u884c\u6d4b\u8bd5","title":"7.2 werobot\u670d\u52a1\u6784\u5efa"},{"location":"7.html#73","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u8be5\u670d\u52a1\u4e2d\u7684\u4e3b\u8981\u903b\u8f91\u3002 \u638c\u63e1\u6784\u5efa\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u8fc7\u7a0b\u3002 \u4e3b\u8981\u903b\u8f91\u56fe\uff1a \u903b\u8f91\u56fe\u5206\u6790\uff1a \u4e3b\u8981\u903b\u8f91\u670d\u52a1\u63a5\u6536werobot\u53d1\u9001\u7684\u8bf7\u6c42\u540e\uff0c\u6839\u636e\u7528\u6237id\u67e5\u8be2redis\u67e5\u627e\u7528\u6237\u4e0a\u4e00\u6b21\u8bf4\u8fc7\u7684\u8bdd\uff0c\u6839\u636e\u7ed3\u679c\u5224\u65ad\u662f\u5426\u4e3a\u4ed6\u7684\u7b2c\u4e00\u53e5\u3002 \u5982\u679c\u662f\u7b2c\u4e00\u53e5\u8bdd\uff0c\u76f4\u63a5\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u5224\u65ad\u53e5\u5b50\u4e2d\u662f\u5426\u5305\u542b\u75c7\u72b6\u5b9e\u4f53\uff0c\u5e76\u8fd4\u56de\u8be5\u75c7\u72b6\u8fde\u63a5\u7684\u75be\u75c5\uff0c\u5e76\u586b\u5145\u5728\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u4e2d\uff0c\u5982\u679c\u67e5\u8be2\u4e0d\u5230\u5219\u8c03\u7528Unit API\u8fd4\u56de\u7ed3\u679c\u3002 \u5982\u679c\u4e0d\u662f\u8be5\u7528\u6237\u7684\u7b2c\u4e00\u53e5\u8bdd\uff0c\u5219\u8fde\u540c\u4e0a\u4e00\u53e5\u8bdd\u7684\u5185\u5bb9\u4e00\u8d77\u8bf7\u6c42\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\uff0c\u5224\u65ad\u4e24\u53e5\u8bdd\u662f\u5426\u8ba8\u8bba\u540c\u4e00\u4e3b\u9898\uff0c\u5982\u679c\u662f\uff0c\u5219\u7ee7\u7eed\u67e5\u8be2\u56fe\u6570\u636e\u5e93\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u4f7f\u7528unit api\u8fd4\u56de\u7ed3\u679c\u3002 \u6784\u5efa\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u5bfc\u5165\u5fc5\u5907\u5de5\u5177\u548c\u914d\u7f6e \u7b2c\u4e8c\u6b65\uff1a\u5b8c\u6210\u67e5\u8be2neo4j\u6570\u636e\u5e93\u7684\u51fd\u6570 \u7b2c\u4e09\u6b65\uff1a\u7f16\u5199\u4e3b\u8981\u903b\u8f91\u5904\u7406\u7c7b \u7b2c\u56db\u6b65\uff1a\u7f16\u5199\u670d\u52a1\u4e2d\u7684\u4e3b\u51fd\u6570 \u7b2c\u4e94\u6b65\uff1a\u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1 \u7b2c\u516d\u6b65\uff1a\u7f16\u5199\u6d4b\u8bd5\u811a\u672c\u5e76\u8fdb\u884c\u6d4b\u8bd5\uff1a","title":"7.3 \u4e3b\u8981\u903b\u8f91\u670d\u52a1"},{"location":"7.html#_1","text":"# \u670d\u52a1\u6846\u67b6\u4f7f\u7528Flask # \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177 from flask import Flask from flask import request app = Flask ( __name__ ) # \u5bfc\u5165\u53d1\u9001http\u8bf7\u6c42\u7684requests\u5de5\u5177 import requests # \u5bfc\u5165\u64cd\u4f5credis\u6570\u636e\u5e93\u7684\u5de5\u5177 import redis # \u5bfc\u5165\u52a0\u8f7djson\u6587\u4ef6\u7684\u5de5\u5177 import json # \u5bfc\u5165\u5df2\u5199\u597d\u7684Unit API\u8c03\u7528\u6587\u4ef6 from unit import unit_chat # \u5bfc\u5165\u64cd\u4f5cneo4j\u6570\u636e\u5e93\u7684\u5de5\u5177 from neo4j import GraphDatabase # \u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u5bfc\u5165\u9700\u8981\u7684\u914d\u7f6e # NEO4J\u7684\u8fde\u63a5\u914d\u7f6e from config import NEO4J_CONFIG # REDIS\u7684\u8fde\u63a5\u914d\u7f6e from config import REDIS_CONFIG # \u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u7684\u8bf7\u6c42\u5730\u5740 from config import model_serve_url # \u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u7684\u8d85\u65f6\u65f6\u95f4 from config import TIMEOUT # \u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u7684\u52a0\u8f7d\u8def\u5f84 from config import reply_path # \u7528\u6237\u5bf9\u8bdd\u4fe1\u606f\u4fdd\u5b58\u7684\u8fc7\u671f\u65f6\u95f4 from config import ex_time # \u5efa\u7acbREDIS\u8fde\u63a5\u6c60 pool = redis . ConnectionPool ( ** REDIS_CONFIG ) # \u521d\u59cb\u5316NEO4J\u9a71\u52a8\u5bf9\u8c61 _driver = GraphDatabase . driver ( ** NEO4J_CONFIG ) \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/main_serve/app.py \u914d\u7f6e\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a REDIS_CONFIG = { \"host\" : \"0.0.0.0\" , \"port\" : 6379 } NEO4J_CONFIG = { \"uri\" : \"bolt://0.0.0.0:7687\" , \"auth\" : ( \"neo4j\" , \"********\" ), \"encrypted\" : False } model_serve_url = \"http://0.0.0.0:5001/v1/recognition/\" TIMEOUT = 2 reply_path = \"./reply.json\" ex_time = 36000 \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/main_serve/config.py \u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u6587\u4ef6reply.json\u5185\u5bb9\u5982\u4e0b\uff1a { \"1\": \"\u4eb2\u7231\u7684\u7528\u6237\uff0c\u5728\u7ebf\u533b\u751f\u4e00\u4e2a\u533b\u60a3\u95ee\u7b54\u673a\u5668\u4eba\uff0c\u8bf7\u60a8\u8bf4\u4e00\u4e9b\u5f53\u524d\u7684\u75c7\u72b6\u5427\uff01\", \"2\": \"\u6839\u636e\u60a8\u5f53\u524d\u7684\u75c7\u72b6\u63cf\u8ff0\uff0c\u60a8\u53ef\u80fd\u60a3\u6709\u4ee5\u4e0b\u75be\u75c5\uff0c%s, \u518d\u60f3\u60f3\u8fd8\u6709\u66f4\u591a\u7684\u75c7\u72b6\u5417?\", \"3\": \"\u5bf9\u4e0d\u8d77\uff0c\u60a8\u6240\u8bf4\u7684\u5185\u5bb9\u8d85\u51fa\u4e86\u5728\u7ebf\u533b\u751f\u7684\u77e5\u8bc6\u8303\u56f4\u3002\u8bf7\u5c1d\u8bd5\u6362\u4e00\u4e9b\u63cf\u8ff0\u65b9\u5f0f\uff01\", \"4\": \"\u60a8\u7684\u8fd9\u6b21\u63cf\u8ff0\u5e76\u6ca1\u6709\u7ed9\u6211\u5e26\u6765\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u60a8\u7ee7\u7eed\u63cf\u8ff0\u60a8\u7684\u75c7\u72b6\u3002\" } \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/main_serve/reply.json","title":"\u7b2c\u4e00\u6b65\uff1a\u5bfc\u5165\u5fc5\u5907\u5de5\u5177\u548c\u914d\u7f6e"},{"location":"7.html#neo4j","text":"def query_neo4j ( text ): \"\"\" description: \u6839\u636e\u7528\u6237\u5bf9\u8bdd\u6587\u672c\u4e2d\u7684\u53ef\u80fd\u5b58\u5728\u7684\u75c7\u72b6\u67e5\u8be2\u56fe\u6570\u636e\u5e93\u3002 :param text: \u7528\u6237\u7684\u8f93\u5165\u6587\u672c\u3002 :return: \u7528\u6237\u63cf\u8ff0\u7684\u75c7\u72b6\u5bf9\u5e94\u7684\u75be\u75c5\u5217\u8868\u3002 \"\"\" # \u5f00\u542f\u4e00\u4e2asession\u64cd\u4f5c\u56fe\u6570\u636e\u5e93 with _driver . session () as session : # cypher\u8bed\u53e5\uff0c\u5339\u914d\u53e5\u5b50\u4e2d\u5b58\u5728\u7684\u6240\u6709\u75c7\u72b6\u8282\u70b9\uff0c # \u4fdd\u5b58\u8fd9\u4e9b\u8282\u70b9\u5e76\u9010\u4e00\u901a\u8fc7\u5173\u7cfbdis_to_sym\u8fdb\u884c\u5bf9\u5e94\u75c5\u75c7\u7684\u67e5\u627e\uff0c\u8fd4\u56de\u627e\u5230\u7684\u75be\u75c5\u540d\u5b57\u5217\u8868\u3002 cypher = \"MATCH(a:Symptom) WHERE( %r contains a.name) WITH \\ a MATCH(a)-[r:dis_to_sym]-(b:Disease) RETURN b.name LIMIT 5\" % text # \u8fd0\u884c\u8fd9\u6761cypher\u8bed\u53e5 record = session . run ( cypher ) # \u4ecerecord\u5bf9\u8c61\u4e2d\u83b7\u5f97\u7ed3\u679c\u5217\u8868 result = list ( map ( lambda x : x [ 0 ], record )) return result \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/main_serve/app.py \u8c03\u7528\uff1a if __name__ == \"__main__\": text = \"\u6211\u6700\u8fd1\u8179\u75db!\" result = query_neo4j(text) print(\"\u75be\u75c5\u5217\u8868\uff1a\", result) \u8f93\u51fa\u6548\u679c\uff1a \u75be\u75c5\u5217\u8868\uff1a['\u80c3\u80a0\u9053\u764c\u8f6c\u79fb\u5375\u5de2', '\u80c3\u80a0\u9053\u529f\u80fd\u7d0a\u4e71', '\u80c3\u80a0\u79ef\u6db2', '\u80c3\u80a0\u578b\u98df\u7269\u4e2d\u6bd2', '\u80c3\u7ed3\u6838']","title":"\u7b2c\u4e8c\u6b65\uff1a\u5b8c\u6210\u67e5\u8be2neo4j\u6570\u636e\u5e93\u7684\u51fd\u6570"},{"location":"7.html#_2","text":"class Handler ( object ): \"\"\"\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u5904\u7406\u7c7b\"\"\" def __init__ ( self , uid , text , r , reply ): \"\"\" :param uid: \u7528\u6237\u552f\u4e00\u6807\u793auid :param text: \u8be5\u7528\u6237\u672c\u6b21\u8f93\u5165\u7684\u6587\u672c :param r: redis\u6570\u636e\u5e93\u7684\u8fde\u63a5\u5bf9\u8c61 :param reply: \u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u52a0\u8f7d\u5230\u5185\u5b58\u7684\u5bf9\u8c61(\u5b57\u5178) \"\"\" self . uid = uid self . text = text self . r = r self . reply = reply def non_first_sentence ( self , previous ): \"\"\" description: \u975e\u9996\u53e5\u5904\u7406\u51fd\u6570 :param previous: \u8be5\u7528\u6237\u5f53\u524d\u53e5(\u8f93\u5165\u6587\u672c)\u7684\u4e0a\u4e00\u53e5\u6587\u672c :return: \u6839\u636e\u903b\u8f91\u56fe\u8fd4\u56de\u975e\u9996\u53e5\u60c5\u51b5\u4e0b\u7684\u8f93\u51fa\u8bed\u53e5 \"\"\" # \u5c1d\u8bd5\u8bf7\u6c42\u6a21\u578b\u670d\u52a1\uff0c\u82e5\u5931\u8d25\u5219\u6253\u5370\u9519\u8bef\u7ed3\u679c try : data = { \"text1\" : previous , \"text2\" : self . text } result = requests . post ( model_serve_url , data = data , timeout = TIMEOUT ) if not result . text : return unit_chat ( self . text ) except Exception as e : print ( \"\u6a21\u578b\u670d\u52a1\u5f02\u5e38\uff1a\" , e ) return unit_chat ( self . text ) # \u7ee7\u7eed\u67e5\u8be2\u56fe\u6570\u636e\u5e93\uff0c\u5e76\u83b7\u5f97\u7ed3\u679c s = query_neo4j ( self . text ) # \u5224\u65ad\u7ed3\u679c\u4e3a\u7a7a\u5217\u8868\uff0c\u5219\u76f4\u63a5\u4f7f\u7528UnitAPI\u8fd4\u56de if not s : return unit_chat ( self . text ) # \u82e5\u7ed3\u679c\u4e0d\u4e3a\u7a7a\uff0c\u83b7\u53d6\u4e0a\u4e00\u6b21\u5df2\u56de\u590d\u7684\u75be\u75c5old_disease old_disease = self . r . hget ( str ( self . uid ), \"previous_d\" ) if old_disease : # new_disease\u662f\u672c\u6b21\u9700\u8981\u5b58\u50a8\u7684\u75be\u75c5\uff0c\u662f\u5df2\u7ecf\u5b58\u50a8\u7684\u75be\u75c5\u4e0e\u672c\u6b21\u67e5\u8be2\u5230\u75be\u75c5\u7684\u5e76\u96c6 new_disease = list ( set ( s ) | set ( eval ( old_disease ))) # res\u662f\u9700\u8981\u8fd4\u56de\u7684\u75be\u75c5\uff0c\u662f\u672c\u6b21\u67e5\u8be2\u5230\u7684\u75be\u75c5\u4e0e\u5df2\u7ecf\u5b58\u50a8\u7684\u75be\u75c5\u7684\u5dee\u96c6 res = list ( set ( s ) - set ( eval ( old_disease ))) else : # \u5982\u679cold_disease\u4e3a\u7a7a\uff0c\u5219\u5b83\u4eec\u76f8\u540c\u90fd\u662f\u672c\u6b21\u67e5\u8be2\u7ed3\u679cs res = new_disease = list ( set ( s )) # \u5b58\u50a8new_disease\u8986\u76d6\u4e4b\u524d\u7684old_disease self . r . hset ( str ( self . uid ), \"previous_d\" , str ( new_disease )) # \u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4 self . r . expire ( str ( self . uid ), ex_time ) # \u5c06\u5217\u8868\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u6dfb\u52a0\u5230\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u4e2d\u8fd4\u56de if not res : return self . reply [ \"4\" ] else : res = \",\" . join ( res ) return self . reply [ \"2\" ] % res def first_sentence ( self ): \"\"\"\u9996\u53e5\u5904\u7406\u51fd\u6570\"\"\" # \u76f4\u63a5\u67e5\u8be2\u56fe\u6570\u636e\u5e93\uff0c\u5e76\u83b7\u5f97\u7ed3\u679c s = query_neo4j ( self . text ) # \u5224\u65ad\u7ed3\u679c\u4e3a\u7a7a\u5217\u8868\uff0c\u5219\u76f4\u63a5\u4f7f\u7528UnitAPI\u8fd4\u56de if not s : return unit_chat ( self . text ) # \u5c06s\u5b58\u50a8\u4e3a\"\u4e0a\u4e00\u6b21\u8fd4\u56de\u7684\u75be\u75c5\" self . r . hset ( str ( self . uid ), \"previous_d\" , str ( s )) # \u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4 self . r . expire ( str ( self . uid ), ex_time ) # \u5c06\u5217\u8868\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u6dfb\u52a0\u5230\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u4e2d\u8fd4\u56de res = \",\" . join ( s ) return self . reply [ \"2\" ] % res \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/main_serve/app.py","title":"\u7b2c\u4e09\u6b65\uff1a\u7f16\u5199\u4e3b\u8981\u903b\u8f91\u5904\u7406\u7c7b"},{"location":"7.html#_3","text":"# \u8bbe\u5b9a\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u8def\u7531\u548c\u8bf7\u6c42\u65b9\u6cd5 @app . route ( '/v1/main_serve/' , methods = [ \"POST\" ]) def main_serve (): # \u63a5\u6536\u6765\u81eawerobot\u670d\u52a1\u7684\u5b57\u6bb5 uid = request . form [ 'uid' ] text = request . form [ 'text' ] # \u4eceredis\u8fde\u63a5\u6c60\u4e2d\u83b7\u5f97\u4e00\u4e2a\u6d3b\u8dc3\u8fde\u63a5 r = redis . StrictRedis ( connection_pool = pool ) # \u6839\u636e\u8be5uid\u83b7\u53d6\u4ed6\u7684\u4e0a\u4e00\u53e5\u8bdd(\u53ef\u80fd\u4e0d\u5b58\u5728) previous = r . hget ( str ( uid ), \"previous\" ) # \u5c06\u5f53\u524d\u8f93\u5165\u7684\u6587\u672c\u8bbe\u7f6e\u6210\u4e0a\u4e00\u53e5 r . hset ( str ( uid ), \"previous\" , text ) # \u8bfb\u53d6\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u5185\u5bb9\u5230\u5185\u5b58 reply = json . load ( open ( reply_path , \"r\" )) # \u5b9e\u4f8b\u5316\u4e3b\u8981\u903b\u8f91\u5904\u7406\u5bf9\u8c61 handler = Handler ( uid , text , r , reply ) # \u5982\u679cprevious\u5b58\u5728\uff0c\u8bf4\u660e\u4e0d\u662f\u7b2c\u4e00\u53e5\u8bdd if previous : # \u8c03\u7528non_first_sentence\u65b9\u6cd5 return handler . non_first_sentence ( previous ) else : # \u5426\u5219\u8c03\u7528first_sentence()\u65b9\u6cd5 return handler . first_sentence ()","title":"\u7b2c\u56db\u6b65\uff1a\u7f16\u5199\u670d\u52a1\u4e2d\u7684\u4e3b\u51fd\u6570"},{"location":"7.html#gunicorn","text":"gunicorn - w 1 - b 0.0.0.0 : 5000 app : app # -w \u4ee3\u8868\u5f00\u542f\u7684\u8fdb\u7a0b\u6570\uff0c\u6211\u4eec\u53ea\u5f00\u542f\u4e00\u4e2a\u8fdb\u7a0b # -b \u670d\u52a1\u7684IP\u5730\u5740\u548c\u7aef\u53e3 # app:app \u662f\u6307\u6267\u884c\u7684\u4e3b\u8981\u5bf9\u8c61\u4f4d\u7f6e\uff0c\u5728app.py\u4e2d\u7684app\u5bf9\u8c61 \u4ee3\u7801\u4f4d\u7f6e\uff1a\u5728/data/doctor_online/main_serve/\u8def\u5f84\u4e0b\u6267\u884c\u3002","title":"\u7b2c\u4e94\u6b65\uff1a\u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1"},{"location":"7.html#_4","text":"\u7f16\u5199\u6d4b\u8bd5\u811a\u672c\uff1a import requests # \u5b9a\u4e49\u8bf7\u6c42url\u548c\u4f20\u5165\u7684data url = \"http://0.0.0.0:5000/v1/main_serve/\" data = { \"uid\" : \"13424\" , \"text\" : \"\u5934\u6655\" } # \u5411\u670d\u52a1\u53d1\u9001post\u8bf7\u6c42 res = requests . post ( url , data = data ) # \u6253\u5370\u8fd4\u56de\u7684\u7ed3\u679c print ( res . text ) \u8fd0\u884c\u811a\u672c\uff1a python test.py \u8f93\u51fa\u6548\u679c\uff1a \u6839\u636e\u60a8\u5f53\u524d\u7684\u75c7\u72b6\u63cf\u8ff0\uff0c\u60a8\u53ef\u80fd\u60a3\u6709\u4ee5\u4e0b\u75be\u75c5\uff0c\u4e2d\u6bd2\uff0c\u866b\u5a92\u4f20\u67d3\u75c5\uff0c\u5c0f\u513f\u80a5\u539a\u578b\u5fc3\u808c\u75c5\uff0c\u8840\u7ea2\u86cb\u767dE\u75c5\uff0c\u94cd\u4e2d\u6bd2\uff0c\u518d\u60f3\u60f3\u8fd8\u6709\u66f4\u591a\u7684\u75c7\u72b6\u5417? \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86\u670d\u52a1\u7684\u4e3b\u8981\u903b\u8f91\uff1a \u4e3b\u8981\u903b\u8f91\u670d\u52a1\u63a5\u6536werobot\u53d1\u9001\u7684\u8bf7\u6c42\u540e\uff0c\u6839\u636e\u7528\u6237id\u67e5\u8be2redis\u67e5\u627e\u7528\u6237\u4e0a\u4e00\u6b21\u8bf4\u8fc7\u7684\u8bdd\uff0c\u6839\u636e\u7ed3\u679c\u5224\u65ad\u662f\u5426\u4e3a\u4ed6\u7684\u7b2c\u4e00\u53e5\u3002 \u5982\u679c\u662f\u7b2c\u4e00\u53e5\u8bdd\uff0c\u76f4\u63a5\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u5224\u65ad\u53e5\u5b50\u4e2d\u662f\u5426\u5305\u542b\u75c7\u72b6\u5b9e\u4f53\uff0c\u5e76\u8fd4\u56de\u8be5\u75c7\u72b6\u8fde\u63a5\u7684\u75be\u75c5\uff0c\u5e76\u586b\u5145\u5728\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u4e2d\uff0c\u5982\u679c\u67e5\u8be2\u4e0d\u5230\u5219\u8c03\u7528Unit API\u8fd4\u56de\u7ed3\u679c\u3002 \u5982\u679c\u4e0d\u662f\u8be5\u7528\u6237\u7684\u7b2c\u4e00\u53e5\u8bdd\uff0c\u5219\u8fde\u540c\u4e0a\u4e00\u53e5\u8bdd\u7684\u5185\u5bb9\u4e00\u8d77\u8bf7\u6c42\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\uff0c\u5224\u65ad\u4e24\u53e5\u8bdd\u662f\u5426\u8ba8\u8bba\u540c\u4e00\u4e3b\u9898\uff0c\u5982\u679c\u662f\uff0c\u5219\u7ee7\u7eed\u67e5\u8be2\u56fe\u6570\u636e\u5e93\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u4f7f\u7528unit api\u8fd4\u56de\u7ed3\u679c\u3002 \u6784\u5efa\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u5bfc\u5165\u5fc5\u5907\u5de5\u5177\u548c\u914d\u7f6e \u7b2c\u4e8c\u6b65\uff1a\u5b8c\u6210\u67e5\u8be2neo4j\u6570\u636e\u5e93\u7684\u51fd\u6570 \u7b2c\u4e09\u6b65\uff1a\u7f16\u5199\u4e3b\u8981\u903b\u8f91\u5904\u7406\u7c7b \u7b2c\u56db\u6b65\uff1a\u7f16\u5199\u670d\u52a1\u4e2d\u7684\u4e3b\u51fd\u6570 \u7b2c\u4e94\u6b65\uff1a\u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1 \u7b2c\u516d\u6b65\uff1a\u7f16\u5199\u6d4b\u8bd5\u811a\u672c\u5e76\u8fdb\u884c\u6d4b\u8bd5","title":"\u7b2c\u516d\u6b65\uff1a\u7f16\u5199\u6d4b\u8bd5\u811a\u672c\u5e76\u8fdb\u884c\u6d4b\u8bd5"},{"location":"7.html#74","text":"\u53e5\u5b50\u4e3b\u9898\u76f8\u5173\u7684\u4efb\u52a1\u7684\u5de5\u4f5c\u5728\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528AI\u6a21\u578b\u5b9e\u73b0\uff0c\u5305\u62ec\u6a21\u578b\u8bad\u7ec3\u548c\u4f7f\u7528\u7684\u6574\u4e2a\u8fc7\u7a0b\uff0c\u56e0\u6b64\u8fd9\u91cc\u5185\u5bb9\u4ee5\u72ec\u7acb\u4e00\u7ae0\u7684\u5f62\u6210\u5448\u73b0\u7ed9\u5927\u5bb6\uff0c\u5177\u4f53\u5185\u5bb9\u5728 \u7b2c\u516b\u7ae0\uff1a\u53e5\u5b50\u4e3b\u9898\u76f8\u5173\u4efb\u52a1","title":"7.4 \u53e5\u5b50\u4e3b\u9898\u76f8\u5173\u4efb\u52a1"},{"location":"8.html","text":"8.1 \u4efb\u52a1\u4ecb\u7ecd\u4e0e\u6a21\u578b\u9009\u7528 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u53e5\u5b50\u4e3b\u9898\u76f8\u5173\u4efb\u52a1\u7684\u76f8\u5173\u77e5\u8bc6\u3002 \u4e86\u89e3\u9009\u7528\u7684\u6a21\u578b\u53ca\u5176\u539f\u56e0\u3002 \u53e5\u5b50\u4e3b\u9898\u76f8\u5173\u4efb\u52a1\uff1a \u5728\u591a\u8f6e\u5bf9\u8bdd\u7cfb\u7edf\u4e2d\uff0c\u5f80\u5f80\u9700\u8981\u5224\u65ad\u7528\u6237\u7684\u6700\u8fd1\u4e24\u6b21\u56de\u590d\u662f\u5426\u56f4\u7ed5\u540c\u4e00\u4e3b\u9898\uff0c\u6765\u51b3\u5b9a\u95ee\u7b54\u673a\u5668\u4eba\u662f\u5426\u4e5f\u6839\u636e\u81ea\u5df1\u4e0a\u4e00\u6b21\u7684\u56de\u590d\u6765\u8ba8\u8bba\u76f8\u5173\u5185\u5bb9\u3002\u5728\u7ebf\u533b\u751f\u95ee\u7b54\u8fc7\u7a0b\u4e2d\uff0c\u540c\u6837\u9700\u8981\u8fd9\u6837\u7684\u5904\u7406\uff0c\u786e\u4fdd\u7528\u6237\u4e00\u76f4\u8ba8\u8bba\u75be\u75c5\u6709\u5173\u7684\u5185\u5bb9\uff0c\u6765\u6839\u636e\u75c7\u72b6\u63a8\u65ad\u75c5\u60c5\u3002\u8fd9\u79cd\u4efb\u52a1\u7684\u5f62\u5f0f\u4e0e\u5224\u65ad\u4e24\u4e2a\u53e5\u5b50\u662f\u5426\u8fde\u8d2f\u7684\u5f62\u5f0f\u76f8\u540c\uff0c\u4ed6\u4eec\u90fd\u9700\u8981\u8f93\u5165\u4e24\u6bb5\u6587\u672c\u5185\u5bb9\uff0c\u8fd4\u56de'\u662f'\u6216'\u5426'\u7684\u4e8c\u5206\u7c7b\u6807\u7b7e\u3002 \u9009\u7528\u7684\u6a21\u578b\u53ca\u5176\u539f\u56e0\uff1a \u5bf9\u8bdd\u7cfb\u7edf\u662f\u5f00\u653e\u7684\u8bed\u8a00\u5904\u7406\u7cfb\u7edf\uff0c\u53ef\u80fd\u51fa\u73b0\u5404\u79cd\u6587\u5b57\uff0c\u5f53\u6211\u4eec\u7684\u8bad\u7ec3\u96c6\u6709\u9650\u65e0\u6cd5\u8986\u76d6\u5927\u591a\u6570\u60c5\u51b5\u65f6\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u8fdb\u884c\u6587\u5b57\u8868\u793a\u3002\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u4e86bert-chinese\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u540c\u65f6\u4e3a\u4e86\u9002\u5e94\u6211\u4eec\u7814\u7a76\u7684\u5782\u76f4\u9886\u57df\uff0c\u6211\u4eec\u5728\u540e\u9762\u81ea\u5b9a\u4e49\u6d45\u5c42\u7684\u5fae\u8c03\u6a21\u578b\uff0c\u5b83\u5c06\u7531\u4e24\u5c42\u5168\u8fde\u63a5\u7f51\u7edc\u7ec4\u6210\uff0c\u4e4b\u540e\u6211\u4eec\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u3002 8.2 \u8bad\u7ec3\u6570\u636e\u96c6 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u5f0f\u53ca\u5176\u76f8\u5173\u89e3\u91ca\u3002 \u4e86\u89e3\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6765\u6e90\u548c\u6269\u5145\u65b9\u5f0f\u3002 \u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u5f0f\uff1a 1 \u8179\u80a1\u6c9f\u6dcb\u5df4\u7ed3\u80bf\u5927\u8179\u80a1\u6c9f\u76ae\u4e0b\u5305\u5757 \u60f3\u8bf7\u60a8\u5e2e\u5fd9\u89e3\u8bfb\u4e00\u4e0b\u4e0a\u9762\u7684b\u8d85\u7ed3\u679c\uff0c\u662f\u5426\u8981\u6cbb\u7597\uff0c\u6216\u505a\u8fdb\u4e00\u6b65\u7684\u68c0\u67e5\uff1f>\u56e0\u4e3a\u505a\u5b8cb\u8d85\u533b\u751f\u4e0b\u73ed\u4e86 1 \u60f3\u8bf7\u60a8\u5e2e\u5fd9\u89e3\u8bfb\u4e00\u4e0b\u4e0a\u9762\u7684b\u8d85\u7ed3\u679c\uff0c\u662f\u5426\u8981\u6cbb\u7597\uff0c\u6216\u505a\u8fdb\u4e00\u6b65\u7684\u68c0\u67e5\uff1f\u56e0\u4e3a\u505a\u5b8cb\u8d85\u533b\u751f\u4e0b\u73ed\u4e86 \u5de6\u4fa7\u7684\u5305 \u5757\u662f\u5426\u662f\u666e\u901a\u7684\u6dcb\u5df4\u7ed3\u80bf\u5927\uff1f 1 \u5de6\u4fa7\u7684\u5305\u5757\u662f\u5426\u662f\u666e\u901a\u7684\u6dcb\u5df4\u7ed3\u80bf\u5927\uff1f \u6309\u538b\u4e0d\u75bc\uff0c\u4f46\u7528\u624b\u6572\u4f1a\u6709\u70b9\u523a\u75db 1 \u6309\u538b\u4e0d\u75bc\uff0c\u4f46\u7528\u624b\u6572\u4f1a\u6709\u70b9\u523a\u75db \uff1f 1 \u6297\u8c2c\u808b\u6c0f\u7ba1\u6fc0\u7d20\u504f\u4f4e\u6297\u7f2a\u808b\u6c0f\u7ba1\u6fc0\u7d20\u504f\u4f4e \u6628\u5929\u540c\u623f\u540e\u51fa\u8840\u4e86\uff0c\u4ee5\u524d\u90fd\u4e0d\u4f1a\uff0c\u5148\u662f\u9c9c\u7ea2\u8272\uff0c\u4eca\u5929\u53d8\u8910\u8272\uff0c\u5c11 \u91cf\uff0c\u4e0d\u60f3\u53bb\u533b\u9662\u68c0\u67e5\uff0c\u8fc7\u51e0\u5929\u5b83\u4f1a\u81ea\u5df1\u505c\u5427\uff1f\u8fd8\u662f\u8981\u5403\u4ec0\u4e48\u836f\uff1f 0 \u6c34\u75d8\u6c34\u75d8\u540e\u7b2c\u4e03\u5929\u8138\u4e0a\u8272\u7d20\u4e25\u91cd \u4e94\u9669\u4e00\u91d1\u4f1a\u4e0b\u8c03\u5417 0 \u817a\u6837\u4f53\u91cd\u5ea6\u80a5\u5927\uff0c\u5206\u6ccc\u6027\u4e2d\u8033\u708e\u5b9d\u5b9d\u817a\u6837\u4f53\u80a5\u5927\u600e\u4e48\u529e \u6211\u7238\u56e0\u8f66\u7978\u6b7b\u4ea1\u610f\u5916\u9669\u80fd\u8d54\u507f\u5417 0 \u5c3f\u8840\u5c3f\u8840\u8fd9\u79cd\u60c5\u51b5\u8981\u6c42\u9ad8\u4e0d\u9ad8\u6cbb\u7597 \u8f66\u8f86\u4fdd\u9669\u7406\u8d54\u56de\u6267\u5f04\u4e22\u4e86\u53ef\u4ee5\u8865\u5417 0 \u5c3f\u8def\u611f\u67d3\u5c3f\u8def\u611f\u67d3\u5907\u5b55\u4e2d \u5728\u5355\u4f4d\u8f9e\u804c\u4e86\uff0c\u5f53\u65f6\u6ca1\u529e\u533b\u4fdd\uff0c\u662f\u5426\u80fd\u7533\u529e\u5c45\u6c11\u533b\u4fdd\uff1f 0 \u773c\u89d2\u6709\u8840\u5757\u5de6\u773c\u89d2\u6709\u8840\u5757\u72b6 \u6709\u8c01\u77e5\u9053\uff0c\u5b89*\u957f*\u6811\u51fa\u9669\u4e86\u9700\u8981\u63d0\u4f9b\u54ea\u4e9b\u533b\u9662\u8bc1\u660e\uff1f \u6570\u636e\u96c6\u7684\u76f8\u5173\u89e3\u91ca\uff1a \u6570\u636e\u96c6\u4e2d\u7684\u7b2c\u4e00\u5217\u4ee3\u8868\u6807\u7b7e\uff0c1\u4e3a\u6b63\u6807\u7b7e\uff0c\u4ee3\u8868\u540e\u9762\u7684\u4e24\u53e5\u8bdd\u662f\u5728\u8ba8\u8bba\u540c\u4e00\u4e3b\u9898\u30020\u4e3a\u8d1f\u6807\u7b7e\uff0c\u4ee3\u8868\u540e\u9762\u7684\u4e24\u53e5\u8bdd\u4e0d\u76f8\u5173\u3002 \u6570\u636e\u96c6\u4e2d\u7684\u7b2c\u4e8c\u5217\u662f\u7528\u6237\u56de\u590d\u7684\u6587\u672c\u4fe1\u606f\uff0c\u7b2c\u4e09\u5217\u662f\u4e0e\u4e0a\u4e00\u53e5\u76f8\u5173\u6216\u4e0d\u76f8\u5173\u7684\u6587\u672c\u3002 \u6b63\u8d1f\u6837\u672c\u7684\u6bd4\u4f8b\u662f1:1\u5de6\u53f3 \u6570\u636e\u96c6\u6240\u5728\u4f4d\u7f6e\uff1a/data/doctor_online/bert_serve/train_data.csv \u6570\u636e\u96c6\u6765\u6e90\u53ca\u5176\u6269\u5145\u65b9\u5f0f\uff1a \u6765\u6e90\uff1a\u6b63\u6837\u672c\u6570\u636e\u6765\u81ea\u7f51\u7edc\u533b\u60a3\u5728\u7ebf\u95ee\u7b54\u7684\u771f\u5b9e\u8bed\u6599\u3002\u8d1f\u6837\u672c\u6765\u81ea\u5176\u4ed6\u4f7f\u7528\u5176\u4ed6\u95ee\u7b54\u8bed\u6599\u7684\u56de\u590d\u4fe1\u606f\uff0c\u4fdd\u8bc1\u4e24\u6bb5\u6587\u672c\u4e0d\u76f8\u5173\u3002 \u6269\u5145\u65b9\u5f0f\uff1a\u6839\u636e\u6765\u6e90\uff0c\u53ef\u901a\u8fc7\u6570\u636e\u6293\u53d6\u6280\u672f\u5bf9\u8bed\u6599\u96c6\u8fdb\u884c\u6269\u5145\u3002 8.3 BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6709\u5173\u77e5\u8bc6\u548c\u4f5c\u7528\u3002 \u638c\u63e1\u4f7f\u7528BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u53e5\u5b50\u7f16\u7801\u7684\u8fc7\u7a0b\u3002 BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\uff1a BERT\u6a21\u578b\u6574\u4f53\u67b6\u6784\u57fa\u4e8eTransformer\u6a21\u578b\u67b6\u6784(\u53ea\u4f7f\u7528Transformer\u4e2d\u7684\u7f16\u7801\u5668), BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u7684Transformer\u7f16\u7801\u5668\u5177\u670912\u5c42\uff0c\u8f93\u51fa\u5c42\u4e2d\u7684\u7ebf\u6027\u5c42\u5177\u6709768\u4e2a\u8282\u70b9\uff0c\u5373\u8f93\u51fa\u5f20\u91cf\u6700\u540e\u4e00\u7ef4\u7684\u7ef4\u5ea6\u662f768. \u5b83\u4f7f\u7528\u7684\u591a\u5934\u6ce8\u610f\u529b\u673a\u5236\u7ed3\u6784\u4e2d\uff0c\u5934\u7684\u6570\u91cf\u4e3a12, \u6a21\u578b\u603b\u53c2\u6570\u91cf\u4e3a110M. \u540c\u65f6\uff0c\u5b83\u5728\u4e2d\u6587\u7b80\u4f53\u548c\u7e41\u4f53\u4e0a\u8fdb\u884c\u8bad\u7ec3\uff0c\u56e0\u6b64\u9002\u5408\u4e2d\u6587\u7b80\u4f53\u548c\u7e41\u4f53\u4efb\u52a1\u3002 BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u4f5c\u7528\uff1a \u5728\u5b9e\u9645\u7684\u6587\u672c\u4efb\u52a1\u5904\u7406\u4e2d\uff0c\u6709\u4e9b\u8bad\u7ec3\u8bed\u6599\u5f88\u96be\u83b7\u5f97\uff0c\u4ed6\u4eec\u7684\u603b\u4f53\u6570\u91cf\u548c\u5305\u542b\u7684\u8bcd\u6c47\u603b\u6570\u90fd\u975e\u5e38\u5c11\uff0c\u4e0d\u9002\u5408\u7528\u4e8e\u8bad\u7ec3\u5e26\u6709Embedding\u5c42\u7684\u6a21\u578b\uff0c\u4f46\u8fd9\u4e9b\u6570\u636e\u4e2d\u5374\u53c8\u8574\u542b\u8fd9\u4e00\u4e9b\u6709\u4ef7\u503c\u7684\u89c4\u5f8b\u53ef\u4ee5\u88ab\u6a21\u578b\u6316\u6398\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u539f\u59cb\u6587\u672c\u8fdb\u884c\u7f16\u7801\u662f\u975e\u5e38\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u9884\u8bad\u7ec3\u6a21\u578b\u6765\u81ea\u5927\u578b\u8bed\u6599\uff0c\u80fd\u591f\u4f7f\u5f97\u5f53\u524d\u6587\u672c\u5177\u6709\u610f\u4e49\uff0c\u867d\u7136\u8fd9\u4e9b\u610f\u4e49\u53ef\u80fd\u5e76\u4e0d\u9488\u5bf9\u67d0\u4e2a\u7279\u5b9a\u9886\u57df\uff0c\u4f46\u662f\u8fd9\u79cd\u7f3a\u9677\u53ef\u4ee5\u4f7f\u7528\u5fae\u8c03\u6a21\u578b\u6765\u8fdb\u884c\u5f25\u8865\u3002 \u4f7f\u7528BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u4e24\u4e2a\u53e5\u5b50\u8fdb\u884c\u7f16\u7801\uff1a import torch import torch.nn as nn # \u4ece\u672c\u5730\u52a0\u8f7d source = '/root/.cache/torch/hub/huggingface_pytorch-transformers_main' # \u4ecegithub\u52a0\u8f7d # source = 'huggingface/pytorch-transformers' # \u76f4\u63a5\u4f7f\u7528\u9884\u8bad\u7ec3\u7684bert\u4e2d\u6587\u6a21\u578b model_name = 'bert-base-chinese' # \u901a\u8fc7torch.hub\u83b7\u5f97\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684bert-base-chinese\u6a21\u578b model = torch . hub . load ( source , 'model' , model_name , source = 'local' ) # \u4ecegithub\u52a0\u8f7d # model = torch.hub.load(source, 'model', model_name, source='github') # \u83b7\u5f97\u5bf9\u5e94\u7684\u5b57\u7b26\u6620\u5c04\u5668\uff0c\u5b83\u5c06\u628a\u4e2d\u6587\u7684\u6bcf\u4e2a\u5b57\u6620\u5c04\u6210\u4e00\u4e2a\u6570\u5b57 tokenizer = torch . hub . load ( source , 'tokenizer' , model_name , source = 'local' ) # \u4ecegithub\u52a0\u8f7d # tokenizer = torch.hub.load(source, 'tokenizer', model_name, source='github') def get_bert_encode ( text_1 , text_2 , mark = 102 , max_len = 10 ): \"\"\" description: \u4f7f\u7528bert\u4e2d\u6587\u6a21\u578b\u5bf9\u8f93\u5165\u7684\u6587\u672c\u5bf9\u8fdb\u884c\u7f16\u7801 :param text_1: \u4ee3\u8868\u8f93\u5165\u7684\u7b2c\u4e00\u53e5\u8bdd :param text_2: \u4ee3\u8868\u8f93\u5165\u7684\u7b2c\u4e8c\u53e5\u8bdd :param mark: \u5206\u9694\u6807\u8bb0\uff0c\u662f\u9884\u8bad\u7ec3\u6a21\u578btokenizer\u672c\u8eab\u7684\u6807\u8bb0\u7b26\u53f7\uff0c\u5f53\u8f93\u5165\u662f\u4e24\u4e2a\u6587\u672c\u65f6\uff0c \u5f97\u5230\u7684index_tokens\u4f1a\u4ee5102\u8fdb\u884c\u5206\u9694 :param max_len: \u6587\u672c\u7684\u5141\u8bb8\u6700\u5927\u957f\u5ea6\uff0c\u4e5f\u662f\u6587\u672c\u7684\u89c4\u8303\u957f\u5ea6\u5373\u5927\u4e8e\u8be5\u957f\u5ea6\u8981\u88ab\u622a\u65ad\uff0c\u5c0f\u4e8e\u8be5\u957f\u5ea6\u8981\u8fdb\u884c0\u8865\u9f50 :return \u8f93\u5165\u6587\u672c\u7684bert\u7f16\u7801 \"\"\" # \u4f7f\u7528tokenizer\u7684encode\u65b9\u6cd5\u5bf9\u8f93\u5165\u7684\u4e24\u53e5\u6587\u672c\u8fdb\u884c\u5b57\u6620\u5c04\u3002 indexed_tokens = tokenizer . encode ( text_1 , text_2 ) # \u51c6\u5907\u5bf9\u6620\u5c04\u540e\u7684\u6587\u672c\u8fdb\u884c\u89c4\u8303\u957f\u5ea6\u5904\u7406\u5373\u5927\u4e8e\u8be5\u957f\u5ea6\u8981\u88ab\u622a\u65ad\uff0c\u5c0f\u4e8e\u8be5\u957f\u5ea6\u8981\u8fdb\u884c0\u8865\u9f50 # \u6240\u4ee5\u9700\u8981\u5148\u627e\u5230\u5206\u9694\u6807\u8bb0\u7684\u7d22\u5f15\u4f4d\u7f6e k = indexed_tokens . index ( mark ) # \u9996\u5148\u5bf9\u7b2c\u4e00\u53e5\u8bdd\u8fdb\u884c\u957f\u5ea6\u89c4\u8303\u56e0\u6b64\u5c06indexed_tokens\u622a\u53d6\u5230[:k]\u5224\u65ad if len ( indexed_tokens [: k ]) >= max_len : # \u5982\u679c\u5927\u4e8emax_len, \u5219\u8fdb\u884c\u622a\u65ad indexed_tokens_1 = indexed_tokens [: max_len ] else : # \u5426\u5219\u4f7f\u7528[0]\u8fdb\u884c\u8865\u9f50\uff0c\u8865\u9f50\u76840\u7684\u4e2a\u6570\u5c31\u662fmax_len-len(indexed_tokens[:k]) indexed_tokens_1 = indexed_tokens [: k ] + ( max_len - len ( indexed_tokens [: k ])) * [ 0 ] # \u540c\u7406\u4e0b\u9762\u662f\u5bf9\u7b2c\u4e8c\u53e5\u8bdd\u8fdb\u884c\u89c4\u8303\u957f\u5ea6\u5904\u7406\uff0c\u56e0\u6b64\u622a\u53d6[k:] if len ( indexed_tokens [ k :]) >= max_len : # \u5982\u679c\u5927\u4e8emax_len, \u5219\u8fdb\u884c\u622a\u65ad indexed_tokens_2 = indexed_tokens [ k : k + max_len ] else : # \u5426\u5219\u4f7f\u7528[0]\u8fdb\u884c\u8865\u9f50\uff0c\u8865\u9f50\u76840\u7684\u4e2a\u6570\u5c31\u662fmax_len-len(indexed_tokens[:k]) indexed_tokens_2 = indexed_tokens [ k :] + ( max_len - len ( indexed_tokens [ k :])) * [ 0 ] # \u6700\u540e\u5c06\u5904\u7406\u540e\u7684indexed_tokens_1\u548cindexed_tokens_2\u518d\u8fdb\u884c\u76f8\u52a0 indexed_tokens = indexed_tokens_1 + indexed_tokens_2 # \u4e3a\u4e86\u8ba9\u6a21\u578b\u5728\u7f16\u7801\u65f6\u80fd\u591f\u66f4\u597d\u7684\u533a\u5206\u8fd9\u4e24\u53e5\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5206\u9694ids, # \u5b83\u662f\u4e00\u4e2a\u4e0eindexed_tokens\u7b49\u957f\u7684\u5411\u91cf\uff0c0\u5143\u7d20\u7684\u4f4d\u7f6e\u4ee3\u8868\u662f\u7b2c\u4e00\u53e5\u8bdd # 1\u5143\u7d20\u7684\u4f4d\u7f6e\u4ee3\u8868\u662f\u7b2c\u4e8c\u53e5\u8bdd\uff0c\u957f\u5ea6\u90fd\u662fmax_len segments_ids = [ 0 ] * max_len + [ 1 ] * max_len # \u5c06segments_ids\u548cindexed_tokens\u8f6c\u6362\u6210\u6a21\u578b\u9700\u8981\u7684\u5f20\u91cf\u5f62\u5f0f segments_tensor = torch . tensor ([ segments_ids ]) tokens_tensor = torch . tensor ([ indexed_tokens ]) # \u6a21\u578b\u4e0d\u81ea\u52a8\u6c42\u89e3\u68af\u5ea6 with torch . no_grad (): # \u4f7f\u7528bert model\u8fdb\u884c\u7f16\u7801\uff0c\u4f20\u5165\u53c2\u6570tokens_tensor\u548csegments_tensor\u5f97\u5230encoded_layers encoded_layers = model ( tokens_tensor , token_type_ids = segments_tensor ) return encoded_layers [ 0 ] \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/bert_serve/bert_chinese_encode.py \u8f93\u5165\u53c2\u6570\uff1a text_1 = \"\u4eba\u751f\u8be5\u5982\u4f55\u8d77\u5934\" text_2 = \"\u6539\u53d8\u8981\u5982\u4f55\u8d77\u624b\" \u8c03\u7528\uff1a encoded_layers = get_bert_encode ( text_1 , text_2 )[ 0 ] print ( encoded_layers ) print ( encoded_layers . shape ) \u8f93\u51fa\u6548\u679c\uff1a tensor([[[ 1.0210, 0.0659, -0.3472, ..., 0.5131, -0.7699, 0.0202], [-0.1966, 0.2660, 0.3689, ..., -0.0650, -0.2853, -0.1777], [ 0.9295, -0.3890, -0.1026, ..., 1.3917, 0.4692, -0.0851], ..., [ 1.4777, 0.7781, -0.4310, ..., 0.7403, 0.2006, -0.1198], [ 0.3867, -0.2031, -0.0721, ..., 1.0050, -0.2479, -0.3525], [ 0.0599, 0.2883, -0.4011, ..., -0.1875, -0.2546, 0.0453]]]) torch.Size([1, 20, 768]) \u6ce8\u610f\uff1a\u6709\u65f6\u5019\u4f1a\u4ea7\u751f\u5728\u8c03\u7528\u4e0a\u8ff0\u4ee3\u7801\u65f6\u6253\u5370\u5b57\u7b26\u4e32\u7684\u95ee\u9898\u3002 \u6bd4\u5982\u8c03\u7528\u4ee3\u7801\u6253\u5370\u65f6 \uff1a encoded_layers = get_bert_encode ( text_1 , text_2 )[ 0 ] print ( 'encoder_layers: ' , encoded_layers ) ###################### \u8f93\u51fa\u7684\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32 \uff0c \u800c\u4e0d\u662f\u5e0c\u671b\u7684\u6570\u5b57\u5316\u5f20\u91cf encoder_layers : last_hidden_state \u4e3b\u8981\u539f\u56e0\u662f\u5bf9model\u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u8fdb\u884c\u89e3\u5305\u5bfc\u81f4 \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6709\u5173\u77e5\u8bc6\u548c\u4f5c\u7528\u3002 \u4f7f\u7528BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u53e5\u5b50\u7f16\u7801\u7684\u51fd\u6570\uff1aget_bert_encode 8.4 \u5fae\u8c03\u6a21\u578b \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u5fae\u8c03\u6a21\u578b\u7684\u4f5c\u7528\u3002 \u638c\u63e1\u6784\u5efa\u5168\u8fde\u63a5\u5fae\u8c03\u6a21\u578b\u7684\u8fc7\u7a0b\u3002 \u5fae\u8c03\u6a21\u578b\u7684\u4f5c\u7528\uff1a \u5fae\u8c03\u6a21\u578b\u4e00\u822c\u7528\u5728\u8fc1\u79fb\u5b66\u4e60\u4e2d\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u4e4b\u540e\uff0c\u56e0\u4e3a\u5355\u7eaf\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u5f80\u5f80\u4e0d\u80fd\u9488\u5bf9\u7279\u5b9a\u9886\u57df\u6216\u4efb\u52a1\u83b7\u5f97\u9884\u671f\u7ed3\u679c\uff0c\u9700\u8981\u901a\u8fc7\u5fae\u8c03\u6a21\u578b\u5728\u7279\u5b9a\u9886\u57df\u6216\u4efb\u52a1\u4e0a\u8c03\u8282\u6574\u4f53\u6a21\u578b\u529f\u80fd\uff0c\u4f7f\u5176\u9002\u5e94\u5f53\u4e0b\u95ee\u9898\u3002 \u6784\u5efa\u5168\u8fde\u63a5\u5fae\u8c03\u6a21\u578b\u7684\u4ee3\u7801\u5206\u6790\uff1a import torch import torch.nn as nn import torch.nn.functional as F class Net ( nn . Module ): \"\"\"\u5b9a\u4e49\u5fae\u8c03\u7f51\u7edc\u7684\u7c7b\"\"\" def __init__ ( self , char_size = 20 , embedding_size = 768 , dropout = 0.2 ): \"\"\" :param char_size: \u8f93\u5165\u53e5\u5b50\u4e2d\u7684\u5b57\u7b26\u6570\u91cf\uff0c\u56e0\u4e3a\u89c4\u8303\u540e\u6bcf\u6761\u53e5\u5b50\u957f\u5ea6\u662fmax_len, \u56e0\u6b64char_size\u4e3a2*max_len :param embedding_size: \u5b57\u5d4c\u5165\u7684\u7ef4\u5ea6\uff0c\u56e0\u4e3a\u4f7f\u7528\u7684bert\u4e2d\u6587\u6a21\u578b\u5d4c\u5165\u7ef4\u5ea6\u662f768, \u56e0\u6b64embedding_size\u4e3a768 :param dropout: \u4e3a\u4e86\u9632\u6b62\u8fc7\u62df\u5408\uff0c\u7f51\u7edc\u4e2d\u5c06\u5f15\u5165Dropout\u5c42\uff0cdropout\u4e3a\u7f6e0\u6bd4\u7387\uff0c\u9ed8\u8ba4\u662f0.2 \"\"\" super ( Net , self ) . __init__ () # \u5c06char_size\u548cembedding_size\u4f20\u5165\u5176\u4e2d self . char_size = char_size self . embedding_size = embedding_size # \u5b9e\u4f8b\u5316\u5316\u5fc5\u8981\u7684\u5c42\u548c\u5c42\u53c2\u6570\uff1a # \u5b9e\u4f8b\u5316Dropout\u5c42 self . dropout = nn . Dropout ( p = dropout ) # \u5b9e\u4f8b\u5316\u7b2c\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42 self . fc1 = nn . Linear ( char_size * embedding_size , 8 ) # \u5b9e\u4f8b\u5316\u7b2c\u4e8c\u4e2a\u5168\u8fde\u63a5\u5c42 self . fc2 = nn . Linear ( 8 , 2 ) def forward ( self , x ): # \u5bf9\u8f93\u5165\u7684\u5f20\u91cf\u5f62\u72b6\u8fdb\u884c\u53d8\u6362\uff0c\u4ee5\u6ee1\u8db3\u63a5\u4e0b\u6765\u5c42\u7684\u8f93\u5165\u8981\u6c42 x = x . view ( - 1 , self . char_size * self . embedding_size ) # \u4f7f\u7528dropout\u5c42 x = self . dropout ( x ) # \u4f7f\u7528\u7b2c\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u5e76\u4f7f\u7528relu\u51fd\u6570 x = F . relu ( self . fc1 ( x )) # \u4f7f\u7528dropout\u5c42 x = self . dropout ( x ) # \u4f7f\u7528\u7b2c\u4e8c\u4e2a\u5168\u8fde\u63a5\u5c42\u5e76\u4f7f\u7528relu\u51fd\u6570 x = F . relu ( self . fc2 ( x )) return x \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/bert_serve/finetuning_net.py \u5b9e\u4f8b\u5316\u53c2\u6570\uff1a embedding_size = 768 char_size = 20 dropout = 0.2 \u8f93\u5165\u53c2\u6570\uff1a x = torch.randn(1, 20, 768) \u8c03\u7528\uff1a net = Net(char_size, embedding_size, dropout) nr = net(x) print(nr) \u8f93\u51fa\u6548\u679c\uff1a tensor([[0.0000, 0.4061]], grad_fn=<ReluBackward0>) \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86\u5fae\u8c03\u6a21\u578b\u7684\u4f5c\u7528\uff1a \u5fae\u8c03\u6a21\u578b\u4e00\u822c\u7528\u5728\u8fc1\u79fb\u5b66\u4e60\u4e2d\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u4e4b\u540e\uff0c\u56e0\u4e3a\u5355\u7eaf\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u5f80\u5f80\u4e0d\u80fd\u9488\u5bf9\u7279\u5b9a\u9886\u57df\u6216\u4efb\u52a1\u83b7\u5f97\u9884\u671f\u7ed3\u679c\uff0c\u9700\u8981\u901a\u8fc7\u5fae\u8c03\u6a21\u578b\u5728\u7279\u5b9a\u9886\u57df\u6216\u4efb\u52a1\u4e0a\u8c03\u8282\u6574\u4f53\u6a21\u578b\u529f\u80fd\uff0c\u4f7f\u5176\u9002\u5e94\u5f53\u4e0b\u95ee\u9898\u3002 \u5b66\u4e60\u5e76\u5b9e\u73b0\u4e86\u6784\u5efa\u5168\u8fde\u63a5\u5fae\u8c03\u6a21\u578b\u7684\u7c7b\uff1aclass Net(nn.Module) 8.5 \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u7684\u6b65\u9aa4\u3002 \u638c\u63e1\u6a21\u578b\u8bad\u7ec3\u4e2d\u6bcf\u4e2a\u6b65\u9aa4\u7684\u5b9e\u73b0\u8fc7\u7a0b\u3002 \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u7684\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u6784\u5efa\u6570\u636e\u52a0\u8f7d\u5668\u51fd\u6570\u3002 \u7b2c\u4e8c\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570\u3002 \u7b2c\u4e09\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u9a8c\u8bc1\u51fd\u6570\u3002 \u7b2c\u56db\u6b65\uff1a\u8c03\u7528\u8bad\u7ec3\u548c\u9a8c\u8bc1\u51fd\u6570\u5e76\u6253\u5370\u65e5\u5fd7\u3002 \u7b2c\u4e94\u6b65\uff1a\u7ed8\u5236\u8bad\u7ec3\u548c\u9a8c\u8bc1\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf\u3002 \u7b2c\u516d\u6b65\uff1a\u6a21\u578b\u4fdd\u5b58\u3002 \u7b2c\u4e00\u6b65\uff1a\u6784\u5efa\u6570\u636e\u52a0\u8f7d\u5668\u51fd\u6570 import pandas as pd from sklearn.utils import shuffle from functools import reduce from collections import Counter from bert_chinese_encode import get_bert_encode import torch import torch.nn as nn def data_loader ( data_path , batch_size , split = 0.2 ): \"\"\" description: \u4ece\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6570\u636e\uff0c\u5e76\u5212\u5206\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u53ca\u5176\u6279\u6b21\u5927\u5c0f :param data_path: \u8bad\u7ec3\u6570\u636e\u7684\u6301\u4e45\u5316\u8def\u5f84 :param batch_size: \u8bad\u7ec3\u548c\u9a8c\u8bc1\u6570\u636e\u96c6\u7684\u6279\u6b21\u5927\u5c0f :param split: \u8bad\u7ec3\u96c6\u4e0e\u9a8c\u8bc1\u7684\u5212\u5206\u6bd4\u4f8b :return: \u8bad\u7ec3\u6570\u636e\u751f\u6210\u5668\uff0c\u9a8c\u8bc1\u6570\u636e\u751f\u6210\u5668\uff0c\u8bad\u7ec3\u6570\u636e\u6570\u91cf\uff0c\u9a8c\u8bc1\u6570\u636e\u6570\u91cf \"\"\" # \u4f7f\u7528pd\u8fdb\u884ccsv\u6570\u636e\u7684\u8bfb\u53d6 data = pd . read_csv ( data_path , header = None , sep = \" \\t \" ) # \u6253\u5370\u6574\u4f53\u6570\u636e\u96c6\u4e0a\u7684\u6b63\u8d1f\u6837\u672c\u6570\u91cf print ( \"\u6570\u636e\u96c6\u7684\u6b63\u8d1f\u6837\u672c\u6570\u91cf\uff1a\" ) print ( dict ( Counter ( data [ 0 ] . values ))) # \u6253\u4e71\u6570\u636e\u96c6\u7684\u987a\u5e8f data = shuffle ( data ) . reset_index ( drop = True ) # \u5212\u5206\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6 split_point = int ( len ( data ) * split ) valid_data = data [: split_point ] train_data = data [ split_point :] # \u9a8c\u8bc1\u6570\u636e\u96c6\u4e2d\u7684\u6570\u636e\u603b\u6570\u81f3\u5c11\u80fd\u591f\u6ee1\u8db3\u4e00\u4e2a\u6279\u6b21 if len ( valid_data ) < batch_size : raise ( \"Batch size or split not match!\" ) def _loader_generator ( data ): \"\"\" description: \u83b7\u5f97\u8bad\u7ec3\u96c6/\u9a8c\u8bc1\u96c6\u7684\u6bcf\u4e2a\u6279\u6b21\u6570\u636e\u7684\u751f\u6210\u5668 :param data: \u8bad\u7ec3\u6570\u636e\u6216\u9a8c\u8bc1\u6570\u636e :return: \u4e00\u4e2a\u6279\u6b21\u7684\u8bad\u7ec3\u6570\u636e\u6216\u9a8c\u8bc1\u6570\u636e\u7684\u751f\u6210\u5668 \"\"\" # \u4ee5\u6bcf\u4e2a\u6279\u6b21\u7684\u95f4\u9694\u904d\u5386\u6570\u636e\u96c6 for batch in range ( 0 , len ( data ), batch_size ): # \u9884\u5b9a\u4e8ebatch\u6570\u636e\u7684\u5f20\u91cf\u5217\u8868 batch_encoded = [] batch_labels = [] # \u5c06\u4e00\u4e2abitch_size\u5927\u5c0f\u7684\u6570\u636e\u8f6c\u6362\u6210\u5217\u8868\u5f62\u5f0f\uff0c[[label, text_1, text_2]] # \u5e76\u8fdb\u884c\u9010\u6761\u904d\u5386 for item in data [ batch : batch + batch_size ] . values . tolist (): # \u6bcf\u6761\u6570\u636e\u4e2d\u90fd\u5305\u542b\u4e24\u53e5\u8bdd\uff0c\u4f7f\u7528bert\u4e2d\u6587\u6a21\u578b\u8fdb\u884c\u7f16\u7801 encoded = get_bert_encode ( item [ 1 ], item [ 2 ]) # \u5c06\u7f16\u7801\u540e\u7684\u6bcf\u6761\u6570\u636e\u88c5\u8fdb\u9884\u5148\u5b9a\u4e49\u597d\u7684\u5217\u8868\u4e2d batch_encoded . append ( encoded ) # \u540c\u6837\u5c06\u5bf9\u5e94\u7684\u8be5batch\u7684\u6807\u7b7e\u88c5\u8fdblabels\u5217\u8868\u4e2d batch_labels . append ([ item [ 0 ]]) # \u4f7f\u7528reduce\u9ad8\u9636\u51fd\u6570\u5c06\u5217\u8868\u4e2d\u7684\u6570\u636e\u8f6c\u6362\u6210\u6a21\u578b\u9700\u8981\u7684\u5f20\u91cf\u5f62\u5f0f # encoded\u7684\u5f62\u72b6\u662f(batch_size, 2*max_len, embedding_size) encoded = reduce ( lambda x , y : torch . cat (( x , y ), dim = 0 ), batch_encoded ) labels = torch . tensor ( reduce ( lambda x , y : x + y , batch_labels )) # \u4ee5\u751f\u6210\u5668\u7684\u65b9\u5f0f\u8fd4\u56de\u6570\u636e\u548c\u6807\u7b7e yield ( encoded , labels ) # \u5bf9\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u5206\u522b\u4f7f\u7528_loader_generator\u51fd\u6570\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684\u751f\u6210\u5668 # \u6700\u540e\u8fd8\u8981\u8fd4\u56de\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u7684\u6837\u672c\u6570\u91cf return _loader_generator ( train_data ), _loader_generator ( valid_data ), len ( train_data ), len ( valid_data ) \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/doctor_online/bert_serve/train.py \u8f93\u5165\u53c2\u6570\uff1a # \u6570\u636e\u6240\u5728\u8def\u5f84 data_path = \"./train_data.csv\" # \u5b9a\u4e49batch_size\u5927\u5c0f batch_size = 32 \u8c03\u7528\uff1a train_data_labels, valid_data_labels, \\ train_data_len, valid_data_len = data_loader(data_path, batch_size) print(next(train_data_labels)) print(next(valid_data_labels)) print(\"train_data_len:\", train_data_len) print(\"valid_data_len:\", valid_data_len) \u8f93\u51fa\u6548\u679c\uff1a (tensor([[[-0.7295, 0.8199, 0.8320, ..., 0.0933, 1.2171, 0.4833], [ 0.8707, 1.0131, -0.2556, ..., 0.2179, -1.0671, 0.1946], [ 0.0344, -0.5605, -0.5658, ..., 1.0855, -0.9122, 0.0222]]], tensor([0, 0, 1, 1, 1, 1, 0, 1, 0, 0, ..., 1, 0, 1, 0, 1, 1, 1, 1])) (tensor([[[-0.5263, -0.3897, -0.5725, ..., 0.5523, -0.2289, -0.8796], [ 0.0468, -0.5291, -0.0247, ..., 0.4221, -0.2501, -0.0796], [-0.2133, -0.5552, -0.0584, ..., -0.8031, 0.1753, -0.3476]]]), tensor([0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, ..., 0, 0, 1, 0, 1,1, 1])) train_data_len: 22186 valid_data_len: 5546 \u7b2c\u4e8c\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570 # \u52a0\u8f7d\u5fae\u8c03\u7f51\u7edc from finetuning_net import Net import torch.optim as optim # \u5b9a\u4e49embedding_size, char_size embedding_size = 768 char_size = 2 * max_len # \u5b9e\u4f8b\u5316\u5fae\u8c03\u7f51\u7edc net = Net ( embedding_size , char_size ) # \u5b9a\u4e49\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 criterion = nn . CrossEntropyLoss () # \u5b9a\u4e49SGD\u4f18\u5316\u65b9\u6cd5 optimizer = optim . SGD ( net . parameters (), lr = 0.001 , momentum = 0.9 ) def train ( train_data_labels ): \"\"\" description: \u8bad\u7ec3\u51fd\u6570\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5c06\u66f4\u65b0\u6a21\u578b\u53c2\u6570\uff0c\u5e76\u6536\u96c6\u51c6\u786e\u7387\u548c\u635f\u5931 :param train_data_labels: \u8bad\u7ec3\u6570\u636e\u548c\u6807\u7b7e\u7684\u751f\u6210\u5668\u5bf9\u8c61 :return: \u6574\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u7684\u5e73\u5747\u635f\u5931\u4e4b\u548c\u4ee5\u53ca\u6b63\u786e\u6807\u7b7e\u7684\u7d2f\u52a0\u6570 \"\"\" # \u5b9a\u4e49\u8bad\u7ec3\u8fc7\u7a0b\u7684\u521d\u59cb\u635f\u5931\u548c\u51c6\u786e\u7387\u7d2f\u52a0\u6570 train_running_loss = 0.0 train_running_acc = 0.0 # \u5faa\u73af\u904d\u5386\u8bad\u7ec3\u6570\u636e\u548c\u6807\u7b7e\u751f\u6210\u5668\uff0c\u6bcf\u4e2a\u6279\u6b21\u66f4\u65b0\u4e00\u6b21\u6a21\u578b\u53c2\u6570 for train_tensor , train_labels in train_data_labels : # \u521d\u59cb\u5316\u8be5\u6279\u6b21\u7684\u4f18\u5316\u5668 optimizer . zero_grad () # \u4f7f\u7528\u5fae\u8c03\u7f51\u7edc\u83b7\u5f97\u8f93\u51fa train_outputs = net ( train_tensor ) # \u5f97\u5230\u8be5\u6279\u6b21\u4e0b\u7684\u5e73\u5747\u635f\u5931 train_loss = criterion ( train_outputs , train_labels ) # \u5c06\u8be5\u6279\u6b21\u7684\u5e73\u5747\u635f\u5931\u52a0\u5230train_running_loss\u4e2d train_running_loss += train_loss . item () # \u635f\u5931\u53cd\u5411\u4f20\u64ad train_loss . backward () # \u4f18\u5316\u5668\u66f4\u65b0\u6a21\u578b\u53c2\u6570 optimizer . step () # \u5c06\u8be5\u6279\u6b21\u4e2d\u6b63\u786e\u7684\u6807\u7b7e\u6570\u91cf\u8fdb\u884c\u7d2f\u52a0\uff0c\u4ee5\u4fbf\u4e4b\u540e\u8ba1\u7b97\u51c6\u786e\u7387 train_running_acc += ( train_outputs . argmax ( 1 ) == train_labels ) . sum () . item () return train_running_loss , train_running_acc \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/doctor_online/bert_serve/train.py \u7b2c\u4e09\u6b65\uff1a\u6a21\u578b\u9a8c\u8bc1\u51fd\u6570 def valid ( valid_data_labels ): \"\"\" description: \u9a8c\u8bc1\u51fd\u6570\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5c06\u9a8c\u8bc1\u6a21\u578b\u7684\u5728\u65b0\u6570\u636e\u96c6\u4e0a\u7684\u6807\u7b7e\uff0c\u6536\u96c6\u635f\u5931\u548c\u51c6\u786e\u7387 :param valid_data_labels: \u9a8c\u8bc1\u6570\u636e\u548c\u6807\u7b7e\u7684\u751f\u6210\u5668\u5bf9\u8c61 :return: \u6574\u4e2a\u9a8c\u8bc1\u8fc7\u7a0b\u7684\u5e73\u5747\u635f\u5931\u4e4b\u548c\u4ee5\u53ca\u6b63\u786e\u6807\u7b7e\u7684\u7d2f\u52a0\u6570 \"\"\" # \u5b9a\u4e49\u8bad\u7ec3\u8fc7\u7a0b\u7684\u521d\u59cb\u635f\u5931\u548c\u51c6\u786e\u7387\u7d2f\u52a0\u6570 valid_running_loss = 0.0 valid_running_acc = 0.0 # \u5faa\u73af\u904d\u5386\u9a8c\u8bc1\u6570\u636e\u548c\u6807\u7b7e\u751f\u6210\u5668 for valid_tensor , valid_labels in valid_data_labels : # \u4e0d\u81ea\u52a8\u66f4\u65b0\u68af\u5ea6 with torch . no_grad (): # \u4f7f\u7528\u5fae\u8c03\u7f51\u7edc\u83b7\u5f97\u8f93\u51fa valid_outputs = net ( valid_tensor ) # \u5f97\u5230\u8be5\u6279\u6b21\u4e0b\u7684\u5e73\u5747\u635f\u5931 valid_loss = criterion ( valid_outputs , valid_labels ) # \u5c06\u8be5\u6279\u6b21\u7684\u5e73\u5747\u635f\u5931\u52a0\u5230valid_running_loss\u4e2d valid_running_loss += valid_loss . item () # \u5c06\u8be5\u6279\u6b21\u4e2d\u6b63\u786e\u7684\u6807\u7b7e\u6570\u91cf\u8fdb\u884c\u7d2f\u52a0\uff0c\u4ee5\u4fbf\u4e4b\u540e\u8ba1\u7b97\u51c6\u786e\u7387 valid_running_acc += ( valid_outputs . argmax ( 1 ) == valid_labels ) . sum () . item () return valid_running_loss , valid_running_acc \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/doctor_online/bert_serve/train.py \u7b2c\u56db\u6b65\uff1a\u8c03\u7528\u8bad\u7ec3\u548c\u9a8c\u8bc1\u51fd\u6570\u5e76\u6253\u5370\u65e5\u5fd7 # \u5b9a\u4e49\u8bad\u7ec3\u8f6e\u6570 epochs = 20 # \u5b9a\u4e49\u76db\u88c5\u6bcf\u8f6e\u6b21\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u5217\u8868\uff0c\u7528\u4e8e\u5236\u56fe all_train_losses = [] all_valid_losses = [] all_train_acc = [] all_valid_acc = [] # \u8fdb\u884c\u6307\u5b9a\u8f6e\u6b21\u7684\u8bad\u7ec3 for epoch in range ( epochs ): # \u6253\u5370\u8f6e\u6b21 print ( \"Epoch:\" , epoch + 1 ) # \u901a\u8fc7\u6570\u636e\u52a0\u8f7d\u5668\u83b7\u5f97\u8bad\u7ec3\u6570\u636e\u548c\u9a8c\u8bc1\u6570\u636e\u751f\u6210\u5668\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684\u6837\u672c\u6570\u91cf train_data_labels , valid_data_labels , train_data_len , valid_data_len = data_loader ( data_path , batch_size ) # \u8c03\u7528\u8bad\u7ec3\u51fd\u6570\u8fdb\u884c\u8bad\u7ec3 train_running_loss , train_running_acc = train ( train_data_labels ) # \u8c03\u7528\u9a8c\u8bc1\u51fd\u6570\u8fdb\u884c\u9a8c\u8bc1 valid_running_loss , valid_running_acc = valid ( valid_data_labels ) # \u8ba1\u7b97\u6bcf\u4e00\u8f6e\u7684\u5e73\u5747\u635f\u5931\uff0ctrain_running_loss\u548cvalid_running_loss\u662f\u6bcf\u4e2a\u6279\u6b21\u7684\u5e73\u5747\u635f\u5931\u4e4b\u548c # \u56e0\u6b64\u5c06\u5b83\u4eec\u4e58\u4ee5batch_size\u5c31\u5f97\u5230\u4e86\u8be5\u8f6e\u7684\u603b\u635f\u5931\uff0c\u9664\u4ee5\u6837\u672c\u6570\u5373\u8be5\u8f6e\u6b21\u7684\u5e73\u5747\u635f\u5931 train_average_loss = train_running_loss * batch_size / train_data_len valid_average_loss = valid_running_loss * batch_size / valid_data_len # train_running_acc\u548cvalid_running_acc\u662f\u6bcf\u4e2a\u6279\u6b21\u7684\u6b63\u786e\u6807\u7b7e\u7d2f\u52a0\u548c\uff0c # \u56e0\u6b64\u53ea\u9700\u9664\u4ee5\u5bf9\u5e94\u6837\u672c\u603b\u6570\u5373\u662f\u8be5\u8f6e\u6b21\u7684\u51c6\u786e\u7387 train_average_acc = train_running_acc / train_data_len valid_average_acc = valid_running_acc / valid_data_len # \u5c06\u8be5\u8f6e\u6b21\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u88c5\u8fdb\u5168\u5c40\u635f\u5931\u548c\u51c6\u786e\u7387\u5217\u8868\u4e2d\uff0c\u4ee5\u4fbf\u5236\u56fe all_train_losses . append ( train_average_loss ) all_valid_losses . append ( valid_average_loss ) all_train_acc . append ( train_average_acc ) all_valid_acc . append ( valid_average_acc ) # \u6253\u5370\u8be5\u8f6e\u6b21\u4e0b\u7684\u8bad\u7ec3\u635f\u5931\u548c\u51c6\u786e\u7387\u4ee5\u53ca\u9a8c\u8bc1\u635f\u5931\u548c\u51c6\u786e\u7387 print ( \"Train Loss:\" , train_average_loss , \"|\" , \"Train Acc:\" , train_average_acc ) print ( \"Valid Loss:\" , valid_average_loss , \"|\" , \"Valid Acc:\" , valid_average_acc ) print ( 'Finished Training' ) \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/doctor_online/bert_serve/train.py \u8f93\u51fa\u6548\u679c\uff1a Epoch: 1 Train Loss: 0.693169563147374 | Train Acc: 0.5084898843930635 Valid Loss: 0.6931480603018824 | Valid Acc: 0.5042777377521613 {1: 14015, 0: 13720} Epoch: 2 Train Loss: 0.6931440165277162 | Train Acc: 0.514992774566474 Valid Loss: 0.6931474804019379 | Valid Acc: 0.5026567002881844 {1: 14015, 0: 13720} Epoch: 3 Train Loss: 0.6931516138804441 | Train Acc: 0.5 Valid Loss: 0.69314516217633 | Valid Acc: 0.5065291786743515 {1: 14015, 0: 13720} Epoch: 4 Train Loss: 0.6931474804878235 | Train Acc: 0.5065028901734104 Valid Loss: 0.6931472256650842 | Valid Acc: 0.5052233429394812 {1: 14015, 0: 13720} Epoch: 5 Train Loss: 0.6931474804878235 | Train Acc: 0.5034320809248555 Valid Loss: 0.6931475739314165 | Valid Acc: 0.5055385446685879 {1: 14015, 0: 13720} Epoch: 6 Train Loss: 0.6931492934337241 | Train Acc: 0.5126445086705202 Valid Loss: 0.6931462547277512 | Valid Acc: 0.5033771613832853 {1: 14015, 0: 13720} Epoch: 7 Train Loss: 0.6931459204309938 | Train Acc: 0.5095736994219653 Valid Loss: 0.6931174922229921 | Valid Acc: 0.5065742074927954 {1: 14015, 0: 13720} Epoch: 8 Train Loss: 0.5545259035391614 | Train Acc: 0.759393063583815 Valid Loss: 0.4199462383770805 | Valid Acc: 0.9335374639769453 {1: 14015, 0: 13720} Epoch: 9 Train Loss: 0.4011955714294676 | Train Acc: 0.953757225433526 Valid Loss: 0.3964169790877045 | Valid Acc: 0.9521793948126801 {1: 14015, 0: 13720} Epoch: 10 Train Loss: 0.3893018603497158 | Train Acc: 0.9669436416184971 Valid Loss: 0.3928600374491139 | Valid Acc: 0.9525846541786743 {1: 14015, 0: 13720} Epoch: 11 Train Loss: 0.3857506763383832 | Train Acc: 0.9741690751445087 Valid Loss: 0.38195425426582097 | Valid Acc: 0.9775306195965417 {1: 14015, 0: 13720} Epoch: 12 Train Loss: 0.38368317760484066 | Train Acc: 0.9772398843930635 Valid Loss: 0.37680484129046155 | Valid Acc: 0.9780259365994236 {1: 14015, 0: 13720} Epoch: 13 Train Loss: 0.37407022137517876 | Train Acc: 0.9783236994219653 Valid Loss: 0.3750278927192564 | Valid Acc: 0.9792867435158501 {1: 14015, 0: 13720} Epoch: 14 Train Loss: 0.3707401707682306 | Train Acc: 0.9801300578034682 Valid Loss: 0.37273150721097886 | Valid Acc: 0.9831592219020173 {1: 14015, 0: 13720} Epoch: 15 Train Loss: 0.37279492521906177 | Train Acc: 0.9817557803468208 Valid Loss: 0.3706809586123362 | Valid Acc: 0.9804574927953891 {1: 14015, 0: 13720} Epoch: 16 Train Loss: 0.37660940017314315 | Train Acc: 0.9841040462427746 Valid Loss: 0.3688154769390392 | Valid Acc: 0.984600144092219 {1: 14015, 0: 13720} Epoch: 17 Train Loss: 0.3749892661681754 | Train Acc: 0.9841040462427746 Valid Loss: 0.3688570175760074 | Valid Acc: 0.9817633285302594 {1: 14015, 0: 13720} Epoch: 18 Train Loss: 0.37156562515765945 | Train Acc: 0.9826589595375722 Valid Loss: 0.36880484627028365 | Valid Acc: 0.9853656340057637 {1: 14015, 0: 13720} Epoch: 19 Train Loss: 0.3674713007976554 | Train Acc: 0.9830202312138728 Valid Loss: 0.366314563545954 | Valid Acc: 0.9850954610951008 {1: 14015, 0: 13720} Epoch: 20 Train Loss: 0.36878046806837095 | Train Acc: 0.9842846820809249 Valid Loss: 0.367835852100114 | Valid Acc: 0.9793317723342939 Finished Training \u7b2c\u4e94\u6b65\uff1a\u7ed8\u5236\u8bad\u7ec3\u548c\u9a8c\u8bc1\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf # \u5bfc\u5165\u5236\u56fe\u5de5\u5177\u5305 import matplotlib.pyplot as plt from matplotlib.pyplot import MultipleLocator # \u521b\u5efa\u7b2c\u4e00\u5f20\u753b\u5e03 plt . figure ( 0 ) # \u7ed8\u5236\u8bad\u7ec3\u635f\u5931\u66f2\u7ebf plt . plot ( all_train_losses , label = \"Train Loss\" ) # \u7ed8\u5236\u9a8c\u8bc1\u635f\u5931\u66f2\u7ebf\uff0c\u989c\u8272\u4e3a\u7ea2\u8272 plt . plot ( all_valid_losses , color = \"red\" , label = \"Valid Loss\" ) # \u5b9a\u4e49\u6a2a\u5750\u6807\u523b\u5ea6\u95f4\u9694\u5bf9\u8c61\uff0c\u95f4\u9694\u4e3a1, \u4ee3\u8868\u6bcf\u4e00\u8f6e\u6b21 x_major_locator = MultipleLocator ( 1 ) # \u83b7\u5f97\u5f53\u524d\u5750\u6807\u56fe\u53e5\u67c4 ax = plt . gca () # \u8bbe\u7f6e\u6a2a\u5750\u6807\u523b\u5ea6\u95f4\u9694 ax . xaxis . set_major_locator ( x_major_locator ) # \u8bbe\u7f6e\u6a2a\u5750\u6807\u53d6\u503c\u8303\u56f4 plt . xlim ( 1 , epochs ) # \u66f2\u7ebf\u8bf4\u660e\u5728\u5de6\u4e0a\u65b9 plt . legend ( loc = 'upper left' ) # \u4fdd\u5b58\u56fe\u7247 plt . savefig ( \"./loss.png\" ) # \u521b\u5efa\u7b2c\u4e8c\u5f20\u753b\u5e03 plt . figure ( 1 ) # \u7ed8\u5236\u8bad\u7ec3\u51c6\u786e\u7387\u66f2\u7ebf plt . plot ( all_train_acc , label = \"Train Acc\" ) # \u7ed8\u5236\u9a8c\u8bc1\u51c6\u786e\u7387\u66f2\u7ebf\uff0c\u989c\u8272\u4e3a\u7ea2\u8272 plt . plot ( all_valid_acc , color = \"red\" , label = \"Valid Acc\" ) # \u5b9a\u4e49\u6a2a\u5750\u6807\u523b\u5ea6\u95f4\u9694\u5bf9\u8c61\uff0c\u95f4\u9694\u4e3a1, \u4ee3\u8868\u6bcf\u4e00\u8f6e\u6b21 x_major_locator = MultipleLocator ( 1 ) # \u83b7\u5f97\u5f53\u524d\u5750\u6807\u56fe\u53e5\u67c4 ax = plt . gca () # \u8bbe\u7f6e\u6a2a\u5750\u6807\u523b\u5ea6\u95f4\u9694 ax . xaxis . set_major_locator ( x_major_locator ) # \u8bbe\u7f6e\u6a2a\u5750\u6807\u53d6\u503c\u8303\u56f4 plt . xlim ( 1 , epochs ) # \u66f2\u7ebf\u8bf4\u660e\u5728\u5de6\u4e0a\u65b9 plt . legend ( loc = 'upper left' ) # \u4fdd\u5b58\u56fe\u7247 plt . savefig ( \"./acc.png\" ) \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/doctor_online/bert_serve/train.py \u8bad\u7ec3\u548c\u9a8c\u8bc1\u635f\u5931\u5bf9\u7167\u66f2\u7ebf\uff1a \u8bad\u7ec3\u548c\u9a8c\u8bc1\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf\uff1a \u5206\u6790\uff1a \u6839\u636e\u635f\u5931\u5bf9\u7167\u66f2\u7ebf\uff0c\u5fae\u8c03\u6a21\u578b\u5728\u7b2c6\u8f6e\u5de6\u53f3\u5f00\u59cb\u638c\u63e1\u6570\u636e\u89c4\u5f8b\u8fc5\u901f\u4e0b\u964d\uff0c\u8bf4\u660e\u6a21\u578b\u80fd\u591f\u4ece\u6570\u636e\u4e2d\u83b7\u53d6\u8bed\u6599\u7279\u5f81\uff0c\u6b63\u5728\u6536\u655b\u3002\u6839\u636e\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf\u4e2d\u9a8c\u8bc1\u51c6\u786e\u7387\u5728\u7b2c10\u8f6e\u5de6\u53f3\u533a\u57df\u7a33\u5b9a\uff0c\u6700\u7ec8\u7ef4\u6301\u572898%\u5de6\u53f3\u3002 \u7b2c\u516d\u6b65\uff1a\u6a21\u578b\u4fdd\u5b58 # \u6a21\u578b\u4fdd\u5b58\u65f6\u95f4 time_ = int(time.time()) # \u4fdd\u5b58\u8def\u5f84 MODEL_PATH = './model/BERT_net_%d.pth' % time_ # \u4fdd\u5b58\u6a21\u578b\u53c2\u6570 torch.save(rnn.state_dict(), MODEL_PATH) \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/doctor_online/bert_serve/train.py \u8f93\u51fa\u6548\u679c\uff1a \u5728/data/bert_serve/\u8def\u5f84\u4e0b\u751f\u6210BERT_net_ + \u65f6\u95f4\u6233\u3002pth\u7684\u6587\u4ef6\u3002 \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u7684\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u6784\u5efa\u6570\u636e\u52a0\u8f7d\u5668\u51fd\u6570\u3002 \u7b2c\u4e8c\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570\u3002 \u7b2c\u4e09\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u9a8c\u8bc1\u51fd\u6570\u3002 \u7b2c\u56db\u6b65\uff1a\u8c03\u7528\u8bad\u7ec3\u548c\u9a8c\u8bc1\u51fd\u6570\u5e76\u6253\u5370\u65e5\u5fd7\u3002 \u7b2c\u4e94\u6b65\uff1a\u7ed8\u5236\u8bad\u7ec3\u548c\u9a8c\u8bc1\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf\u3002 \u7b2c\u516d\u6b65\uff1a\u6a21\u578b\u4fdd\u5b58\u3002 8.6 \u6a21\u578b\u90e8\u7f72 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u638c\u63e1\u4f7f\u7528Flask\u6846\u67b6\u8fdb\u884c\u6a21\u578b\u90e8\u7f72\u7684\u5b9e\u73b0\u8fc7\u7a0b\u3002 \u4f7f\u7528Flask\u6846\u67b6\u8fdb\u884c\u6a21\u578b\u90e8\u7f72\u7684\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u90e8\u7f72\u6a21\u578b\u9884\u6d4b\u4ee3\u7801\u3002 \u7b2c\u4e8c\u6b65\uff1a\u4ee5\u6302\u8d77\u7684\u65b9\u5f0f\u542f\u52a8\u670d\u52a1\u3002 \u7b2c\u4e09\u6b65\uff1a\u8fdb\u884c\u6d4b\u8bd5\u3002 \u7b2c\u4e00\u6b65\uff1a\u90e8\u7f72\u6a21\u578b\u9884\u6d4b\u4ee3\u7801 from flask import Flask from flask import request app = Flask ( __name__ ) import torch # \u5bfc\u5165\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u7f16\u7801\u51fd\u6570 from bert_chinese_encode import get_bert_encode # \u5bfc\u5165\u5fae\u8c03\u7f51\u7edc from finetuning_net import Net # \u5bfc\u5165\u8bad\u7ec3\u597d\u7684\u6a21\u578b MODEL_PATH = \"./model/BERT_net.pth\" # \u5b9a\u4e49\u5b9e\u4f8b\u5316\u6a21\u578b\u53c2\u6570 embedding_size = 768 char_size = 20 dropout = 0.2 # \u521d\u59cb\u5316\u5fae\u8c03\u7f51\u7edc\u6a21\u578b net = Net ( embedding_size , char_size , dropout ) # \u52a0\u8f7d\u6a21\u578b\u53c2\u6570 net . load_state_dict ( torch . load ( MODEL_PATH )) # \u4f7f\u7528\u8bc4\u4f30\u6a21\u5f0f net . eval () # \u5b9a\u4e49\u670d\u52a1\u8bf7\u6c42\u8def\u5f84\u548c\u65b9\u5f0f @app . route ( '/v1/recognition/' , methods = [ \"POST\" ]) def recognition (): # \u63a5\u6536\u6570\u636e text_1 = request . form [ 'text1' ] text_2 = request . form [ 'text2' ] # \u5bf9\u539f\u59cb\u6587\u672c\u8fdb\u884c\u7f16\u7801 inputs = get_bert_encode ( text_1 , text_2 , mark = 102 , max_len = 10 ) # \u4f7f\u7528\u5fae\u8c03\u6a21\u578b\u8fdb\u884c\u9884\u6d4b outputs = net ( inputs ) # \u83b7\u5f97\u9884\u6d4b\u7ed3\u679c _ , predicted = torch . max ( outputs , 1 ) # \u8fd4\u56de\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u7ed3\u679c return str ( predicted . item ()) \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/bert_serve/app.py \u7b2c\u4e8c\u6b65\uff1a\u542f\u52a8\u670d\u52a1 gunicorn -w 1 -b 0.0.0.0:5001 app:app \u7b2c\u4e09\u6b65\uff1a\u8fdb\u884c\u6d4b\u8bd5 \u6d4b\u8bd5\u811a\u672c\uff1a import requests url = \"http://0.0.0.0:5001/v1/recognition/\" data = { \"text1\" : \"\u4eba\u751f\u8be5\u5982\u4f55\u8d77\u5934\" , \"text2\" : \"\u6539\u53d8\u8981\u5982\u4f55\u8d77\u624b\" } res = requests . post ( url , data = data ) print ( \"\u9884\u6d4b\u6837\u672c\uff1a\" , data [ \"text_1\" ], \"|\" , data [ \"text_2\" ]) print ( \"\u9884\u6d4b\u7ed3\u679c\uff1a\" , res . text ) \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/bert_serve/test.py \u8fd0\u884c\u811a\u672c\uff1a python test.py \u8f93\u51fa\u6548\u679c\uff1a \u9884\u6d4b\u6837\u672c\uff1a\u4eba\u751f\u8be5\u5982\u4f55\u8d77\u5934 | \u6539\u53d8\u8981\u5982\u4f55\u8d77\u624b \u9884\u6d4b\u7ed3\u679c\uff1a1 \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86\u4f7f\u7528Flask\u6846\u67b6\u8fdb\u884c\u6a21\u578b\u90e8\u7f72\u7684\u5b9e\u73b0\u8fc7\u7a0b\uff1a \u7b2c\u4e00\u6b65\uff1a\u90e8\u7f72\u6a21\u578b\u9884\u6d4b\u4ee3\u7801\u3002 \u7b2c\u4e8c\u6b65\uff1a\u4ee5\u6302\u8d77\u7684\u65b9\u5f0f\u542f\u52a8\u670d\u52a1\u3002 \u7b2c\u4e09\u6b65\uff1a\u8fdb\u884c\u6d4b\u8bd5\u3002","title":"\u7b2c\u516b\u7ae0:\u53e5\u5b50\u4e3b\u9898\u76f8\u5173\u4efb\u52a1"},{"location":"8.html#81","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u53e5\u5b50\u4e3b\u9898\u76f8\u5173\u4efb\u52a1\u7684\u76f8\u5173\u77e5\u8bc6\u3002 \u4e86\u89e3\u9009\u7528\u7684\u6a21\u578b\u53ca\u5176\u539f\u56e0\u3002 \u53e5\u5b50\u4e3b\u9898\u76f8\u5173\u4efb\u52a1\uff1a \u5728\u591a\u8f6e\u5bf9\u8bdd\u7cfb\u7edf\u4e2d\uff0c\u5f80\u5f80\u9700\u8981\u5224\u65ad\u7528\u6237\u7684\u6700\u8fd1\u4e24\u6b21\u56de\u590d\u662f\u5426\u56f4\u7ed5\u540c\u4e00\u4e3b\u9898\uff0c\u6765\u51b3\u5b9a\u95ee\u7b54\u673a\u5668\u4eba\u662f\u5426\u4e5f\u6839\u636e\u81ea\u5df1\u4e0a\u4e00\u6b21\u7684\u56de\u590d\u6765\u8ba8\u8bba\u76f8\u5173\u5185\u5bb9\u3002\u5728\u7ebf\u533b\u751f\u95ee\u7b54\u8fc7\u7a0b\u4e2d\uff0c\u540c\u6837\u9700\u8981\u8fd9\u6837\u7684\u5904\u7406\uff0c\u786e\u4fdd\u7528\u6237\u4e00\u76f4\u8ba8\u8bba\u75be\u75c5\u6709\u5173\u7684\u5185\u5bb9\uff0c\u6765\u6839\u636e\u75c7\u72b6\u63a8\u65ad\u75c5\u60c5\u3002\u8fd9\u79cd\u4efb\u52a1\u7684\u5f62\u5f0f\u4e0e\u5224\u65ad\u4e24\u4e2a\u53e5\u5b50\u662f\u5426\u8fde\u8d2f\u7684\u5f62\u5f0f\u76f8\u540c\uff0c\u4ed6\u4eec\u90fd\u9700\u8981\u8f93\u5165\u4e24\u6bb5\u6587\u672c\u5185\u5bb9\uff0c\u8fd4\u56de'\u662f'\u6216'\u5426'\u7684\u4e8c\u5206\u7c7b\u6807\u7b7e\u3002 \u9009\u7528\u7684\u6a21\u578b\u53ca\u5176\u539f\u56e0\uff1a \u5bf9\u8bdd\u7cfb\u7edf\u662f\u5f00\u653e\u7684\u8bed\u8a00\u5904\u7406\u7cfb\u7edf\uff0c\u53ef\u80fd\u51fa\u73b0\u5404\u79cd\u6587\u5b57\uff0c\u5f53\u6211\u4eec\u7684\u8bad\u7ec3\u96c6\u6709\u9650\u65e0\u6cd5\u8986\u76d6\u5927\u591a\u6570\u60c5\u51b5\u65f6\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u8fdb\u884c\u6587\u5b57\u8868\u793a\u3002\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u4e86bert-chinese\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u540c\u65f6\u4e3a\u4e86\u9002\u5e94\u6211\u4eec\u7814\u7a76\u7684\u5782\u76f4\u9886\u57df\uff0c\u6211\u4eec\u5728\u540e\u9762\u81ea\u5b9a\u4e49\u6d45\u5c42\u7684\u5fae\u8c03\u6a21\u578b\uff0c\u5b83\u5c06\u7531\u4e24\u5c42\u5168\u8fde\u63a5\u7f51\u7edc\u7ec4\u6210\uff0c\u4e4b\u540e\u6211\u4eec\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u3002","title":"8.1 \u4efb\u52a1\u4ecb\u7ecd\u4e0e\u6a21\u578b\u9009\u7528"},{"location":"8.html#82","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u5f0f\u53ca\u5176\u76f8\u5173\u89e3\u91ca\u3002 \u4e86\u89e3\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6765\u6e90\u548c\u6269\u5145\u65b9\u5f0f\u3002 \u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6837\u5f0f\uff1a 1 \u8179\u80a1\u6c9f\u6dcb\u5df4\u7ed3\u80bf\u5927\u8179\u80a1\u6c9f\u76ae\u4e0b\u5305\u5757 \u60f3\u8bf7\u60a8\u5e2e\u5fd9\u89e3\u8bfb\u4e00\u4e0b\u4e0a\u9762\u7684b\u8d85\u7ed3\u679c\uff0c\u662f\u5426\u8981\u6cbb\u7597\uff0c\u6216\u505a\u8fdb\u4e00\u6b65\u7684\u68c0\u67e5\uff1f>\u56e0\u4e3a\u505a\u5b8cb\u8d85\u533b\u751f\u4e0b\u73ed\u4e86 1 \u60f3\u8bf7\u60a8\u5e2e\u5fd9\u89e3\u8bfb\u4e00\u4e0b\u4e0a\u9762\u7684b\u8d85\u7ed3\u679c\uff0c\u662f\u5426\u8981\u6cbb\u7597\uff0c\u6216\u505a\u8fdb\u4e00\u6b65\u7684\u68c0\u67e5\uff1f\u56e0\u4e3a\u505a\u5b8cb\u8d85\u533b\u751f\u4e0b\u73ed\u4e86 \u5de6\u4fa7\u7684\u5305 \u5757\u662f\u5426\u662f\u666e\u901a\u7684\u6dcb\u5df4\u7ed3\u80bf\u5927\uff1f 1 \u5de6\u4fa7\u7684\u5305\u5757\u662f\u5426\u662f\u666e\u901a\u7684\u6dcb\u5df4\u7ed3\u80bf\u5927\uff1f \u6309\u538b\u4e0d\u75bc\uff0c\u4f46\u7528\u624b\u6572\u4f1a\u6709\u70b9\u523a\u75db 1 \u6309\u538b\u4e0d\u75bc\uff0c\u4f46\u7528\u624b\u6572\u4f1a\u6709\u70b9\u523a\u75db \uff1f 1 \u6297\u8c2c\u808b\u6c0f\u7ba1\u6fc0\u7d20\u504f\u4f4e\u6297\u7f2a\u808b\u6c0f\u7ba1\u6fc0\u7d20\u504f\u4f4e \u6628\u5929\u540c\u623f\u540e\u51fa\u8840\u4e86\uff0c\u4ee5\u524d\u90fd\u4e0d\u4f1a\uff0c\u5148\u662f\u9c9c\u7ea2\u8272\uff0c\u4eca\u5929\u53d8\u8910\u8272\uff0c\u5c11 \u91cf\uff0c\u4e0d\u60f3\u53bb\u533b\u9662\u68c0\u67e5\uff0c\u8fc7\u51e0\u5929\u5b83\u4f1a\u81ea\u5df1\u505c\u5427\uff1f\u8fd8\u662f\u8981\u5403\u4ec0\u4e48\u836f\uff1f 0 \u6c34\u75d8\u6c34\u75d8\u540e\u7b2c\u4e03\u5929\u8138\u4e0a\u8272\u7d20\u4e25\u91cd \u4e94\u9669\u4e00\u91d1\u4f1a\u4e0b\u8c03\u5417 0 \u817a\u6837\u4f53\u91cd\u5ea6\u80a5\u5927\uff0c\u5206\u6ccc\u6027\u4e2d\u8033\u708e\u5b9d\u5b9d\u817a\u6837\u4f53\u80a5\u5927\u600e\u4e48\u529e \u6211\u7238\u56e0\u8f66\u7978\u6b7b\u4ea1\u610f\u5916\u9669\u80fd\u8d54\u507f\u5417 0 \u5c3f\u8840\u5c3f\u8840\u8fd9\u79cd\u60c5\u51b5\u8981\u6c42\u9ad8\u4e0d\u9ad8\u6cbb\u7597 \u8f66\u8f86\u4fdd\u9669\u7406\u8d54\u56de\u6267\u5f04\u4e22\u4e86\u53ef\u4ee5\u8865\u5417 0 \u5c3f\u8def\u611f\u67d3\u5c3f\u8def\u611f\u67d3\u5907\u5b55\u4e2d \u5728\u5355\u4f4d\u8f9e\u804c\u4e86\uff0c\u5f53\u65f6\u6ca1\u529e\u533b\u4fdd\uff0c\u662f\u5426\u80fd\u7533\u529e\u5c45\u6c11\u533b\u4fdd\uff1f 0 \u773c\u89d2\u6709\u8840\u5757\u5de6\u773c\u89d2\u6709\u8840\u5757\u72b6 \u6709\u8c01\u77e5\u9053\uff0c\u5b89*\u957f*\u6811\u51fa\u9669\u4e86\u9700\u8981\u63d0\u4f9b\u54ea\u4e9b\u533b\u9662\u8bc1\u660e\uff1f \u6570\u636e\u96c6\u7684\u76f8\u5173\u89e3\u91ca\uff1a \u6570\u636e\u96c6\u4e2d\u7684\u7b2c\u4e00\u5217\u4ee3\u8868\u6807\u7b7e\uff0c1\u4e3a\u6b63\u6807\u7b7e\uff0c\u4ee3\u8868\u540e\u9762\u7684\u4e24\u53e5\u8bdd\u662f\u5728\u8ba8\u8bba\u540c\u4e00\u4e3b\u9898\u30020\u4e3a\u8d1f\u6807\u7b7e\uff0c\u4ee3\u8868\u540e\u9762\u7684\u4e24\u53e5\u8bdd\u4e0d\u76f8\u5173\u3002 \u6570\u636e\u96c6\u4e2d\u7684\u7b2c\u4e8c\u5217\u662f\u7528\u6237\u56de\u590d\u7684\u6587\u672c\u4fe1\u606f\uff0c\u7b2c\u4e09\u5217\u662f\u4e0e\u4e0a\u4e00\u53e5\u76f8\u5173\u6216\u4e0d\u76f8\u5173\u7684\u6587\u672c\u3002 \u6b63\u8d1f\u6837\u672c\u7684\u6bd4\u4f8b\u662f1:1\u5de6\u53f3 \u6570\u636e\u96c6\u6240\u5728\u4f4d\u7f6e\uff1a/data/doctor_online/bert_serve/train_data.csv \u6570\u636e\u96c6\u6765\u6e90\u53ca\u5176\u6269\u5145\u65b9\u5f0f\uff1a \u6765\u6e90\uff1a\u6b63\u6837\u672c\u6570\u636e\u6765\u81ea\u7f51\u7edc\u533b\u60a3\u5728\u7ebf\u95ee\u7b54\u7684\u771f\u5b9e\u8bed\u6599\u3002\u8d1f\u6837\u672c\u6765\u81ea\u5176\u4ed6\u4f7f\u7528\u5176\u4ed6\u95ee\u7b54\u8bed\u6599\u7684\u56de\u590d\u4fe1\u606f\uff0c\u4fdd\u8bc1\u4e24\u6bb5\u6587\u672c\u4e0d\u76f8\u5173\u3002 \u6269\u5145\u65b9\u5f0f\uff1a\u6839\u636e\u6765\u6e90\uff0c\u53ef\u901a\u8fc7\u6570\u636e\u6293\u53d6\u6280\u672f\u5bf9\u8bed\u6599\u96c6\u8fdb\u884c\u6269\u5145\u3002","title":"8.2 \u8bad\u7ec3\u6570\u636e\u96c6"},{"location":"8.html#83-bert","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6709\u5173\u77e5\u8bc6\u548c\u4f5c\u7528\u3002 \u638c\u63e1\u4f7f\u7528BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u53e5\u5b50\u7f16\u7801\u7684\u8fc7\u7a0b\u3002 BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\uff1a BERT\u6a21\u578b\u6574\u4f53\u67b6\u6784\u57fa\u4e8eTransformer\u6a21\u578b\u67b6\u6784(\u53ea\u4f7f\u7528Transformer\u4e2d\u7684\u7f16\u7801\u5668), BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u7684Transformer\u7f16\u7801\u5668\u5177\u670912\u5c42\uff0c\u8f93\u51fa\u5c42\u4e2d\u7684\u7ebf\u6027\u5c42\u5177\u6709768\u4e2a\u8282\u70b9\uff0c\u5373\u8f93\u51fa\u5f20\u91cf\u6700\u540e\u4e00\u7ef4\u7684\u7ef4\u5ea6\u662f768. \u5b83\u4f7f\u7528\u7684\u591a\u5934\u6ce8\u610f\u529b\u673a\u5236\u7ed3\u6784\u4e2d\uff0c\u5934\u7684\u6570\u91cf\u4e3a12, \u6a21\u578b\u603b\u53c2\u6570\u91cf\u4e3a110M. \u540c\u65f6\uff0c\u5b83\u5728\u4e2d\u6587\u7b80\u4f53\u548c\u7e41\u4f53\u4e0a\u8fdb\u884c\u8bad\u7ec3\uff0c\u56e0\u6b64\u9002\u5408\u4e2d\u6587\u7b80\u4f53\u548c\u7e41\u4f53\u4efb\u52a1\u3002 BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u4f5c\u7528\uff1a \u5728\u5b9e\u9645\u7684\u6587\u672c\u4efb\u52a1\u5904\u7406\u4e2d\uff0c\u6709\u4e9b\u8bad\u7ec3\u8bed\u6599\u5f88\u96be\u83b7\u5f97\uff0c\u4ed6\u4eec\u7684\u603b\u4f53\u6570\u91cf\u548c\u5305\u542b\u7684\u8bcd\u6c47\u603b\u6570\u90fd\u975e\u5e38\u5c11\uff0c\u4e0d\u9002\u5408\u7528\u4e8e\u8bad\u7ec3\u5e26\u6709Embedding\u5c42\u7684\u6a21\u578b\uff0c\u4f46\u8fd9\u4e9b\u6570\u636e\u4e2d\u5374\u53c8\u8574\u542b\u8fd9\u4e00\u4e9b\u6709\u4ef7\u503c\u7684\u89c4\u5f8b\u53ef\u4ee5\u88ab\u6a21\u578b\u6316\u6398\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u539f\u59cb\u6587\u672c\u8fdb\u884c\u7f16\u7801\u662f\u975e\u5e38\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u9884\u8bad\u7ec3\u6a21\u578b\u6765\u81ea\u5927\u578b\u8bed\u6599\uff0c\u80fd\u591f\u4f7f\u5f97\u5f53\u524d\u6587\u672c\u5177\u6709\u610f\u4e49\uff0c\u867d\u7136\u8fd9\u4e9b\u610f\u4e49\u53ef\u80fd\u5e76\u4e0d\u9488\u5bf9\u67d0\u4e2a\u7279\u5b9a\u9886\u57df\uff0c\u4f46\u662f\u8fd9\u79cd\u7f3a\u9677\u53ef\u4ee5\u4f7f\u7528\u5fae\u8c03\u6a21\u578b\u6765\u8fdb\u884c\u5f25\u8865\u3002 \u4f7f\u7528BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u4e24\u4e2a\u53e5\u5b50\u8fdb\u884c\u7f16\u7801\uff1a import torch import torch.nn as nn # \u4ece\u672c\u5730\u52a0\u8f7d source = '/root/.cache/torch/hub/huggingface_pytorch-transformers_main' # \u4ecegithub\u52a0\u8f7d # source = 'huggingface/pytorch-transformers' # \u76f4\u63a5\u4f7f\u7528\u9884\u8bad\u7ec3\u7684bert\u4e2d\u6587\u6a21\u578b model_name = 'bert-base-chinese' # \u901a\u8fc7torch.hub\u83b7\u5f97\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684bert-base-chinese\u6a21\u578b model = torch . hub . load ( source , 'model' , model_name , source = 'local' ) # \u4ecegithub\u52a0\u8f7d # model = torch.hub.load(source, 'model', model_name, source='github') # \u83b7\u5f97\u5bf9\u5e94\u7684\u5b57\u7b26\u6620\u5c04\u5668\uff0c\u5b83\u5c06\u628a\u4e2d\u6587\u7684\u6bcf\u4e2a\u5b57\u6620\u5c04\u6210\u4e00\u4e2a\u6570\u5b57 tokenizer = torch . hub . load ( source , 'tokenizer' , model_name , source = 'local' ) # \u4ecegithub\u52a0\u8f7d # tokenizer = torch.hub.load(source, 'tokenizer', model_name, source='github') def get_bert_encode ( text_1 , text_2 , mark = 102 , max_len = 10 ): \"\"\" description: \u4f7f\u7528bert\u4e2d\u6587\u6a21\u578b\u5bf9\u8f93\u5165\u7684\u6587\u672c\u5bf9\u8fdb\u884c\u7f16\u7801 :param text_1: \u4ee3\u8868\u8f93\u5165\u7684\u7b2c\u4e00\u53e5\u8bdd :param text_2: \u4ee3\u8868\u8f93\u5165\u7684\u7b2c\u4e8c\u53e5\u8bdd :param mark: \u5206\u9694\u6807\u8bb0\uff0c\u662f\u9884\u8bad\u7ec3\u6a21\u578btokenizer\u672c\u8eab\u7684\u6807\u8bb0\u7b26\u53f7\uff0c\u5f53\u8f93\u5165\u662f\u4e24\u4e2a\u6587\u672c\u65f6\uff0c \u5f97\u5230\u7684index_tokens\u4f1a\u4ee5102\u8fdb\u884c\u5206\u9694 :param max_len: \u6587\u672c\u7684\u5141\u8bb8\u6700\u5927\u957f\u5ea6\uff0c\u4e5f\u662f\u6587\u672c\u7684\u89c4\u8303\u957f\u5ea6\u5373\u5927\u4e8e\u8be5\u957f\u5ea6\u8981\u88ab\u622a\u65ad\uff0c\u5c0f\u4e8e\u8be5\u957f\u5ea6\u8981\u8fdb\u884c0\u8865\u9f50 :return \u8f93\u5165\u6587\u672c\u7684bert\u7f16\u7801 \"\"\" # \u4f7f\u7528tokenizer\u7684encode\u65b9\u6cd5\u5bf9\u8f93\u5165\u7684\u4e24\u53e5\u6587\u672c\u8fdb\u884c\u5b57\u6620\u5c04\u3002 indexed_tokens = tokenizer . encode ( text_1 , text_2 ) # \u51c6\u5907\u5bf9\u6620\u5c04\u540e\u7684\u6587\u672c\u8fdb\u884c\u89c4\u8303\u957f\u5ea6\u5904\u7406\u5373\u5927\u4e8e\u8be5\u957f\u5ea6\u8981\u88ab\u622a\u65ad\uff0c\u5c0f\u4e8e\u8be5\u957f\u5ea6\u8981\u8fdb\u884c0\u8865\u9f50 # \u6240\u4ee5\u9700\u8981\u5148\u627e\u5230\u5206\u9694\u6807\u8bb0\u7684\u7d22\u5f15\u4f4d\u7f6e k = indexed_tokens . index ( mark ) # \u9996\u5148\u5bf9\u7b2c\u4e00\u53e5\u8bdd\u8fdb\u884c\u957f\u5ea6\u89c4\u8303\u56e0\u6b64\u5c06indexed_tokens\u622a\u53d6\u5230[:k]\u5224\u65ad if len ( indexed_tokens [: k ]) >= max_len : # \u5982\u679c\u5927\u4e8emax_len, \u5219\u8fdb\u884c\u622a\u65ad indexed_tokens_1 = indexed_tokens [: max_len ] else : # \u5426\u5219\u4f7f\u7528[0]\u8fdb\u884c\u8865\u9f50\uff0c\u8865\u9f50\u76840\u7684\u4e2a\u6570\u5c31\u662fmax_len-len(indexed_tokens[:k]) indexed_tokens_1 = indexed_tokens [: k ] + ( max_len - len ( indexed_tokens [: k ])) * [ 0 ] # \u540c\u7406\u4e0b\u9762\u662f\u5bf9\u7b2c\u4e8c\u53e5\u8bdd\u8fdb\u884c\u89c4\u8303\u957f\u5ea6\u5904\u7406\uff0c\u56e0\u6b64\u622a\u53d6[k:] if len ( indexed_tokens [ k :]) >= max_len : # \u5982\u679c\u5927\u4e8emax_len, \u5219\u8fdb\u884c\u622a\u65ad indexed_tokens_2 = indexed_tokens [ k : k + max_len ] else : # \u5426\u5219\u4f7f\u7528[0]\u8fdb\u884c\u8865\u9f50\uff0c\u8865\u9f50\u76840\u7684\u4e2a\u6570\u5c31\u662fmax_len-len(indexed_tokens[:k]) indexed_tokens_2 = indexed_tokens [ k :] + ( max_len - len ( indexed_tokens [ k :])) * [ 0 ] # \u6700\u540e\u5c06\u5904\u7406\u540e\u7684indexed_tokens_1\u548cindexed_tokens_2\u518d\u8fdb\u884c\u76f8\u52a0 indexed_tokens = indexed_tokens_1 + indexed_tokens_2 # \u4e3a\u4e86\u8ba9\u6a21\u578b\u5728\u7f16\u7801\u65f6\u80fd\u591f\u66f4\u597d\u7684\u533a\u5206\u8fd9\u4e24\u53e5\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5206\u9694ids, # \u5b83\u662f\u4e00\u4e2a\u4e0eindexed_tokens\u7b49\u957f\u7684\u5411\u91cf\uff0c0\u5143\u7d20\u7684\u4f4d\u7f6e\u4ee3\u8868\u662f\u7b2c\u4e00\u53e5\u8bdd # 1\u5143\u7d20\u7684\u4f4d\u7f6e\u4ee3\u8868\u662f\u7b2c\u4e8c\u53e5\u8bdd\uff0c\u957f\u5ea6\u90fd\u662fmax_len segments_ids = [ 0 ] * max_len + [ 1 ] * max_len # \u5c06segments_ids\u548cindexed_tokens\u8f6c\u6362\u6210\u6a21\u578b\u9700\u8981\u7684\u5f20\u91cf\u5f62\u5f0f segments_tensor = torch . tensor ([ segments_ids ]) tokens_tensor = torch . tensor ([ indexed_tokens ]) # \u6a21\u578b\u4e0d\u81ea\u52a8\u6c42\u89e3\u68af\u5ea6 with torch . no_grad (): # \u4f7f\u7528bert model\u8fdb\u884c\u7f16\u7801\uff0c\u4f20\u5165\u53c2\u6570tokens_tensor\u548csegments_tensor\u5f97\u5230encoded_layers encoded_layers = model ( tokens_tensor , token_type_ids = segments_tensor ) return encoded_layers [ 0 ] \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/bert_serve/bert_chinese_encode.py \u8f93\u5165\u53c2\u6570\uff1a text_1 = \"\u4eba\u751f\u8be5\u5982\u4f55\u8d77\u5934\" text_2 = \"\u6539\u53d8\u8981\u5982\u4f55\u8d77\u624b\" \u8c03\u7528\uff1a encoded_layers = get_bert_encode ( text_1 , text_2 )[ 0 ] print ( encoded_layers ) print ( encoded_layers . shape ) \u8f93\u51fa\u6548\u679c\uff1a tensor([[[ 1.0210, 0.0659, -0.3472, ..., 0.5131, -0.7699, 0.0202], [-0.1966, 0.2660, 0.3689, ..., -0.0650, -0.2853, -0.1777], [ 0.9295, -0.3890, -0.1026, ..., 1.3917, 0.4692, -0.0851], ..., [ 1.4777, 0.7781, -0.4310, ..., 0.7403, 0.2006, -0.1198], [ 0.3867, -0.2031, -0.0721, ..., 1.0050, -0.2479, -0.3525], [ 0.0599, 0.2883, -0.4011, ..., -0.1875, -0.2546, 0.0453]]]) torch.Size([1, 20, 768]) \u6ce8\u610f\uff1a\u6709\u65f6\u5019\u4f1a\u4ea7\u751f\u5728\u8c03\u7528\u4e0a\u8ff0\u4ee3\u7801\u65f6\u6253\u5370\u5b57\u7b26\u4e32\u7684\u95ee\u9898\u3002 \u6bd4\u5982\u8c03\u7528\u4ee3\u7801\u6253\u5370\u65f6 \uff1a encoded_layers = get_bert_encode ( text_1 , text_2 )[ 0 ] print ( 'encoder_layers: ' , encoded_layers ) ###################### \u8f93\u51fa\u7684\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32 \uff0c \u800c\u4e0d\u662f\u5e0c\u671b\u7684\u6570\u5b57\u5316\u5f20\u91cf encoder_layers : last_hidden_state \u4e3b\u8981\u539f\u56e0\u662f\u5bf9model\u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u8fdb\u884c\u89e3\u5305\u5bfc\u81f4 \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6709\u5173\u77e5\u8bc6\u548c\u4f5c\u7528\u3002 \u4f7f\u7528BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u5bf9\u53e5\u5b50\u7f16\u7801\u7684\u51fd\u6570\uff1aget_bert_encode","title":"8.3 BERT\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b"},{"location":"8.html#84","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u5fae\u8c03\u6a21\u578b\u7684\u4f5c\u7528\u3002 \u638c\u63e1\u6784\u5efa\u5168\u8fde\u63a5\u5fae\u8c03\u6a21\u578b\u7684\u8fc7\u7a0b\u3002 \u5fae\u8c03\u6a21\u578b\u7684\u4f5c\u7528\uff1a \u5fae\u8c03\u6a21\u578b\u4e00\u822c\u7528\u5728\u8fc1\u79fb\u5b66\u4e60\u4e2d\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u4e4b\u540e\uff0c\u56e0\u4e3a\u5355\u7eaf\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u5f80\u5f80\u4e0d\u80fd\u9488\u5bf9\u7279\u5b9a\u9886\u57df\u6216\u4efb\u52a1\u83b7\u5f97\u9884\u671f\u7ed3\u679c\uff0c\u9700\u8981\u901a\u8fc7\u5fae\u8c03\u6a21\u578b\u5728\u7279\u5b9a\u9886\u57df\u6216\u4efb\u52a1\u4e0a\u8c03\u8282\u6574\u4f53\u6a21\u578b\u529f\u80fd\uff0c\u4f7f\u5176\u9002\u5e94\u5f53\u4e0b\u95ee\u9898\u3002 \u6784\u5efa\u5168\u8fde\u63a5\u5fae\u8c03\u6a21\u578b\u7684\u4ee3\u7801\u5206\u6790\uff1a import torch import torch.nn as nn import torch.nn.functional as F class Net ( nn . Module ): \"\"\"\u5b9a\u4e49\u5fae\u8c03\u7f51\u7edc\u7684\u7c7b\"\"\" def __init__ ( self , char_size = 20 , embedding_size = 768 , dropout = 0.2 ): \"\"\" :param char_size: \u8f93\u5165\u53e5\u5b50\u4e2d\u7684\u5b57\u7b26\u6570\u91cf\uff0c\u56e0\u4e3a\u89c4\u8303\u540e\u6bcf\u6761\u53e5\u5b50\u957f\u5ea6\u662fmax_len, \u56e0\u6b64char_size\u4e3a2*max_len :param embedding_size: \u5b57\u5d4c\u5165\u7684\u7ef4\u5ea6\uff0c\u56e0\u4e3a\u4f7f\u7528\u7684bert\u4e2d\u6587\u6a21\u578b\u5d4c\u5165\u7ef4\u5ea6\u662f768, \u56e0\u6b64embedding_size\u4e3a768 :param dropout: \u4e3a\u4e86\u9632\u6b62\u8fc7\u62df\u5408\uff0c\u7f51\u7edc\u4e2d\u5c06\u5f15\u5165Dropout\u5c42\uff0cdropout\u4e3a\u7f6e0\u6bd4\u7387\uff0c\u9ed8\u8ba4\u662f0.2 \"\"\" super ( Net , self ) . __init__ () # \u5c06char_size\u548cembedding_size\u4f20\u5165\u5176\u4e2d self . char_size = char_size self . embedding_size = embedding_size # \u5b9e\u4f8b\u5316\u5316\u5fc5\u8981\u7684\u5c42\u548c\u5c42\u53c2\u6570\uff1a # \u5b9e\u4f8b\u5316Dropout\u5c42 self . dropout = nn . Dropout ( p = dropout ) # \u5b9e\u4f8b\u5316\u7b2c\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42 self . fc1 = nn . Linear ( char_size * embedding_size , 8 ) # \u5b9e\u4f8b\u5316\u7b2c\u4e8c\u4e2a\u5168\u8fde\u63a5\u5c42 self . fc2 = nn . Linear ( 8 , 2 ) def forward ( self , x ): # \u5bf9\u8f93\u5165\u7684\u5f20\u91cf\u5f62\u72b6\u8fdb\u884c\u53d8\u6362\uff0c\u4ee5\u6ee1\u8db3\u63a5\u4e0b\u6765\u5c42\u7684\u8f93\u5165\u8981\u6c42 x = x . view ( - 1 , self . char_size * self . embedding_size ) # \u4f7f\u7528dropout\u5c42 x = self . dropout ( x ) # \u4f7f\u7528\u7b2c\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u5e76\u4f7f\u7528relu\u51fd\u6570 x = F . relu ( self . fc1 ( x )) # \u4f7f\u7528dropout\u5c42 x = self . dropout ( x ) # \u4f7f\u7528\u7b2c\u4e8c\u4e2a\u5168\u8fde\u63a5\u5c42\u5e76\u4f7f\u7528relu\u51fd\u6570 x = F . relu ( self . fc2 ( x )) return x \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/bert_serve/finetuning_net.py \u5b9e\u4f8b\u5316\u53c2\u6570\uff1a embedding_size = 768 char_size = 20 dropout = 0.2 \u8f93\u5165\u53c2\u6570\uff1a x = torch.randn(1, 20, 768) \u8c03\u7528\uff1a net = Net(char_size, embedding_size, dropout) nr = net(x) print(nr) \u8f93\u51fa\u6548\u679c\uff1a tensor([[0.0000, 0.4061]], grad_fn=<ReluBackward0>) \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86\u5fae\u8c03\u6a21\u578b\u7684\u4f5c\u7528\uff1a \u5fae\u8c03\u6a21\u578b\u4e00\u822c\u7528\u5728\u8fc1\u79fb\u5b66\u4e60\u4e2d\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u4e4b\u540e\uff0c\u56e0\u4e3a\u5355\u7eaf\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u5f80\u5f80\u4e0d\u80fd\u9488\u5bf9\u7279\u5b9a\u9886\u57df\u6216\u4efb\u52a1\u83b7\u5f97\u9884\u671f\u7ed3\u679c\uff0c\u9700\u8981\u901a\u8fc7\u5fae\u8c03\u6a21\u578b\u5728\u7279\u5b9a\u9886\u57df\u6216\u4efb\u52a1\u4e0a\u8c03\u8282\u6574\u4f53\u6a21\u578b\u529f\u80fd\uff0c\u4f7f\u5176\u9002\u5e94\u5f53\u4e0b\u95ee\u9898\u3002 \u5b66\u4e60\u5e76\u5b9e\u73b0\u4e86\u6784\u5efa\u5168\u8fde\u63a5\u5fae\u8c03\u6a21\u578b\u7684\u7c7b\uff1aclass Net(nn.Module)","title":"8.4 \u5fae\u8c03\u6a21\u578b"},{"location":"8.html#85","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u4e86\u89e3\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u7684\u6b65\u9aa4\u3002 \u638c\u63e1\u6a21\u578b\u8bad\u7ec3\u4e2d\u6bcf\u4e2a\u6b65\u9aa4\u7684\u5b9e\u73b0\u8fc7\u7a0b\u3002 \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u7684\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u6784\u5efa\u6570\u636e\u52a0\u8f7d\u5668\u51fd\u6570\u3002 \u7b2c\u4e8c\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570\u3002 \u7b2c\u4e09\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u9a8c\u8bc1\u51fd\u6570\u3002 \u7b2c\u56db\u6b65\uff1a\u8c03\u7528\u8bad\u7ec3\u548c\u9a8c\u8bc1\u51fd\u6570\u5e76\u6253\u5370\u65e5\u5fd7\u3002 \u7b2c\u4e94\u6b65\uff1a\u7ed8\u5236\u8bad\u7ec3\u548c\u9a8c\u8bc1\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf\u3002 \u7b2c\u516d\u6b65\uff1a\u6a21\u578b\u4fdd\u5b58\u3002 \u7b2c\u4e00\u6b65\uff1a\u6784\u5efa\u6570\u636e\u52a0\u8f7d\u5668\u51fd\u6570 import pandas as pd from sklearn.utils import shuffle from functools import reduce from collections import Counter from bert_chinese_encode import get_bert_encode import torch import torch.nn as nn def data_loader ( data_path , batch_size , split = 0.2 ): \"\"\" description: \u4ece\u6301\u4e45\u5316\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6570\u636e\uff0c\u5e76\u5212\u5206\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u53ca\u5176\u6279\u6b21\u5927\u5c0f :param data_path: \u8bad\u7ec3\u6570\u636e\u7684\u6301\u4e45\u5316\u8def\u5f84 :param batch_size: \u8bad\u7ec3\u548c\u9a8c\u8bc1\u6570\u636e\u96c6\u7684\u6279\u6b21\u5927\u5c0f :param split: \u8bad\u7ec3\u96c6\u4e0e\u9a8c\u8bc1\u7684\u5212\u5206\u6bd4\u4f8b :return: \u8bad\u7ec3\u6570\u636e\u751f\u6210\u5668\uff0c\u9a8c\u8bc1\u6570\u636e\u751f\u6210\u5668\uff0c\u8bad\u7ec3\u6570\u636e\u6570\u91cf\uff0c\u9a8c\u8bc1\u6570\u636e\u6570\u91cf \"\"\" # \u4f7f\u7528pd\u8fdb\u884ccsv\u6570\u636e\u7684\u8bfb\u53d6 data = pd . read_csv ( data_path , header = None , sep = \" \\t \" ) # \u6253\u5370\u6574\u4f53\u6570\u636e\u96c6\u4e0a\u7684\u6b63\u8d1f\u6837\u672c\u6570\u91cf print ( \"\u6570\u636e\u96c6\u7684\u6b63\u8d1f\u6837\u672c\u6570\u91cf\uff1a\" ) print ( dict ( Counter ( data [ 0 ] . values ))) # \u6253\u4e71\u6570\u636e\u96c6\u7684\u987a\u5e8f data = shuffle ( data ) . reset_index ( drop = True ) # \u5212\u5206\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6 split_point = int ( len ( data ) * split ) valid_data = data [: split_point ] train_data = data [ split_point :] # \u9a8c\u8bc1\u6570\u636e\u96c6\u4e2d\u7684\u6570\u636e\u603b\u6570\u81f3\u5c11\u80fd\u591f\u6ee1\u8db3\u4e00\u4e2a\u6279\u6b21 if len ( valid_data ) < batch_size : raise ( \"Batch size or split not match!\" ) def _loader_generator ( data ): \"\"\" description: \u83b7\u5f97\u8bad\u7ec3\u96c6/\u9a8c\u8bc1\u96c6\u7684\u6bcf\u4e2a\u6279\u6b21\u6570\u636e\u7684\u751f\u6210\u5668 :param data: \u8bad\u7ec3\u6570\u636e\u6216\u9a8c\u8bc1\u6570\u636e :return: \u4e00\u4e2a\u6279\u6b21\u7684\u8bad\u7ec3\u6570\u636e\u6216\u9a8c\u8bc1\u6570\u636e\u7684\u751f\u6210\u5668 \"\"\" # \u4ee5\u6bcf\u4e2a\u6279\u6b21\u7684\u95f4\u9694\u904d\u5386\u6570\u636e\u96c6 for batch in range ( 0 , len ( data ), batch_size ): # \u9884\u5b9a\u4e8ebatch\u6570\u636e\u7684\u5f20\u91cf\u5217\u8868 batch_encoded = [] batch_labels = [] # \u5c06\u4e00\u4e2abitch_size\u5927\u5c0f\u7684\u6570\u636e\u8f6c\u6362\u6210\u5217\u8868\u5f62\u5f0f\uff0c[[label, text_1, text_2]] # \u5e76\u8fdb\u884c\u9010\u6761\u904d\u5386 for item in data [ batch : batch + batch_size ] . values . tolist (): # \u6bcf\u6761\u6570\u636e\u4e2d\u90fd\u5305\u542b\u4e24\u53e5\u8bdd\uff0c\u4f7f\u7528bert\u4e2d\u6587\u6a21\u578b\u8fdb\u884c\u7f16\u7801 encoded = get_bert_encode ( item [ 1 ], item [ 2 ]) # \u5c06\u7f16\u7801\u540e\u7684\u6bcf\u6761\u6570\u636e\u88c5\u8fdb\u9884\u5148\u5b9a\u4e49\u597d\u7684\u5217\u8868\u4e2d batch_encoded . append ( encoded ) # \u540c\u6837\u5c06\u5bf9\u5e94\u7684\u8be5batch\u7684\u6807\u7b7e\u88c5\u8fdblabels\u5217\u8868\u4e2d batch_labels . append ([ item [ 0 ]]) # \u4f7f\u7528reduce\u9ad8\u9636\u51fd\u6570\u5c06\u5217\u8868\u4e2d\u7684\u6570\u636e\u8f6c\u6362\u6210\u6a21\u578b\u9700\u8981\u7684\u5f20\u91cf\u5f62\u5f0f # encoded\u7684\u5f62\u72b6\u662f(batch_size, 2*max_len, embedding_size) encoded = reduce ( lambda x , y : torch . cat (( x , y ), dim = 0 ), batch_encoded ) labels = torch . tensor ( reduce ( lambda x , y : x + y , batch_labels )) # \u4ee5\u751f\u6210\u5668\u7684\u65b9\u5f0f\u8fd4\u56de\u6570\u636e\u548c\u6807\u7b7e yield ( encoded , labels ) # \u5bf9\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u5206\u522b\u4f7f\u7528_loader_generator\u51fd\u6570\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684\u751f\u6210\u5668 # \u6700\u540e\u8fd8\u8981\u8fd4\u56de\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u7684\u6837\u672c\u6570\u91cf return _loader_generator ( train_data ), _loader_generator ( valid_data ), len ( train_data ), len ( valid_data ) \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/doctor_online/bert_serve/train.py \u8f93\u5165\u53c2\u6570\uff1a # \u6570\u636e\u6240\u5728\u8def\u5f84 data_path = \"./train_data.csv\" # \u5b9a\u4e49batch_size\u5927\u5c0f batch_size = 32 \u8c03\u7528\uff1a train_data_labels, valid_data_labels, \\ train_data_len, valid_data_len = data_loader(data_path, batch_size) print(next(train_data_labels)) print(next(valid_data_labels)) print(\"train_data_len:\", train_data_len) print(\"valid_data_len:\", valid_data_len) \u8f93\u51fa\u6548\u679c\uff1a (tensor([[[-0.7295, 0.8199, 0.8320, ..., 0.0933, 1.2171, 0.4833], [ 0.8707, 1.0131, -0.2556, ..., 0.2179, -1.0671, 0.1946], [ 0.0344, -0.5605, -0.5658, ..., 1.0855, -0.9122, 0.0222]]], tensor([0, 0, 1, 1, 1, 1, 0, 1, 0, 0, ..., 1, 0, 1, 0, 1, 1, 1, 1])) (tensor([[[-0.5263, -0.3897, -0.5725, ..., 0.5523, -0.2289, -0.8796], [ 0.0468, -0.5291, -0.0247, ..., 0.4221, -0.2501, -0.0796], [-0.2133, -0.5552, -0.0584, ..., -0.8031, 0.1753, -0.3476]]]), tensor([0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, ..., 0, 0, 1, 0, 1,1, 1])) train_data_len: 22186 valid_data_len: 5546 \u7b2c\u4e8c\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570 # \u52a0\u8f7d\u5fae\u8c03\u7f51\u7edc from finetuning_net import Net import torch.optim as optim # \u5b9a\u4e49embedding_size, char_size embedding_size = 768 char_size = 2 * max_len # \u5b9e\u4f8b\u5316\u5fae\u8c03\u7f51\u7edc net = Net ( embedding_size , char_size ) # \u5b9a\u4e49\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 criterion = nn . CrossEntropyLoss () # \u5b9a\u4e49SGD\u4f18\u5316\u65b9\u6cd5 optimizer = optim . SGD ( net . parameters (), lr = 0.001 , momentum = 0.9 ) def train ( train_data_labels ): \"\"\" description: \u8bad\u7ec3\u51fd\u6570\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5c06\u66f4\u65b0\u6a21\u578b\u53c2\u6570\uff0c\u5e76\u6536\u96c6\u51c6\u786e\u7387\u548c\u635f\u5931 :param train_data_labels: \u8bad\u7ec3\u6570\u636e\u548c\u6807\u7b7e\u7684\u751f\u6210\u5668\u5bf9\u8c61 :return: \u6574\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u7684\u5e73\u5747\u635f\u5931\u4e4b\u548c\u4ee5\u53ca\u6b63\u786e\u6807\u7b7e\u7684\u7d2f\u52a0\u6570 \"\"\" # \u5b9a\u4e49\u8bad\u7ec3\u8fc7\u7a0b\u7684\u521d\u59cb\u635f\u5931\u548c\u51c6\u786e\u7387\u7d2f\u52a0\u6570 train_running_loss = 0.0 train_running_acc = 0.0 # \u5faa\u73af\u904d\u5386\u8bad\u7ec3\u6570\u636e\u548c\u6807\u7b7e\u751f\u6210\u5668\uff0c\u6bcf\u4e2a\u6279\u6b21\u66f4\u65b0\u4e00\u6b21\u6a21\u578b\u53c2\u6570 for train_tensor , train_labels in train_data_labels : # \u521d\u59cb\u5316\u8be5\u6279\u6b21\u7684\u4f18\u5316\u5668 optimizer . zero_grad () # \u4f7f\u7528\u5fae\u8c03\u7f51\u7edc\u83b7\u5f97\u8f93\u51fa train_outputs = net ( train_tensor ) # \u5f97\u5230\u8be5\u6279\u6b21\u4e0b\u7684\u5e73\u5747\u635f\u5931 train_loss = criterion ( train_outputs , train_labels ) # \u5c06\u8be5\u6279\u6b21\u7684\u5e73\u5747\u635f\u5931\u52a0\u5230train_running_loss\u4e2d train_running_loss += train_loss . item () # \u635f\u5931\u53cd\u5411\u4f20\u64ad train_loss . backward () # \u4f18\u5316\u5668\u66f4\u65b0\u6a21\u578b\u53c2\u6570 optimizer . step () # \u5c06\u8be5\u6279\u6b21\u4e2d\u6b63\u786e\u7684\u6807\u7b7e\u6570\u91cf\u8fdb\u884c\u7d2f\u52a0\uff0c\u4ee5\u4fbf\u4e4b\u540e\u8ba1\u7b97\u51c6\u786e\u7387 train_running_acc += ( train_outputs . argmax ( 1 ) == train_labels ) . sum () . item () return train_running_loss , train_running_acc \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/doctor_online/bert_serve/train.py \u7b2c\u4e09\u6b65\uff1a\u6a21\u578b\u9a8c\u8bc1\u51fd\u6570 def valid ( valid_data_labels ): \"\"\" description: \u9a8c\u8bc1\u51fd\u6570\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5c06\u9a8c\u8bc1\u6a21\u578b\u7684\u5728\u65b0\u6570\u636e\u96c6\u4e0a\u7684\u6807\u7b7e\uff0c\u6536\u96c6\u635f\u5931\u548c\u51c6\u786e\u7387 :param valid_data_labels: \u9a8c\u8bc1\u6570\u636e\u548c\u6807\u7b7e\u7684\u751f\u6210\u5668\u5bf9\u8c61 :return: \u6574\u4e2a\u9a8c\u8bc1\u8fc7\u7a0b\u7684\u5e73\u5747\u635f\u5931\u4e4b\u548c\u4ee5\u53ca\u6b63\u786e\u6807\u7b7e\u7684\u7d2f\u52a0\u6570 \"\"\" # \u5b9a\u4e49\u8bad\u7ec3\u8fc7\u7a0b\u7684\u521d\u59cb\u635f\u5931\u548c\u51c6\u786e\u7387\u7d2f\u52a0\u6570 valid_running_loss = 0.0 valid_running_acc = 0.0 # \u5faa\u73af\u904d\u5386\u9a8c\u8bc1\u6570\u636e\u548c\u6807\u7b7e\u751f\u6210\u5668 for valid_tensor , valid_labels in valid_data_labels : # \u4e0d\u81ea\u52a8\u66f4\u65b0\u68af\u5ea6 with torch . no_grad (): # \u4f7f\u7528\u5fae\u8c03\u7f51\u7edc\u83b7\u5f97\u8f93\u51fa valid_outputs = net ( valid_tensor ) # \u5f97\u5230\u8be5\u6279\u6b21\u4e0b\u7684\u5e73\u5747\u635f\u5931 valid_loss = criterion ( valid_outputs , valid_labels ) # \u5c06\u8be5\u6279\u6b21\u7684\u5e73\u5747\u635f\u5931\u52a0\u5230valid_running_loss\u4e2d valid_running_loss += valid_loss . item () # \u5c06\u8be5\u6279\u6b21\u4e2d\u6b63\u786e\u7684\u6807\u7b7e\u6570\u91cf\u8fdb\u884c\u7d2f\u52a0\uff0c\u4ee5\u4fbf\u4e4b\u540e\u8ba1\u7b97\u51c6\u786e\u7387 valid_running_acc += ( valid_outputs . argmax ( 1 ) == valid_labels ) . sum () . item () return valid_running_loss , valid_running_acc \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/doctor_online/bert_serve/train.py \u7b2c\u56db\u6b65\uff1a\u8c03\u7528\u8bad\u7ec3\u548c\u9a8c\u8bc1\u51fd\u6570\u5e76\u6253\u5370\u65e5\u5fd7 # \u5b9a\u4e49\u8bad\u7ec3\u8f6e\u6570 epochs = 20 # \u5b9a\u4e49\u76db\u88c5\u6bcf\u8f6e\u6b21\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u5217\u8868\uff0c\u7528\u4e8e\u5236\u56fe all_train_losses = [] all_valid_losses = [] all_train_acc = [] all_valid_acc = [] # \u8fdb\u884c\u6307\u5b9a\u8f6e\u6b21\u7684\u8bad\u7ec3 for epoch in range ( epochs ): # \u6253\u5370\u8f6e\u6b21 print ( \"Epoch:\" , epoch + 1 ) # \u901a\u8fc7\u6570\u636e\u52a0\u8f7d\u5668\u83b7\u5f97\u8bad\u7ec3\u6570\u636e\u548c\u9a8c\u8bc1\u6570\u636e\u751f\u6210\u5668\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684\u6837\u672c\u6570\u91cf train_data_labels , valid_data_labels , train_data_len , valid_data_len = data_loader ( data_path , batch_size ) # \u8c03\u7528\u8bad\u7ec3\u51fd\u6570\u8fdb\u884c\u8bad\u7ec3 train_running_loss , train_running_acc = train ( train_data_labels ) # \u8c03\u7528\u9a8c\u8bc1\u51fd\u6570\u8fdb\u884c\u9a8c\u8bc1 valid_running_loss , valid_running_acc = valid ( valid_data_labels ) # \u8ba1\u7b97\u6bcf\u4e00\u8f6e\u7684\u5e73\u5747\u635f\u5931\uff0ctrain_running_loss\u548cvalid_running_loss\u662f\u6bcf\u4e2a\u6279\u6b21\u7684\u5e73\u5747\u635f\u5931\u4e4b\u548c # \u56e0\u6b64\u5c06\u5b83\u4eec\u4e58\u4ee5batch_size\u5c31\u5f97\u5230\u4e86\u8be5\u8f6e\u7684\u603b\u635f\u5931\uff0c\u9664\u4ee5\u6837\u672c\u6570\u5373\u8be5\u8f6e\u6b21\u7684\u5e73\u5747\u635f\u5931 train_average_loss = train_running_loss * batch_size / train_data_len valid_average_loss = valid_running_loss * batch_size / valid_data_len # train_running_acc\u548cvalid_running_acc\u662f\u6bcf\u4e2a\u6279\u6b21\u7684\u6b63\u786e\u6807\u7b7e\u7d2f\u52a0\u548c\uff0c # \u56e0\u6b64\u53ea\u9700\u9664\u4ee5\u5bf9\u5e94\u6837\u672c\u603b\u6570\u5373\u662f\u8be5\u8f6e\u6b21\u7684\u51c6\u786e\u7387 train_average_acc = train_running_acc / train_data_len valid_average_acc = valid_running_acc / valid_data_len # \u5c06\u8be5\u8f6e\u6b21\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u88c5\u8fdb\u5168\u5c40\u635f\u5931\u548c\u51c6\u786e\u7387\u5217\u8868\u4e2d\uff0c\u4ee5\u4fbf\u5236\u56fe all_train_losses . append ( train_average_loss ) all_valid_losses . append ( valid_average_loss ) all_train_acc . append ( train_average_acc ) all_valid_acc . append ( valid_average_acc ) # \u6253\u5370\u8be5\u8f6e\u6b21\u4e0b\u7684\u8bad\u7ec3\u635f\u5931\u548c\u51c6\u786e\u7387\u4ee5\u53ca\u9a8c\u8bc1\u635f\u5931\u548c\u51c6\u786e\u7387 print ( \"Train Loss:\" , train_average_loss , \"|\" , \"Train Acc:\" , train_average_acc ) print ( \"Valid Loss:\" , valid_average_loss , \"|\" , \"Valid Acc:\" , valid_average_acc ) print ( 'Finished Training' ) \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/doctor_online/bert_serve/train.py \u8f93\u51fa\u6548\u679c\uff1a Epoch: 1 Train Loss: 0.693169563147374 | Train Acc: 0.5084898843930635 Valid Loss: 0.6931480603018824 | Valid Acc: 0.5042777377521613 {1: 14015, 0: 13720} Epoch: 2 Train Loss: 0.6931440165277162 | Train Acc: 0.514992774566474 Valid Loss: 0.6931474804019379 | Valid Acc: 0.5026567002881844 {1: 14015, 0: 13720} Epoch: 3 Train Loss: 0.6931516138804441 | Train Acc: 0.5 Valid Loss: 0.69314516217633 | Valid Acc: 0.5065291786743515 {1: 14015, 0: 13720} Epoch: 4 Train Loss: 0.6931474804878235 | Train Acc: 0.5065028901734104 Valid Loss: 0.6931472256650842 | Valid Acc: 0.5052233429394812 {1: 14015, 0: 13720} Epoch: 5 Train Loss: 0.6931474804878235 | Train Acc: 0.5034320809248555 Valid Loss: 0.6931475739314165 | Valid Acc: 0.5055385446685879 {1: 14015, 0: 13720} Epoch: 6 Train Loss: 0.6931492934337241 | Train Acc: 0.5126445086705202 Valid Loss: 0.6931462547277512 | Valid Acc: 0.5033771613832853 {1: 14015, 0: 13720} Epoch: 7 Train Loss: 0.6931459204309938 | Train Acc: 0.5095736994219653 Valid Loss: 0.6931174922229921 | Valid Acc: 0.5065742074927954 {1: 14015, 0: 13720} Epoch: 8 Train Loss: 0.5545259035391614 | Train Acc: 0.759393063583815 Valid Loss: 0.4199462383770805 | Valid Acc: 0.9335374639769453 {1: 14015, 0: 13720} Epoch: 9 Train Loss: 0.4011955714294676 | Train Acc: 0.953757225433526 Valid Loss: 0.3964169790877045 | Valid Acc: 0.9521793948126801 {1: 14015, 0: 13720} Epoch: 10 Train Loss: 0.3893018603497158 | Train Acc: 0.9669436416184971 Valid Loss: 0.3928600374491139 | Valid Acc: 0.9525846541786743 {1: 14015, 0: 13720} Epoch: 11 Train Loss: 0.3857506763383832 | Train Acc: 0.9741690751445087 Valid Loss: 0.38195425426582097 | Valid Acc: 0.9775306195965417 {1: 14015, 0: 13720} Epoch: 12 Train Loss: 0.38368317760484066 | Train Acc: 0.9772398843930635 Valid Loss: 0.37680484129046155 | Valid Acc: 0.9780259365994236 {1: 14015, 0: 13720} Epoch: 13 Train Loss: 0.37407022137517876 | Train Acc: 0.9783236994219653 Valid Loss: 0.3750278927192564 | Valid Acc: 0.9792867435158501 {1: 14015, 0: 13720} Epoch: 14 Train Loss: 0.3707401707682306 | Train Acc: 0.9801300578034682 Valid Loss: 0.37273150721097886 | Valid Acc: 0.9831592219020173 {1: 14015, 0: 13720} Epoch: 15 Train Loss: 0.37279492521906177 | Train Acc: 0.9817557803468208 Valid Loss: 0.3706809586123362 | Valid Acc: 0.9804574927953891 {1: 14015, 0: 13720} Epoch: 16 Train Loss: 0.37660940017314315 | Train Acc: 0.9841040462427746 Valid Loss: 0.3688154769390392 | Valid Acc: 0.984600144092219 {1: 14015, 0: 13720} Epoch: 17 Train Loss: 0.3749892661681754 | Train Acc: 0.9841040462427746 Valid Loss: 0.3688570175760074 | Valid Acc: 0.9817633285302594 {1: 14015, 0: 13720} Epoch: 18 Train Loss: 0.37156562515765945 | Train Acc: 0.9826589595375722 Valid Loss: 0.36880484627028365 | Valid Acc: 0.9853656340057637 {1: 14015, 0: 13720} Epoch: 19 Train Loss: 0.3674713007976554 | Train Acc: 0.9830202312138728 Valid Loss: 0.366314563545954 | Valid Acc: 0.9850954610951008 {1: 14015, 0: 13720} Epoch: 20 Train Loss: 0.36878046806837095 | Train Acc: 0.9842846820809249 Valid Loss: 0.367835852100114 | Valid Acc: 0.9793317723342939 Finished Training \u7b2c\u4e94\u6b65\uff1a\u7ed8\u5236\u8bad\u7ec3\u548c\u9a8c\u8bc1\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf # \u5bfc\u5165\u5236\u56fe\u5de5\u5177\u5305 import matplotlib.pyplot as plt from matplotlib.pyplot import MultipleLocator # \u521b\u5efa\u7b2c\u4e00\u5f20\u753b\u5e03 plt . figure ( 0 ) # \u7ed8\u5236\u8bad\u7ec3\u635f\u5931\u66f2\u7ebf plt . plot ( all_train_losses , label = \"Train Loss\" ) # \u7ed8\u5236\u9a8c\u8bc1\u635f\u5931\u66f2\u7ebf\uff0c\u989c\u8272\u4e3a\u7ea2\u8272 plt . plot ( all_valid_losses , color = \"red\" , label = \"Valid Loss\" ) # \u5b9a\u4e49\u6a2a\u5750\u6807\u523b\u5ea6\u95f4\u9694\u5bf9\u8c61\uff0c\u95f4\u9694\u4e3a1, \u4ee3\u8868\u6bcf\u4e00\u8f6e\u6b21 x_major_locator = MultipleLocator ( 1 ) # \u83b7\u5f97\u5f53\u524d\u5750\u6807\u56fe\u53e5\u67c4 ax = plt . gca () # \u8bbe\u7f6e\u6a2a\u5750\u6807\u523b\u5ea6\u95f4\u9694 ax . xaxis . set_major_locator ( x_major_locator ) # \u8bbe\u7f6e\u6a2a\u5750\u6807\u53d6\u503c\u8303\u56f4 plt . xlim ( 1 , epochs ) # \u66f2\u7ebf\u8bf4\u660e\u5728\u5de6\u4e0a\u65b9 plt . legend ( loc = 'upper left' ) # \u4fdd\u5b58\u56fe\u7247 plt . savefig ( \"./loss.png\" ) # \u521b\u5efa\u7b2c\u4e8c\u5f20\u753b\u5e03 plt . figure ( 1 ) # \u7ed8\u5236\u8bad\u7ec3\u51c6\u786e\u7387\u66f2\u7ebf plt . plot ( all_train_acc , label = \"Train Acc\" ) # \u7ed8\u5236\u9a8c\u8bc1\u51c6\u786e\u7387\u66f2\u7ebf\uff0c\u989c\u8272\u4e3a\u7ea2\u8272 plt . plot ( all_valid_acc , color = \"red\" , label = \"Valid Acc\" ) # \u5b9a\u4e49\u6a2a\u5750\u6807\u523b\u5ea6\u95f4\u9694\u5bf9\u8c61\uff0c\u95f4\u9694\u4e3a1, \u4ee3\u8868\u6bcf\u4e00\u8f6e\u6b21 x_major_locator = MultipleLocator ( 1 ) # \u83b7\u5f97\u5f53\u524d\u5750\u6807\u56fe\u53e5\u67c4 ax = plt . gca () # \u8bbe\u7f6e\u6a2a\u5750\u6807\u523b\u5ea6\u95f4\u9694 ax . xaxis . set_major_locator ( x_major_locator ) # \u8bbe\u7f6e\u6a2a\u5750\u6807\u53d6\u503c\u8303\u56f4 plt . xlim ( 1 , epochs ) # \u66f2\u7ebf\u8bf4\u660e\u5728\u5de6\u4e0a\u65b9 plt . legend ( loc = 'upper left' ) # \u4fdd\u5b58\u56fe\u7247 plt . savefig ( \"./acc.png\" ) \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/doctor_online/bert_serve/train.py \u8bad\u7ec3\u548c\u9a8c\u8bc1\u635f\u5931\u5bf9\u7167\u66f2\u7ebf\uff1a \u8bad\u7ec3\u548c\u9a8c\u8bc1\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf\uff1a \u5206\u6790\uff1a \u6839\u636e\u635f\u5931\u5bf9\u7167\u66f2\u7ebf\uff0c\u5fae\u8c03\u6a21\u578b\u5728\u7b2c6\u8f6e\u5de6\u53f3\u5f00\u59cb\u638c\u63e1\u6570\u636e\u89c4\u5f8b\u8fc5\u901f\u4e0b\u964d\uff0c\u8bf4\u660e\u6a21\u578b\u80fd\u591f\u4ece\u6570\u636e\u4e2d\u83b7\u53d6\u8bed\u6599\u7279\u5f81\uff0c\u6b63\u5728\u6536\u655b\u3002\u6839\u636e\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf\u4e2d\u9a8c\u8bc1\u51c6\u786e\u7387\u5728\u7b2c10\u8f6e\u5de6\u53f3\u533a\u57df\u7a33\u5b9a\uff0c\u6700\u7ec8\u7ef4\u6301\u572898%\u5de6\u53f3\u3002 \u7b2c\u516d\u6b65\uff1a\u6a21\u578b\u4fdd\u5b58 # \u6a21\u578b\u4fdd\u5b58\u65f6\u95f4 time_ = int(time.time()) # \u4fdd\u5b58\u8def\u5f84 MODEL_PATH = './model/BERT_net_%d.pth' % time_ # \u4fdd\u5b58\u6a21\u578b\u53c2\u6570 torch.save(rnn.state_dict(), MODEL_PATH) \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/doctor_online/bert_serve/train.py \u8f93\u51fa\u6548\u679c\uff1a \u5728/data/bert_serve/\u8def\u5f84\u4e0b\u751f\u6210BERT_net_ + \u65f6\u95f4\u6233\u3002pth\u7684\u6587\u4ef6\u3002 \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u7684\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u6784\u5efa\u6570\u636e\u52a0\u8f7d\u5668\u51fd\u6570\u3002 \u7b2c\u4e8c\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u8bad\u7ec3\u51fd\u6570\u3002 \u7b2c\u4e09\u6b65\uff1a\u6784\u5efa\u6a21\u578b\u9a8c\u8bc1\u51fd\u6570\u3002 \u7b2c\u56db\u6b65\uff1a\u8c03\u7528\u8bad\u7ec3\u548c\u9a8c\u8bc1\u51fd\u6570\u5e76\u6253\u5370\u65e5\u5fd7\u3002 \u7b2c\u4e94\u6b65\uff1a\u7ed8\u5236\u8bad\u7ec3\u548c\u9a8c\u8bc1\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u5bf9\u7167\u66f2\u7ebf\u3002 \u7b2c\u516d\u6b65\uff1a\u6a21\u578b\u4fdd\u5b58\u3002","title":"8.5 \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3"},{"location":"8.html#86","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u638c\u63e1\u4f7f\u7528Flask\u6846\u67b6\u8fdb\u884c\u6a21\u578b\u90e8\u7f72\u7684\u5b9e\u73b0\u8fc7\u7a0b\u3002 \u4f7f\u7528Flask\u6846\u67b6\u8fdb\u884c\u6a21\u578b\u90e8\u7f72\u7684\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u90e8\u7f72\u6a21\u578b\u9884\u6d4b\u4ee3\u7801\u3002 \u7b2c\u4e8c\u6b65\uff1a\u4ee5\u6302\u8d77\u7684\u65b9\u5f0f\u542f\u52a8\u670d\u52a1\u3002 \u7b2c\u4e09\u6b65\uff1a\u8fdb\u884c\u6d4b\u8bd5\u3002 \u7b2c\u4e00\u6b65\uff1a\u90e8\u7f72\u6a21\u578b\u9884\u6d4b\u4ee3\u7801 from flask import Flask from flask import request app = Flask ( __name__ ) import torch # \u5bfc\u5165\u4e2d\u6587\u9884\u8bad\u7ec3\u6a21\u578b\u7f16\u7801\u51fd\u6570 from bert_chinese_encode import get_bert_encode # \u5bfc\u5165\u5fae\u8c03\u7f51\u7edc from finetuning_net import Net # \u5bfc\u5165\u8bad\u7ec3\u597d\u7684\u6a21\u578b MODEL_PATH = \"./model/BERT_net.pth\" # \u5b9a\u4e49\u5b9e\u4f8b\u5316\u6a21\u578b\u53c2\u6570 embedding_size = 768 char_size = 20 dropout = 0.2 # \u521d\u59cb\u5316\u5fae\u8c03\u7f51\u7edc\u6a21\u578b net = Net ( embedding_size , char_size , dropout ) # \u52a0\u8f7d\u6a21\u578b\u53c2\u6570 net . load_state_dict ( torch . load ( MODEL_PATH )) # \u4f7f\u7528\u8bc4\u4f30\u6a21\u5f0f net . eval () # \u5b9a\u4e49\u670d\u52a1\u8bf7\u6c42\u8def\u5f84\u548c\u65b9\u5f0f @app . route ( '/v1/recognition/' , methods = [ \"POST\" ]) def recognition (): # \u63a5\u6536\u6570\u636e text_1 = request . form [ 'text1' ] text_2 = request . form [ 'text2' ] # \u5bf9\u539f\u59cb\u6587\u672c\u8fdb\u884c\u7f16\u7801 inputs = get_bert_encode ( text_1 , text_2 , mark = 102 , max_len = 10 ) # \u4f7f\u7528\u5fae\u8c03\u6a21\u578b\u8fdb\u884c\u9884\u6d4b outputs = net ( inputs ) # \u83b7\u5f97\u9884\u6d4b\u7ed3\u679c _ , predicted = torch . max ( outputs , 1 ) # \u8fd4\u56de\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u7ed3\u679c return str ( predicted . item ()) \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/bert_serve/app.py \u7b2c\u4e8c\u6b65\uff1a\u542f\u52a8\u670d\u52a1 gunicorn -w 1 -b 0.0.0.0:5001 app:app \u7b2c\u4e09\u6b65\uff1a\u8fdb\u884c\u6d4b\u8bd5 \u6d4b\u8bd5\u811a\u672c\uff1a import requests url = \"http://0.0.0.0:5001/v1/recognition/\" data = { \"text1\" : \"\u4eba\u751f\u8be5\u5982\u4f55\u8d77\u5934\" , \"text2\" : \"\u6539\u53d8\u8981\u5982\u4f55\u8d77\u624b\" } res = requests . post ( url , data = data ) print ( \"\u9884\u6d4b\u6837\u672c\uff1a\" , data [ \"text_1\" ], \"|\" , data [ \"text_2\" ]) print ( \"\u9884\u6d4b\u7ed3\u679c\uff1a\" , res . text ) \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/bert_serve/test.py \u8fd0\u884c\u811a\u672c\uff1a python test.py \u8f93\u51fa\u6548\u679c\uff1a \u9884\u6d4b\u6837\u672c\uff1a\u4eba\u751f\u8be5\u5982\u4f55\u8d77\u5934 | \u6539\u53d8\u8981\u5982\u4f55\u8d77\u624b \u9884\u6d4b\u7ed3\u679c\uff1a1 \u5c0f\u8282\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86\u4f7f\u7528Flask\u6846\u67b6\u8fdb\u884c\u6a21\u578b\u90e8\u7f72\u7684\u5b9e\u73b0\u8fc7\u7a0b\uff1a \u7b2c\u4e00\u6b65\uff1a\u90e8\u7f72\u6a21\u578b\u9884\u6d4b\u4ee3\u7801\u3002 \u7b2c\u4e8c\u6b65\uff1a\u4ee5\u6302\u8d77\u7684\u65b9\u5f0f\u542f\u52a8\u670d\u52a1\u3002 \u7b2c\u4e09\u6b65\uff1a\u8fdb\u884c\u6d4b\u8bd5\u3002","title":"8.6 \u6a21\u578b\u90e8\u7f72"},{"location":"9.html","text":"9.1 \u7cfb\u7edf\u8054\u8c03\u4e0e\u6d4b\u8bd5 \u00b6 \u5b66\u4e60\u76ee\u6807\uff1a \u638c\u63e1\u5982\u4f55\u542f\u52a8\u7cfb\u7edf\u5728\u7ebf\u90e8\u5206\u7684\u670d\u52a1\u3002 \u638c\u63e1\u5bf9\u8fd0\u884c\u670d\u52a1\u5206\u522b\u8fdb\u884c\u6d4b\u8bd5\u7684\u8fc7\u7a0b\u3002 \u7cfb\u7edf\u67b6\u6784\u56fe\uff1a \u7cfb\u7edf\u5728\u7ebf\u90e8\u5206\u7684\u4e3b\u8981\u670d\u52a1\uff1a werobot\u670d\u52a1 \u4e3b\u8981\u903b\u8f91\u670d\u52a1 \u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1 redis\u670d\u52a1(\u4f1a\u8bdd\u7ba1\u7406) neo4j\u670d\u52a1(\u56fe\u6570\u636e\u67e5\u8be2) \u8bf4\u660e\uff1a\u7cfb\u7edf\u8054\u8c03\u4e0e\u6d4b\u8bd5\u662f\u5bf9\u7cfb\u7edf\u5728\u7ebf\u90e8\u5206\u670d\u52a1\u7684\u8054\u8c03\u4e0e\u6d4b\u8bd5\uff0c\u4e0d\u5305\u542b\u79bb\u7ebf\u90e8\u5206\u7684\u5185\u5bb9\u3002 1 \u7ba1\u7406\u7cfb\u7edf\u5728\u7ebf\u90e8\u5206\u670d\u52a1 \u00b6 \u901a\u8fc7supervisord\u7ba1\u7406\u4ee5\u4e0b\u670d\u52a1 werobot\u670d\u52a1 \u4e3b\u8981\u903b\u8f91\u670d\u52a1 \u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1 redis\u670d\u52a1 neo4j\u670d\u52a1 1.1 \u914d\u7f6ewerobot\u670d\u52a1 \u00b6 # \u5728/etc/supervisord.conf\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff0c\u5176\u4e2d/root/xxx/\u4e3a\u9879\u76ee\u5b9e\u9645\u6839\u76ee\u5f55 # /path/to/python\u662f\u5728\u865a\u62df\u73af\u5883\u4e0b\u901a\u8fc7 which python \u547d\u4ee4\u67e5\u627e\u5230\u7684python\u771f\u5b9e\u8def\u5f84 # \u4f8b\u5982 /root/anaconda3/envs/ai_doctor/bin/python [program : werobot] command = /path/to/python wr.py directory = /root/xxx/ stopsignal = QUIT stopasgroup = false killasgroup = false stdout_logfile = /var/log/werobot_out stdout_logfile_maxbytes = 1MB stderr_logfile = /var/log/werobot_error stderr_logfile_maxbytes = 1MB 1.2 \u914d\u7f6e\u4e3b\u8981\u903b\u8f91\u670d\u52a1 \u00b6 # \u5728/etc/supervisord.conf\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff0c\u5176\u4e2d/root/xxx/\u4e3a\u9879\u76ee\u5b9e\u9645\u6839\u76ee\u5f55 # /path/to/gunicorn\u662f\u5728\u865a\u62df\u73af\u5883\u4e0b\u901a\u8fc7 which gunicorn \u547d\u4ee4\u67e5\u627e\u5230\u7684gunicorn\u771f\u5b9e\u8def\u5f84 # \u4f8b\u5982/root/anaconda3/envs/ai_doctor/bin/gunicorn [program : main_serve] command = /path/to/gunicorn -w 1 -b 0.0.0.0:5000 app:app directory = /root/xxx/doctor_online/main_serve stopsignal = QUIT stopasgroup = false killasgroup = false stdout_logfile = /var/log/main_serve_out stdout_logfile_maxbytes = 1MB stderr_logfile = /var/log/main_serve_error stderr_logfile_maxbytes = 1MB 1.3 \u914d\u7f6e\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1 \u00b6 # \u5728/etc/supervisord.conf\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff0c\u5176\u4e2d/root/xxx/\u4e3a\u9879\u76ee\u5b9e\u9645\u6839\u76ee\u5f55 # /path/to/gunicorn\u662f\u5728\u865a\u62df\u73af\u5883\u4e0b\u901a\u8fc7 which gunicorn \u547d\u4ee4\u67e5\u627e\u5230\u7684gunicorn\u771f\u5b9e\u8def\u5f84 [program : bert_serve] command = /path/to/gunicorn -w 1 -b 0.0.0.0:5001 app:app directory = /root/xxx/doctor_online/bert_serve stopsignal = QUIT stopasgroup = false killasgroup = false stdout_logfile = /var/log/bert_serve_out stdout_logfile_maxbytes = 1MB stderr_logfile = /var/log/bert_serve_error stderr_logfile_maxbytes = 1MB 1.4 \u914d\u7f6eredis\u670d\u52a1 \u00b6 [program : redis] command = redis-server 1.5 \u914d\u7f6eneo4j \u00b6 # \u6ce8\u610f\u914d\u7f6eneo4j\u9700\u8981\u4fee\u6539/var/log/neo4j/\u548c/var/lib/neo4j\u76ee\u5f55\u5c5e\u7ec4\uff0c\u5426\u5219\u65e0\u6cd5\u542f\u52a8 # chown -R neo4j:neo4j /var/log/neo4j # chown -R neo4j:neo4j /var/lib/neo4j [program : neo4j] command = neo4j console user = neo4j autostart = true autorestart = unexpected startsecs = 30 startretries = 999 priorities = 90 exitcodes = 0,1,2 stopsignal = SIGTERM stopasgroup = true killasgroup = true redirect_stderr = true stdout_logfile = /var/log/neo4j/neo4j_supervisor.out stdout_logfile_backups = 10 stderr_capture_maxbytes = 20MB 1.6 supervisord\u4f7f\u7528 \u00b6 1 \u542f\u52a8 \u00b6 \u4e24\u79cd\u65b9\u5f0f\u542f\u52a8supervisord 1 \u5982\u679c\u914d\u7f6e\u6587\u4ef6\u5728/etc/supervisord.conf\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7cfb\u7edf\u547d\u4ee4\u542f\u52a8supervisord\u670d\u52a1 # \u542f\u52a8\uff0c\u542f\u52a8\u65f6\u4f1a\u540c\u65f6\u542f\u52a8\u7ba1\u7406\u7684\u4efb\u52a1 systemctl start supervisord # \u505c\u6b62\uff0c\u505c\u6b62\u65f6\u4f1a\u540c\u65f6\u505c\u6b62\u7ba1\u7406\u7684\u4efb\u52a1 systemctl stop supervisord # \u53ef\u4ee5\u8bbe\u7f6e\u5f00\u673a\u542f\u52a8 systemctl enable supervisord # \u53d6\u6d88\u5f00\u673a\u542f\u52a8 systemctl disable supervisord # \u6ce8\u610f\uff0c\u4f7f\u7528supervisord\u7ba1\u7406neo4j\u9700\u8981\u53d6\u6d88neo4j\u5f00\u673a\u542f\u52a8\uff0c\u5426\u5219\u4f1a\u548csuporvisord\u51b2\u7a81\u3002 systemctl disable neo4j 2 \u5982\u679c\u914d\u7f6e\u6587\u4ef6\u5728\u9879\u76ee\u8def\u5f84\u4e0b\uff0c\u5219\u9700\u8981\u624b\u52a8\u542f\u52a8supervisord\u670d\u52a1 # \u4f7f\u7528supervisord\u547d\u4ee4\uff0c\u8bfb\u53d6\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u914d\u7f6e\u6587\u4ef6 supervisord -c /path/to/supervisord.conf # \u540c\u65f6\u53d6\u6d88\u5f00\u673a\u542f\u52a8 systemctl disable supervisord 2 \u67e5\u770b\u670d\u52a1\u72b6\u6001 \u00b6 supervisorctl status all \u8f93\u51fa\u6548\u679c\uff1a bert_serve RUNNING pid 29686 , uptime 0 :12:10 main_serve RUNNING pid 29685 , uptime 0 :12:10 neo4j RUNNING pid 29689 , uptime 0 :12:10 redis RUNNING pid 29687 , uptime 0 :12:10 werobot RUNNING pid 29688 , uptime 0 :12:10 3 supervisord\u76f8\u5173\u547d\u4ee4 \u00b6 supervisorctl # \u8be5\u547d\u4ee4\u8fdb\u5165supervisord\u547d\u4ee4\u884c # \u5728supervisord\u547d\u4ee4\u884c\u4e2d\u8f93\u5165 status # \u67e5\u770b\u7ba1\u7406\u670d\u52a1\u72b6\u6001 stop xxx # \u5173\u95edxxx\u670d\u52a1 start xxx # \u542f\u52a8xxx\u670d\u52a1 \u901a\u8fc7\u7aef\u53e3\u67e5\u770b\u670d\u52a1\u8fdb\u7a0b # \u901a\u8fc7yum\u5b89\u88c5lsof\u547d\u4ee4 sudo yum install lsof -y # \u67e5\u770b5000 5001\u7aef\u53e3\u7684\u8fdb\u7a0b lsof -i:5000 lsof -i:5001 2 \u8fdb\u884c\u6d4b\u8bd5 \u00b6 \u7b2c\u4e00\u6b65\uff1a\u660e\u786e\u6d4b\u8bd5\u8bf4\u660e\u3002 \u7b2c\u4e8c\u6b65\uff1a\u6dfb\u52a0\u6253\u5370\u6d4b\u8bd5\u5185\u5bb9\u3002 \u7b2c\u4e09\u6b65\uff1a\u91cd\u65b0\u542f\u52a8\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u3002 \u7b2c\u56db\u6b65\uff1a\u8fdb\u884c\u6570\u636e\u6d41\u6d4b\u8bd5\u5e76\u67e5\u770b\u6253\u5370\u65e5\u5fd7\u3002 2.1 \u7b2c\u4e00\u6b65\uff1a\u6d4b\u8bd5\u8bf4\u660e \u00b6 \u56e0\u4e3a\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u662f\u6240\u6709\u5728\u7ebf\u670d\u52a1\u7684\u4e2d\u5fc3\u670d\u52a1(\u8be5\u670d\u52a1\u5c06\u63a5\u6536\u6216\u53d1\u9001\u8bf7\u6c42\u7ed9\u5176\u4ed6\u670d\u52a1), \u56e0\u6b64\u6211\u4eec\u7684\u6d4b\u8bd5\u6253\u5370\u4fe1\u606f\u90fd\u5728\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u4e2d\u8fdb\u884c\u3002 2.2 \u7b2c\u4e8c\u6b65\uff1a\u6dfb\u52a0\u6253\u5370\u6d4b\u8bd5\u5185\u5bb9 \u00b6 class Handler ( object ): \"\"\"\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u5904\u7406\u7c7b\"\"\" def __init__ ( self , uid , text , r , reply ): \"\"\" :param uid: \u7528\u6237\u552f\u4e00\u6807\u793auid :param text: \u8be5\u7528\u6237\u672c\u6b21\u8f93\u5165\u7684\u6587\u672c :param r: redis\u6570\u636e\u5e93\u7684\u8fde\u63a5\u5bf9\u8c61 :param reply: \u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u52a0\u8f7d\u5230\u5185\u5b58\u7684\u5bf9\u8c61(\u5b57\u5178) \"\"\" self . uid = uid self . text = text self . r = r self . reply = reply def non_first_sentence ( self , previous ): \"\"\" description: \u975e\u9996\u53e5\u5904\u7406\u51fd\u6570 :param previous: \u8be5\u7528\u6237\u5f53\u524d\u53e5(\u8f93\u5165\u6587\u672c)\u7684\u4e0a\u4e00\u53e5\u6587\u672c :return: \u6839\u636e\u903b\u8f91\u56fe\u8fd4\u56de\u975e\u9996\u53e5\u60c5\u51b5\u4e0b\u7684\u8f93\u51fa\u8bed\u53e5 \"\"\" # \u5c1d\u8bd5\u8bf7\u6c42\u6a21\u578b\u670d\u52a1\uff0c\u82e5\u5931\u8d25\u5219\u6253\u5370\u9519\u8bef\u7ed3\u679c ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660e\u5df2\u7ecf\u8fdb\u5165\u975e\u9996\u53e5\u5904\u7406\u51fd\u6570\u3002 print ( \"\u51c6\u5907\u8bf7\u6c42\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1!\" ) ################################################### try : data = { \"text1\" : previous , \"text2\" : self . text } result = requests . post ( model_serve_url , data = data ) if not result . text : return unit_chat ( self . text ) ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660e\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u8bf7\u6c42\u6210\u529f\u3002 print ( \"\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u8bf7\u6c42\u6210\u529f\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a\" , result . text ) ################################################### except Exception as e : print ( \"\u6a21\u578b\u670d\u52a1\u5f02\u5e38\uff1a\" , e ) return unit_chat ( self . text ) ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660e\u5f00\u59cb\u51c6\u5907\u8bf7\u6c42neo4j\u67e5\u8be2\u670d\u52a1\u3002 print ( \"\u8bf7\u6c42\u6a21\u578b\u670d\u52a1\u540e\uff0c\u51c6\u5907\u8bf7\u6c42neo4j\u67e5\u8be2\u670d\u52a1!\" ) ################################################### # \u7ee7\u7eed\u67e5\u8be2\u56fe\u6570\u636e\u5e93\uff0c\u5e76\u83b7\u5f97\u7ed3\u679c s = query_neo4j ( self . text ) ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660eneo4j\u67e5\u8be2\u6210\u529f\u3002 print ( \"neo4j\u67e5\u8be2\u670d\u52a1\u8bf7\u6c42\u6210\u529f\uff0c\u8fd4\u56de\u7ed3\u679c\uff1a\" , s ) ################################################### # \u5224\u65ad\u7ed3\u679c\u4e3a\u7a7a\u5217\u8868\uff0c\u5219\u76f4\u63a5\u4f7f\u7528UnitAPI\u8fd4\u56de if not s : return unit_chat ( self . text ) # \u82e5\u7ed3\u679c\u4e0d\u4e3a\u7a7a\uff0c\u83b7\u53d6\u4e0a\u4e00\u6b21\u5df2\u56de\u590d\u7684\u75be\u75c5old_disease old_disease = self . r . hget ( str ( self . uid ), \"previous_d\" ) if old_disease : # new_disease\u662f\u672c\u6b21\u9700\u8981\u5b58\u50a8\u7684\u75be\u75c5\uff0c\u662f\u5df2\u7ecf\u5b58\u50a8\u7684\u75be\u75c5\u4e0e\u672c\u6b21\u67e5\u8be2\u5230\u75be\u75c5\u7684\u5e76\u96c6 new_disease = list ( set ( s ) | set ( eval ( old_disease ))) # res\u662f\u9700\u8981\u8fd4\u56de\u7684\u75be\u75c5\uff0c\u662f\u672c\u6b21\u67e5\u8be2\u5230\u7684\u75be\u75c5\u4e0e\u5df2\u7ecf\u5b58\u50a8\u7684\u75be\u75c5\u7684\u5dee\u96c6 res = list ( set ( s ) - set ( eval ( old_disease ))) else : # \u5982\u679cold_disease\u4e3a\u7a7a\uff0c\u5219\u5b83\u4eec\u76f8\u540c\u90fd\u662f\u672c\u6b21\u67e5\u8be2\u7ed3\u679cs res = new_disease = list ( set ( s )) # \u5b58\u50a8new_disease\u8986\u76d6\u4e4b\u524d\u7684old_disease self . r . hset ( str ( self . uid ), \"previous_d\" , str ( new_disease )) # \u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4 self . r . expire ( str ( self . uid ), ex_time ) # \u5c06\u5217\u8868\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u6dfb\u52a0\u5230\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u4e2d\u8fd4\u56de res = \",\" . join ( s ) ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660eneo4j\u67e5\u8be2\u540e\u6709\u7ed3\u679c\u5e76\u5c06\u4f7f\u7528\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u3002 print ( \"\u4f7f\u7528\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u8fdb\u884c\u8fd4\u56de\u5bf9\u8bdd\u7684\u751f\u6210!\" ) ################################################### print ( \"###################################################\" ) return self . reply [ \"2\" ] % res def first_sentence ( self ): \"\"\"\u9996\u53e5\u5904\u7406\u51fd\u6570\"\"\" # \u76f4\u63a5\u67e5\u8be2\u56fe\u6570\u636e\u5e93\uff0c\u5e76\u83b7\u5f97\u7ed3\u679c ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660e\u8fdb\u5165\u4e86\u9996\u53e5\u5904\u7406\u51fd\u6570\u5e76\u9a6c\u4e0a\u8fdb\u884cneo4j\u67e5\u8be2 print ( \"\u8be5\u7528\u6237\u8fd1\u671f\u9996\u6b21\u53d1\u8a00\uff0c\u4e0d\u5fc5\u8bf7\u6c42\u6a21\u578b\u670d\u52a1\uff0c\u51c6\u5907\u8bf7\u6c42neo4j\u67e5\u8be2\u670d\u52a1!\" ) ################################################### s = query_neo4j ( self . text ) ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660e\u5df2\u7ecf\u5b8c\u6210neo4j\u67e5\u8be2\u3002 print ( \"neo4j\u67e5\u8be2\u670d\u52a1\u8bf7\u6c42\u6210\u529f\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a\" , s ) ################################################### # \u5224\u65ad\u7ed3\u679c\u4e3a\u7a7a\u5217\u8868\uff0c\u5219\u76f4\u63a5\u4f7f\u7528UnitAPI\u8fd4\u56de if not s : return unit_chat ( self . text ) # \u5c06s\u5b58\u50a8\u4e3a\"\u4e0a\u4e00\u6b21\u8fd4\u56de\u7684\u75be\u75c5\" self . r . hset ( str ( self . uid ), \"previous_d\" , str ( s )) # \u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4 self . r . expire ( str ( self . uid ), ex_time ) # \u5c06\u5217\u8868\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u6dfb\u52a0\u5230\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u4e2d\u8fd4\u56de res = \",\" . join ( s ) ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660eneo4j\u67e5\u8be2\u540e\u6709\u7ed3\u679c\u5e76\u5c06\u4f7f\u7528\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u3002 print ( \"\u4f7f\u7528\u89c4\u5219\u5bf9\u8bdd\u751f\u6210\u6a21\u7248\u8fdb\u884c\u8fd4\u56de\u5bf9\u8bdd\u7684\u751f\u6210!\" ) ################################################### print ( \"###################################################\" ) return self . reply [ \"2\" ] % res # \u8bbe\u5b9a\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u8def\u7531\u548c\u8bf7\u6c42\u65b9\u6cd5 @app . route ( '/v1/main_serve/' , methods = [ \"POST\" ]) def main_serve (): ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660ewerobot\u670d\u52a1\u53d1\u9001\u8bf7\u6c42\u6210\u529f\u3002 print ( \"\u5df2\u7ecf\u8fdb\u5165\u4e3b\u8981\u903b\u8f91\u670d\u52a1\uff0cwerobot\u670d\u52a1\u8fd0\u884c\u6b63\u5e38!\" ) ################################################### # \u63a5\u6536\u6765\u81eawerobot\u670d\u52a1\u7684\u5b57\u6bb5 uid = request . form [ 'uid' ] text = request . form [ 'text' ] # \u4eceredis\u8fde\u63a5\u6c60\u4e2d\u83b7\u5f97\u4e00\u4e2a\u6d3b\u8dc3\u8fde\u63a5 r = redis . StrictRedis ( connection_pool = pool ) # \u6839\u636e\u8be5uid\u83b7\u53d6\u4ed6\u7684\u4e0a\u4e00\u53e5\u8bdd(\u53ef\u80fd\u4e0d\u5b58\u5728) previous = r . hget ( str ( uid ), \"previous\" ) # \u5c06\u5f53\u524d\u8f93\u5165\u7684\u6587\u672c\u8bbe\u7f6e\u6210\u4e0a\u4e00\u53e5 r . hset ( str ( uid ), \"previous\" , text ) ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660eredis\u80fd\u591f\u6b63\u5e38\u8bfb\u53d6\u548c\u5199\u5165\u6570\u636e\u3002 print ( \"\u5df2\u7ecf\u5b8c\u6210\u521d\u6b21\u4f1a\u8bdd\u7ba1\u7406\uff0credis\u8fd0\u884c\u6b63\u5e38!\" ) ################################################### # \u8bfb\u53d6\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u5185\u5bb9\u5230\u5185\u5b58 reply = json . load ( open ( reply_path , \"r\" )) # \u5b9e\u4f8b\u5316\u4e3b\u8981\u903b\u8f91\u5904\u7406\u5bf9\u8c61 handler = Handler ( uid , text , r , reply ) # \u5982\u679cprevious\u5b58\u5728\uff0c\u8bf4\u660e\u4e0d\u662f\u7b2c\u4e00\u53e5\u8bdd if previous : # \u8c03\u7528non_first_sentence\u65b9\u6cd5 return handler . non_first_sentence ( previous ) else : # \u5426\u5219\u8c03\u7528first_sentence()\u65b9\u6cd5 return handler . first_sentence () \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/main_serve/app.py 2.3 \u7b2c\u4e09\u6b65\uff1a\u91cd\u65b0\u542f\u52a8\u4e3b\u8981\u903b\u8f91\u670d\u52a1 \u00b6 supervisorctl restart all 2.4 \u7b2c\u56db\u6b65\uff1a\u8fdb\u884c\u6570\u636e\u6d41\u6d4b\u8bd5\u5e76\u67e5\u770b\u6253\u5370\u65e5\u5fd7 \u00b6 1 \u6d4b\u8bd5\u8bf7\u6c421 \u00b6 \u7528\u6237\u5173\u6ce8\u516c\u4f17\u53f7\u540e\u9996\u6b21\u53d1\u9001\u4e00\u4e9b\u75c7\u72b6\u63cf\u8ff0\u3002 \u5bf9\u5e94\u6570\u636e\u6d41\uff1a werobot\u670d\u52a1\u2192\u8bf7\u6c42\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u2192\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u4e2d\u8bf7\u6c42redis\u670d\u52a1\u2192\u8bf7\u6c42neo4j\u67e5\u8be2\u670d\u52a1\u2192\u4f7f\u7528\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248/UnitAPI. \u5bf9\u5e94\u64cd\u4f5c\uff1a \u5173\u6ce8\u516c\u4f17\u53f7(\u4f7f\u7528\u65b0\u7528\u6237), \u53d1\u9001\"\u6211\u6700\u8fd1\u6709\u4e9b\u8179\u75db\". \u67e5\u770b\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u65e5\u5fd7\uff1a cat /var/log/main_server_out \u65e5\u5fd7\u6253\u5370\u7ed3\u679c\uff1a ## \u6253\u5370\u5982\u4e0b\u7ed3\u679c\u8bf4\u660e\u6d4b\u8bd5\u6210\u529f! \u5df2\u7ecf\u8fdb\u5165\u4e3b\u8981\u903b\u8f91\u670d\u52a1\uff0cwerobot\u670d\u52a1\u8fd0\u884c\u6b63\u5e38! \u5df2\u7ecf\u5b8c\u6210\u521d\u6b21\u4f1a\u8bdd\u7ba1\u7406\uff0credis\u8fd0\u884c\u6b63\u5e38! \u8be5\u7528\u6237\u8fd1\u671f\u9996\u6b21\u53d1\u8a00\uff0c\u4e0d\u5fc5\u8bf7\u6c42\u6a21\u578b\u670d\u52a1\uff0c\u51c6\u5907\u8bf7\u6c42neo4j\u67e5\u8be2\u670d\u52a1! neo4j\u67e5\u8be2\u670d\u52a1\u8bf7\u6c42\u6210\u529f\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a [ '\u766b\u75eb' , '\u5c0f\u513f\u7cd6\u5c3f\u75c5' , '\u80be\u4e0a\u817a\u5371\u8c61' , '\u5f02\u4f4d\u6025\u6027\u9611\u5c3e\u708e' , '\u6025\u6027\u80c6\u56ca\u708e' ] \u4f7f\u7528\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u8fdb\u884c\u8fd4\u56de\u751f\u6210\u7684\u5bf9\u8bdd! 2 \u6d4b\u8bd5\u8bf7\u6c422 \u00b6 \u9996\u6b21\u53d1\u9001\u540e\u7528\u6237\u7ee7\u7eed\u53d1\u9001\u4e00\u4e9b\u75c7\u72b6\u63cf\u8ff0\u3002 \u5bf9\u5e94\u6570\u636e\u6d41\uff1a werobot\u670d\u52a1\u2192\u8bf7\u6c42\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u2192\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u4e2d\u8bf7\u6c42redis\u670d\u52a1\u2192\u8bf7\u6c42\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u2192\u8bf7\u6c42neo4j\u67e5\u8be2\u670d\u52a1\u2192\u4f7f\u7528\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248/UnitAPI. \u5bf9\u5e94\u64cd\u4f5c\uff1a \u53d1\u9001\"\u6211\u6700\u8fd1\u6709\u4e9b\u8179\u75db\"\u540e\uff0c\u7ee7\u7eed\u53d1\u9001\"\u5e76\u4e14\u5de6\u8179\u90e8\u6709\u4e00\u4e9b\u7ea2\u70b9\". \u67e5\u770b\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u65e5\u5fd7\uff1a cat /var/log/main_server_out \u65e5\u5fd7\u6253\u5370\u7ed3\u679c\uff1a ## \u6253\u5370\u5982\u4e0b\u7ed3\u679c\u8bf4\u660e\u6d4b\u8bd5\u6210\u529f!(\u4f7f\u7528UnitAPI\u8fd4\u56de\u7ed3\u679c) \u5df2\u7ecf\u8fdb\u5165\u4e3b\u8981\u903b\u8f91\u670d\u52a1\uff0cwerobot\u670d\u52a1\u8fd0\u884c\u6b63\u5e38! \u5df2\u7ecf\u5b8c\u6210\u521d\u6b21\u4f1a\u8bdd\u7ba1\u7406\uff0credis\u8fd0\u884c\u6b63\u5e38! \u51c6\u5907\u8bf7\u6c42\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1! \u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u8bf7\u6c42\u6210\u529f\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a1 \u8bf7\u6c42\u6a21\u578b\u670d\u52a1\u540e\uff0c\u51c6\u5907\u8bf7\u6c42neo4j\u67e5\u8be2\u670d\u52a1! neo4j\u67e5\u8be2\u670d\u52a1\u8bf7\u6c42\u6210\u529f\uff0c\u8fd4\u56de\u7ed3\u679c\uff1a [] \u6ce8\u610f\uff1a\u6253\u5370\u65e5\u5fd7\u82e5\u4e0d\u80fd\u5373\u65f6\u51fa\u73b0\uff0c\u91cd\u65b0\u542f\u52a8\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u5373\u53ef\u3002 \u672c\u7ae0\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86\u638c\u63e1\u5982\u4f55\u542f\u52a8\u7cfb\u7edf\u5728\u7ebf\u90e8\u5206\u7684\u670d\u52a1\uff1a \u4ee5\u6302\u8d77\u7684\u65b9\u5f0f\u542f\u52a8werobot\u670d\u52a1 \u4f7f\u7528supervisor\u542f\u52a8\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u53ca\u5176redis\u670d\u52a1 \u4ee5\u6302\u8d77\u7684\u65b9\u5f0f\u542f\u52a8\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1 \u542f\u52a8\u548c\u67e5\u770bneo4j\u670d\u52a1(\u9ed8\u8ba4\u5df2\u542f\u52a8) \u5b66\u4e60\u4e86\u5982\u4f55\u8fdb\u884c\u6d4b\u8bd5\uff1a \u7b2c\u4e00\u6b65\uff1a\u660e\u786e\u6d4b\u8bd5\u8bf4\u660e\u3002 \u7b2c\u4e8c\u6b65\uff1a\u6dfb\u52a0\u6253\u5370\u6d4b\u8bd5\u5185\u5bb9\u3002 \u7b2c\u4e09\u6b65\uff1a\u91cd\u65b0\u542f\u52a8\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u3002 \u7b2c\u56db\u6b65\uff1a\u8fdb\u884c\u6570\u636e\u6d41\u6d4b\u8bd5\u5e76\u67e5\u770b\u6253\u5370\u65e5\u5fd7\u3002","title":"\u7b2c\u4e5d\u7ae0:\u7cfb\u7edf\u8054\u8c03\u4e0e\u6d4b\u8bd5"},{"location":"9.html#91","text":"\u5b66\u4e60\u76ee\u6807\uff1a \u638c\u63e1\u5982\u4f55\u542f\u52a8\u7cfb\u7edf\u5728\u7ebf\u90e8\u5206\u7684\u670d\u52a1\u3002 \u638c\u63e1\u5bf9\u8fd0\u884c\u670d\u52a1\u5206\u522b\u8fdb\u884c\u6d4b\u8bd5\u7684\u8fc7\u7a0b\u3002 \u7cfb\u7edf\u67b6\u6784\u56fe\uff1a \u7cfb\u7edf\u5728\u7ebf\u90e8\u5206\u7684\u4e3b\u8981\u670d\u52a1\uff1a werobot\u670d\u52a1 \u4e3b\u8981\u903b\u8f91\u670d\u52a1 \u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1 redis\u670d\u52a1(\u4f1a\u8bdd\u7ba1\u7406) neo4j\u670d\u52a1(\u56fe\u6570\u636e\u67e5\u8be2) \u8bf4\u660e\uff1a\u7cfb\u7edf\u8054\u8c03\u4e0e\u6d4b\u8bd5\u662f\u5bf9\u7cfb\u7edf\u5728\u7ebf\u90e8\u5206\u670d\u52a1\u7684\u8054\u8c03\u4e0e\u6d4b\u8bd5\uff0c\u4e0d\u5305\u542b\u79bb\u7ebf\u90e8\u5206\u7684\u5185\u5bb9\u3002","title":"9.1 \u7cfb\u7edf\u8054\u8c03\u4e0e\u6d4b\u8bd5"},{"location":"9.html#1","text":"\u901a\u8fc7supervisord\u7ba1\u7406\u4ee5\u4e0b\u670d\u52a1 werobot\u670d\u52a1 \u4e3b\u8981\u903b\u8f91\u670d\u52a1 \u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1 redis\u670d\u52a1 neo4j\u670d\u52a1","title":"1 \u7ba1\u7406\u7cfb\u7edf\u5728\u7ebf\u90e8\u5206\u670d\u52a1"},{"location":"9.html#11-werobot","text":"# \u5728/etc/supervisord.conf\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff0c\u5176\u4e2d/root/xxx/\u4e3a\u9879\u76ee\u5b9e\u9645\u6839\u76ee\u5f55 # /path/to/python\u662f\u5728\u865a\u62df\u73af\u5883\u4e0b\u901a\u8fc7 which python \u547d\u4ee4\u67e5\u627e\u5230\u7684python\u771f\u5b9e\u8def\u5f84 # \u4f8b\u5982 /root/anaconda3/envs/ai_doctor/bin/python [program : werobot] command = /path/to/python wr.py directory = /root/xxx/ stopsignal = QUIT stopasgroup = false killasgroup = false stdout_logfile = /var/log/werobot_out stdout_logfile_maxbytes = 1MB stderr_logfile = /var/log/werobot_error stderr_logfile_maxbytes = 1MB","title":"1.1 \u914d\u7f6ewerobot\u670d\u52a1"},{"location":"9.html#12","text":"# \u5728/etc/supervisord.conf\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff0c\u5176\u4e2d/root/xxx/\u4e3a\u9879\u76ee\u5b9e\u9645\u6839\u76ee\u5f55 # /path/to/gunicorn\u662f\u5728\u865a\u62df\u73af\u5883\u4e0b\u901a\u8fc7 which gunicorn \u547d\u4ee4\u67e5\u627e\u5230\u7684gunicorn\u771f\u5b9e\u8def\u5f84 # \u4f8b\u5982/root/anaconda3/envs/ai_doctor/bin/gunicorn [program : main_serve] command = /path/to/gunicorn -w 1 -b 0.0.0.0:5000 app:app directory = /root/xxx/doctor_online/main_serve stopsignal = QUIT stopasgroup = false killasgroup = false stdout_logfile = /var/log/main_serve_out stdout_logfile_maxbytes = 1MB stderr_logfile = /var/log/main_serve_error stderr_logfile_maxbytes = 1MB","title":"1.2 \u914d\u7f6e\u4e3b\u8981\u903b\u8f91\u670d\u52a1"},{"location":"9.html#13","text":"# \u5728/etc/supervisord.conf\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff0c\u5176\u4e2d/root/xxx/\u4e3a\u9879\u76ee\u5b9e\u9645\u6839\u76ee\u5f55 # /path/to/gunicorn\u662f\u5728\u865a\u62df\u73af\u5883\u4e0b\u901a\u8fc7 which gunicorn \u547d\u4ee4\u67e5\u627e\u5230\u7684gunicorn\u771f\u5b9e\u8def\u5f84 [program : bert_serve] command = /path/to/gunicorn -w 1 -b 0.0.0.0:5001 app:app directory = /root/xxx/doctor_online/bert_serve stopsignal = QUIT stopasgroup = false killasgroup = false stdout_logfile = /var/log/bert_serve_out stdout_logfile_maxbytes = 1MB stderr_logfile = /var/log/bert_serve_error stderr_logfile_maxbytes = 1MB","title":"1.3 \u914d\u7f6e\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1"},{"location":"9.html#14-redis","text":"[program : redis] command = redis-server","title":"1.4 \u914d\u7f6eredis\u670d\u52a1"},{"location":"9.html#15-neo4j","text":"# \u6ce8\u610f\u914d\u7f6eneo4j\u9700\u8981\u4fee\u6539/var/log/neo4j/\u548c/var/lib/neo4j\u76ee\u5f55\u5c5e\u7ec4\uff0c\u5426\u5219\u65e0\u6cd5\u542f\u52a8 # chown -R neo4j:neo4j /var/log/neo4j # chown -R neo4j:neo4j /var/lib/neo4j [program : neo4j] command = neo4j console user = neo4j autostart = true autorestart = unexpected startsecs = 30 startretries = 999 priorities = 90 exitcodes = 0,1,2 stopsignal = SIGTERM stopasgroup = true killasgroup = true redirect_stderr = true stdout_logfile = /var/log/neo4j/neo4j_supervisor.out stdout_logfile_backups = 10 stderr_capture_maxbytes = 20MB","title":"1.5 \u914d\u7f6eneo4j"},{"location":"9.html#16-supervisord","text":"","title":"1.6 supervisord\u4f7f\u7528"},{"location":"9.html#1_1","text":"\u4e24\u79cd\u65b9\u5f0f\u542f\u52a8supervisord 1 \u5982\u679c\u914d\u7f6e\u6587\u4ef6\u5728/etc/supervisord.conf\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7cfb\u7edf\u547d\u4ee4\u542f\u52a8supervisord\u670d\u52a1 # \u542f\u52a8\uff0c\u542f\u52a8\u65f6\u4f1a\u540c\u65f6\u542f\u52a8\u7ba1\u7406\u7684\u4efb\u52a1 systemctl start supervisord # \u505c\u6b62\uff0c\u505c\u6b62\u65f6\u4f1a\u540c\u65f6\u505c\u6b62\u7ba1\u7406\u7684\u4efb\u52a1 systemctl stop supervisord # \u53ef\u4ee5\u8bbe\u7f6e\u5f00\u673a\u542f\u52a8 systemctl enable supervisord # \u53d6\u6d88\u5f00\u673a\u542f\u52a8 systemctl disable supervisord # \u6ce8\u610f\uff0c\u4f7f\u7528supervisord\u7ba1\u7406neo4j\u9700\u8981\u53d6\u6d88neo4j\u5f00\u673a\u542f\u52a8\uff0c\u5426\u5219\u4f1a\u548csuporvisord\u51b2\u7a81\u3002 systemctl disable neo4j 2 \u5982\u679c\u914d\u7f6e\u6587\u4ef6\u5728\u9879\u76ee\u8def\u5f84\u4e0b\uff0c\u5219\u9700\u8981\u624b\u52a8\u542f\u52a8supervisord\u670d\u52a1 # \u4f7f\u7528supervisord\u547d\u4ee4\uff0c\u8bfb\u53d6\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u914d\u7f6e\u6587\u4ef6 supervisord -c /path/to/supervisord.conf # \u540c\u65f6\u53d6\u6d88\u5f00\u673a\u542f\u52a8 systemctl disable supervisord","title":"1 \u542f\u52a8"},{"location":"9.html#2","text":"supervisorctl status all \u8f93\u51fa\u6548\u679c\uff1a bert_serve RUNNING pid 29686 , uptime 0 :12:10 main_serve RUNNING pid 29685 , uptime 0 :12:10 neo4j RUNNING pid 29689 , uptime 0 :12:10 redis RUNNING pid 29687 , uptime 0 :12:10 werobot RUNNING pid 29688 , uptime 0 :12:10","title":"2 \u67e5\u770b\u670d\u52a1\u72b6\u6001"},{"location":"9.html#3-supervisord","text":"supervisorctl # \u8be5\u547d\u4ee4\u8fdb\u5165supervisord\u547d\u4ee4\u884c # \u5728supervisord\u547d\u4ee4\u884c\u4e2d\u8f93\u5165 status # \u67e5\u770b\u7ba1\u7406\u670d\u52a1\u72b6\u6001 stop xxx # \u5173\u95edxxx\u670d\u52a1 start xxx # \u542f\u52a8xxx\u670d\u52a1 \u901a\u8fc7\u7aef\u53e3\u67e5\u770b\u670d\u52a1\u8fdb\u7a0b # \u901a\u8fc7yum\u5b89\u88c5lsof\u547d\u4ee4 sudo yum install lsof -y # \u67e5\u770b5000 5001\u7aef\u53e3\u7684\u8fdb\u7a0b lsof -i:5000 lsof -i:5001","title":"3 supervisord\u76f8\u5173\u547d\u4ee4"},{"location":"9.html#2_1","text":"\u7b2c\u4e00\u6b65\uff1a\u660e\u786e\u6d4b\u8bd5\u8bf4\u660e\u3002 \u7b2c\u4e8c\u6b65\uff1a\u6dfb\u52a0\u6253\u5370\u6d4b\u8bd5\u5185\u5bb9\u3002 \u7b2c\u4e09\u6b65\uff1a\u91cd\u65b0\u542f\u52a8\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u3002 \u7b2c\u56db\u6b65\uff1a\u8fdb\u884c\u6570\u636e\u6d41\u6d4b\u8bd5\u5e76\u67e5\u770b\u6253\u5370\u65e5\u5fd7\u3002","title":"2 \u8fdb\u884c\u6d4b\u8bd5"},{"location":"9.html#21","text":"\u56e0\u4e3a\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u662f\u6240\u6709\u5728\u7ebf\u670d\u52a1\u7684\u4e2d\u5fc3\u670d\u52a1(\u8be5\u670d\u52a1\u5c06\u63a5\u6536\u6216\u53d1\u9001\u8bf7\u6c42\u7ed9\u5176\u4ed6\u670d\u52a1), \u56e0\u6b64\u6211\u4eec\u7684\u6d4b\u8bd5\u6253\u5370\u4fe1\u606f\u90fd\u5728\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u4e2d\u8fdb\u884c\u3002","title":"2.1 \u7b2c\u4e00\u6b65\uff1a\u6d4b\u8bd5\u8bf4\u660e"},{"location":"9.html#22","text":"class Handler ( object ): \"\"\"\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u5904\u7406\u7c7b\"\"\" def __init__ ( self , uid , text , r , reply ): \"\"\" :param uid: \u7528\u6237\u552f\u4e00\u6807\u793auid :param text: \u8be5\u7528\u6237\u672c\u6b21\u8f93\u5165\u7684\u6587\u672c :param r: redis\u6570\u636e\u5e93\u7684\u8fde\u63a5\u5bf9\u8c61 :param reply: \u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u52a0\u8f7d\u5230\u5185\u5b58\u7684\u5bf9\u8c61(\u5b57\u5178) \"\"\" self . uid = uid self . text = text self . r = r self . reply = reply def non_first_sentence ( self , previous ): \"\"\" description: \u975e\u9996\u53e5\u5904\u7406\u51fd\u6570 :param previous: \u8be5\u7528\u6237\u5f53\u524d\u53e5(\u8f93\u5165\u6587\u672c)\u7684\u4e0a\u4e00\u53e5\u6587\u672c :return: \u6839\u636e\u903b\u8f91\u56fe\u8fd4\u56de\u975e\u9996\u53e5\u60c5\u51b5\u4e0b\u7684\u8f93\u51fa\u8bed\u53e5 \"\"\" # \u5c1d\u8bd5\u8bf7\u6c42\u6a21\u578b\u670d\u52a1\uff0c\u82e5\u5931\u8d25\u5219\u6253\u5370\u9519\u8bef\u7ed3\u679c ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660e\u5df2\u7ecf\u8fdb\u5165\u975e\u9996\u53e5\u5904\u7406\u51fd\u6570\u3002 print ( \"\u51c6\u5907\u8bf7\u6c42\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1!\" ) ################################################### try : data = { \"text1\" : previous , \"text2\" : self . text } result = requests . post ( model_serve_url , data = data ) if not result . text : return unit_chat ( self . text ) ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660e\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u8bf7\u6c42\u6210\u529f\u3002 print ( \"\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u8bf7\u6c42\u6210\u529f\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a\" , result . text ) ################################################### except Exception as e : print ( \"\u6a21\u578b\u670d\u52a1\u5f02\u5e38\uff1a\" , e ) return unit_chat ( self . text ) ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660e\u5f00\u59cb\u51c6\u5907\u8bf7\u6c42neo4j\u67e5\u8be2\u670d\u52a1\u3002 print ( \"\u8bf7\u6c42\u6a21\u578b\u670d\u52a1\u540e\uff0c\u51c6\u5907\u8bf7\u6c42neo4j\u67e5\u8be2\u670d\u52a1!\" ) ################################################### # \u7ee7\u7eed\u67e5\u8be2\u56fe\u6570\u636e\u5e93\uff0c\u5e76\u83b7\u5f97\u7ed3\u679c s = query_neo4j ( self . text ) ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660eneo4j\u67e5\u8be2\u6210\u529f\u3002 print ( \"neo4j\u67e5\u8be2\u670d\u52a1\u8bf7\u6c42\u6210\u529f\uff0c\u8fd4\u56de\u7ed3\u679c\uff1a\" , s ) ################################################### # \u5224\u65ad\u7ed3\u679c\u4e3a\u7a7a\u5217\u8868\uff0c\u5219\u76f4\u63a5\u4f7f\u7528UnitAPI\u8fd4\u56de if not s : return unit_chat ( self . text ) # \u82e5\u7ed3\u679c\u4e0d\u4e3a\u7a7a\uff0c\u83b7\u53d6\u4e0a\u4e00\u6b21\u5df2\u56de\u590d\u7684\u75be\u75c5old_disease old_disease = self . r . hget ( str ( self . uid ), \"previous_d\" ) if old_disease : # new_disease\u662f\u672c\u6b21\u9700\u8981\u5b58\u50a8\u7684\u75be\u75c5\uff0c\u662f\u5df2\u7ecf\u5b58\u50a8\u7684\u75be\u75c5\u4e0e\u672c\u6b21\u67e5\u8be2\u5230\u75be\u75c5\u7684\u5e76\u96c6 new_disease = list ( set ( s ) | set ( eval ( old_disease ))) # res\u662f\u9700\u8981\u8fd4\u56de\u7684\u75be\u75c5\uff0c\u662f\u672c\u6b21\u67e5\u8be2\u5230\u7684\u75be\u75c5\u4e0e\u5df2\u7ecf\u5b58\u50a8\u7684\u75be\u75c5\u7684\u5dee\u96c6 res = list ( set ( s ) - set ( eval ( old_disease ))) else : # \u5982\u679cold_disease\u4e3a\u7a7a\uff0c\u5219\u5b83\u4eec\u76f8\u540c\u90fd\u662f\u672c\u6b21\u67e5\u8be2\u7ed3\u679cs res = new_disease = list ( set ( s )) # \u5b58\u50a8new_disease\u8986\u76d6\u4e4b\u524d\u7684old_disease self . r . hset ( str ( self . uid ), \"previous_d\" , str ( new_disease )) # \u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4 self . r . expire ( str ( self . uid ), ex_time ) # \u5c06\u5217\u8868\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u6dfb\u52a0\u5230\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u4e2d\u8fd4\u56de res = \",\" . join ( s ) ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660eneo4j\u67e5\u8be2\u540e\u6709\u7ed3\u679c\u5e76\u5c06\u4f7f\u7528\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u3002 print ( \"\u4f7f\u7528\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u8fdb\u884c\u8fd4\u56de\u5bf9\u8bdd\u7684\u751f\u6210!\" ) ################################################### print ( \"###################################################\" ) return self . reply [ \"2\" ] % res def first_sentence ( self ): \"\"\"\u9996\u53e5\u5904\u7406\u51fd\u6570\"\"\" # \u76f4\u63a5\u67e5\u8be2\u56fe\u6570\u636e\u5e93\uff0c\u5e76\u83b7\u5f97\u7ed3\u679c ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660e\u8fdb\u5165\u4e86\u9996\u53e5\u5904\u7406\u51fd\u6570\u5e76\u9a6c\u4e0a\u8fdb\u884cneo4j\u67e5\u8be2 print ( \"\u8be5\u7528\u6237\u8fd1\u671f\u9996\u6b21\u53d1\u8a00\uff0c\u4e0d\u5fc5\u8bf7\u6c42\u6a21\u578b\u670d\u52a1\uff0c\u51c6\u5907\u8bf7\u6c42neo4j\u67e5\u8be2\u670d\u52a1!\" ) ################################################### s = query_neo4j ( self . text ) ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660e\u5df2\u7ecf\u5b8c\u6210neo4j\u67e5\u8be2\u3002 print ( \"neo4j\u67e5\u8be2\u670d\u52a1\u8bf7\u6c42\u6210\u529f\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a\" , s ) ################################################### # \u5224\u65ad\u7ed3\u679c\u4e3a\u7a7a\u5217\u8868\uff0c\u5219\u76f4\u63a5\u4f7f\u7528UnitAPI\u8fd4\u56de if not s : return unit_chat ( self . text ) # \u5c06s\u5b58\u50a8\u4e3a\"\u4e0a\u4e00\u6b21\u8fd4\u56de\u7684\u75be\u75c5\" self . r . hset ( str ( self . uid ), \"previous_d\" , str ( s )) # \u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4 self . r . expire ( str ( self . uid ), ex_time ) # \u5c06\u5217\u8868\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u6dfb\u52a0\u5230\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u4e2d\u8fd4\u56de res = \",\" . join ( s ) ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660eneo4j\u67e5\u8be2\u540e\u6709\u7ed3\u679c\u5e76\u5c06\u4f7f\u7528\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u3002 print ( \"\u4f7f\u7528\u89c4\u5219\u5bf9\u8bdd\u751f\u6210\u6a21\u7248\u8fdb\u884c\u8fd4\u56de\u5bf9\u8bdd\u7684\u751f\u6210!\" ) ################################################### print ( \"###################################################\" ) return self . reply [ \"2\" ] % res # \u8bbe\u5b9a\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u7684\u8def\u7531\u548c\u8bf7\u6c42\u65b9\u6cd5 @app . route ( '/v1/main_serve/' , methods = [ \"POST\" ]) def main_serve (): ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660ewerobot\u670d\u52a1\u53d1\u9001\u8bf7\u6c42\u6210\u529f\u3002 print ( \"\u5df2\u7ecf\u8fdb\u5165\u4e3b\u8981\u903b\u8f91\u670d\u52a1\uff0cwerobot\u670d\u52a1\u8fd0\u884c\u6b63\u5e38!\" ) ################################################### # \u63a5\u6536\u6765\u81eawerobot\u670d\u52a1\u7684\u5b57\u6bb5 uid = request . form [ 'uid' ] text = request . form [ 'text' ] # \u4eceredis\u8fde\u63a5\u6c60\u4e2d\u83b7\u5f97\u4e00\u4e2a\u6d3b\u8dc3\u8fde\u63a5 r = redis . StrictRedis ( connection_pool = pool ) # \u6839\u636e\u8be5uid\u83b7\u53d6\u4ed6\u7684\u4e0a\u4e00\u53e5\u8bdd(\u53ef\u80fd\u4e0d\u5b58\u5728) previous = r . hget ( str ( uid ), \"previous\" ) # \u5c06\u5f53\u524d\u8f93\u5165\u7684\u6587\u672c\u8bbe\u7f6e\u6210\u4e0a\u4e00\u53e5 r . hset ( str ( uid ), \"previous\" , text ) ################################################### # \u80fd\u591f\u6253\u5370\u8be5\u4fe1\u606f\uff0c\u8bf4\u660eredis\u80fd\u591f\u6b63\u5e38\u8bfb\u53d6\u548c\u5199\u5165\u6570\u636e\u3002 print ( \"\u5df2\u7ecf\u5b8c\u6210\u521d\u6b21\u4f1a\u8bdd\u7ba1\u7406\uff0credis\u8fd0\u884c\u6b63\u5e38!\" ) ################################################### # \u8bfb\u53d6\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u5185\u5bb9\u5230\u5185\u5b58 reply = json . load ( open ( reply_path , \"r\" )) # \u5b9e\u4f8b\u5316\u4e3b\u8981\u903b\u8f91\u5904\u7406\u5bf9\u8c61 handler = Handler ( uid , text , r , reply ) # \u5982\u679cprevious\u5b58\u5728\uff0c\u8bf4\u660e\u4e0d\u662f\u7b2c\u4e00\u53e5\u8bdd if previous : # \u8c03\u7528non_first_sentence\u65b9\u6cd5 return handler . non_first_sentence ( previous ) else : # \u5426\u5219\u8c03\u7528first_sentence()\u65b9\u6cd5 return handler . first_sentence () \u4ee3\u7801\u4f4d\u7f6e\uff1a/data/doctor_online/main_serve/app.py","title":"2.2 \u7b2c\u4e8c\u6b65\uff1a\u6dfb\u52a0\u6253\u5370\u6d4b\u8bd5\u5185\u5bb9"},{"location":"9.html#23","text":"supervisorctl restart all","title":"2.3 \u7b2c\u4e09\u6b65\uff1a\u91cd\u65b0\u542f\u52a8\u4e3b\u8981\u903b\u8f91\u670d\u52a1"},{"location":"9.html#24","text":"","title":"2.4 \u7b2c\u56db\u6b65\uff1a\u8fdb\u884c\u6570\u636e\u6d41\u6d4b\u8bd5\u5e76\u67e5\u770b\u6253\u5370\u65e5\u5fd7"},{"location":"9.html#1-1","text":"\u7528\u6237\u5173\u6ce8\u516c\u4f17\u53f7\u540e\u9996\u6b21\u53d1\u9001\u4e00\u4e9b\u75c7\u72b6\u63cf\u8ff0\u3002 \u5bf9\u5e94\u6570\u636e\u6d41\uff1a werobot\u670d\u52a1\u2192\u8bf7\u6c42\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u2192\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u4e2d\u8bf7\u6c42redis\u670d\u52a1\u2192\u8bf7\u6c42neo4j\u67e5\u8be2\u670d\u52a1\u2192\u4f7f\u7528\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248/UnitAPI. \u5bf9\u5e94\u64cd\u4f5c\uff1a \u5173\u6ce8\u516c\u4f17\u53f7(\u4f7f\u7528\u65b0\u7528\u6237), \u53d1\u9001\"\u6211\u6700\u8fd1\u6709\u4e9b\u8179\u75db\". \u67e5\u770b\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u65e5\u5fd7\uff1a cat /var/log/main_server_out \u65e5\u5fd7\u6253\u5370\u7ed3\u679c\uff1a ## \u6253\u5370\u5982\u4e0b\u7ed3\u679c\u8bf4\u660e\u6d4b\u8bd5\u6210\u529f! \u5df2\u7ecf\u8fdb\u5165\u4e3b\u8981\u903b\u8f91\u670d\u52a1\uff0cwerobot\u670d\u52a1\u8fd0\u884c\u6b63\u5e38! \u5df2\u7ecf\u5b8c\u6210\u521d\u6b21\u4f1a\u8bdd\u7ba1\u7406\uff0credis\u8fd0\u884c\u6b63\u5e38! \u8be5\u7528\u6237\u8fd1\u671f\u9996\u6b21\u53d1\u8a00\uff0c\u4e0d\u5fc5\u8bf7\u6c42\u6a21\u578b\u670d\u52a1\uff0c\u51c6\u5907\u8bf7\u6c42neo4j\u67e5\u8be2\u670d\u52a1! neo4j\u67e5\u8be2\u670d\u52a1\u8bf7\u6c42\u6210\u529f\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a [ '\u766b\u75eb' , '\u5c0f\u513f\u7cd6\u5c3f\u75c5' , '\u80be\u4e0a\u817a\u5371\u8c61' , '\u5f02\u4f4d\u6025\u6027\u9611\u5c3e\u708e' , '\u6025\u6027\u80c6\u56ca\u708e' ] \u4f7f\u7528\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248\u8fdb\u884c\u8fd4\u56de\u751f\u6210\u7684\u5bf9\u8bdd!","title":"1 \u6d4b\u8bd5\u8bf7\u6c421"},{"location":"9.html#2-2","text":"\u9996\u6b21\u53d1\u9001\u540e\u7528\u6237\u7ee7\u7eed\u53d1\u9001\u4e00\u4e9b\u75c7\u72b6\u63cf\u8ff0\u3002 \u5bf9\u5e94\u6570\u636e\u6d41\uff1a werobot\u670d\u52a1\u2192\u8bf7\u6c42\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u2192\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u4e2d\u8bf7\u6c42redis\u670d\u52a1\u2192\u8bf7\u6c42\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u2192\u8bf7\u6c42neo4j\u67e5\u8be2\u670d\u52a1\u2192\u4f7f\u7528\u89c4\u5219\u5bf9\u8bdd\u6a21\u7248/UnitAPI. \u5bf9\u5e94\u64cd\u4f5c\uff1a \u53d1\u9001\"\u6211\u6700\u8fd1\u6709\u4e9b\u8179\u75db\"\u540e\uff0c\u7ee7\u7eed\u53d1\u9001\"\u5e76\u4e14\u5de6\u8179\u90e8\u6709\u4e00\u4e9b\u7ea2\u70b9\". \u67e5\u770b\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u65e5\u5fd7\uff1a cat /var/log/main_server_out \u65e5\u5fd7\u6253\u5370\u7ed3\u679c\uff1a ## \u6253\u5370\u5982\u4e0b\u7ed3\u679c\u8bf4\u660e\u6d4b\u8bd5\u6210\u529f!(\u4f7f\u7528UnitAPI\u8fd4\u56de\u7ed3\u679c) \u5df2\u7ecf\u8fdb\u5165\u4e3b\u8981\u903b\u8f91\u670d\u52a1\uff0cwerobot\u670d\u52a1\u8fd0\u884c\u6b63\u5e38! \u5df2\u7ecf\u5b8c\u6210\u521d\u6b21\u4f1a\u8bdd\u7ba1\u7406\uff0credis\u8fd0\u884c\u6b63\u5e38! \u51c6\u5907\u8bf7\u6c42\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1! \u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u8bf7\u6c42\u6210\u529f\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\uff1a1 \u8bf7\u6c42\u6a21\u578b\u670d\u52a1\u540e\uff0c\u51c6\u5907\u8bf7\u6c42neo4j\u67e5\u8be2\u670d\u52a1! neo4j\u67e5\u8be2\u670d\u52a1\u8bf7\u6c42\u6210\u529f\uff0c\u8fd4\u56de\u7ed3\u679c\uff1a [] \u6ce8\u610f\uff1a\u6253\u5370\u65e5\u5fd7\u82e5\u4e0d\u80fd\u5373\u65f6\u51fa\u73b0\uff0c\u91cd\u65b0\u542f\u52a8\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u5373\u53ef\u3002 \u672c\u7ae0\u603b\u7ed3\uff1a \u5b66\u4e60\u4e86\u638c\u63e1\u5982\u4f55\u542f\u52a8\u7cfb\u7edf\u5728\u7ebf\u90e8\u5206\u7684\u670d\u52a1\uff1a \u4ee5\u6302\u8d77\u7684\u65b9\u5f0f\u542f\u52a8werobot\u670d\u52a1 \u4f7f\u7528supervisor\u542f\u52a8\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u53ca\u5176redis\u670d\u52a1 \u4ee5\u6302\u8d77\u7684\u65b9\u5f0f\u542f\u52a8\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1 \u542f\u52a8\u548c\u67e5\u770bneo4j\u670d\u52a1(\u9ed8\u8ba4\u5df2\u542f\u52a8) \u5b66\u4e60\u4e86\u5982\u4f55\u8fdb\u884c\u6d4b\u8bd5\uff1a \u7b2c\u4e00\u6b65\uff1a\u660e\u786e\u6d4b\u8bd5\u8bf4\u660e\u3002 \u7b2c\u4e8c\u6b65\uff1a\u6dfb\u52a0\u6253\u5370\u6d4b\u8bd5\u5185\u5bb9\u3002 \u7b2c\u4e09\u6b65\uff1a\u91cd\u65b0\u542f\u52a8\u4e3b\u8981\u903b\u8f91\u670d\u52a1\u3002 \u7b2c\u56db\u6b65\uff1a\u8fdb\u884c\u6570\u636e\u6d41\u6d4b\u8bd5\u5e76\u67e5\u770b\u6253\u5370\u65e5\u5fd7\u3002","title":"2 \u6d4b\u8bd5\u8bf7\u6c422"}]}